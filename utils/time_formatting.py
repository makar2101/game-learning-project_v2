"""
–£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å–æ–≤–∏—Ö –º—ñ—Ç–æ–∫ —É –∑—Ä—É—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
"""

def format_time(seconds: float, short: bool = False) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î —á–∞—Å –∑ —Å–µ–∫—É–Ω–¥ —É –∑—Ä—É—á–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
    
    Args:
        seconds: –ß–∞—Å —É —Å–µ–∫—É–Ω–¥–∞—Ö (–º–æ–∂–µ –±—É—Ç–∏ float)
        short: –Ø–∫—â–æ True, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç (1—Ö 18—Å)
    
    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ä—è–¥–æ–∫ —á–∞—Å—É
    
    Examples:
        format_time(78) -> "1 —Ö–≤ 18 —Å–µ–∫"
        format_time(78, short=True) -> "1—Ö 18—Å"
        format_time(3661.5) -> "1 –≥–æ–¥ 1 —Ö–≤ 1.5 —Å–µ–∫"
        format_time(45.2) -> "45.2 —Å–µ–∫"
    """
    if seconds < 0:
        return "0 —Å–µ–∫" if not short else "0—Å"
    
    # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    total_seconds = int(seconds)
    milliseconds = seconds - total_seconds
    
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    remaining_seconds = total_seconds % 60
    
    # –î–æ–¥–∞—î–º–æ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏ –Ω–∞–∑–∞–¥ –¥–æ —Å–µ–∫—É–Ω–¥
    final_seconds = remaining_seconds + milliseconds
    
    parts = []
    
    if short:
        # –ö–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
        if hours > 0:
            parts.append(f"{hours}–≥")
        if minutes > 0:
            parts.append(f"{minutes}—Ö")
        if final_seconds > 0 or not parts:  # –ü–æ–∫–∞–∑—É—î–º–æ —Å–µ–∫—É–Ω–¥–∏ —è–∫—â–æ —Ü–µ —î–¥–∏–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
            if final_seconds == int(final_seconds):
                parts.append(f"{int(final_seconds)}—Å")
            else:
                parts.append(f"{final_seconds:.1f}—Å")
    else:
        # –ü–æ–≤–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
        if hours > 0:
            parts.append(f"{hours} –≥–æ–¥")
        if minutes > 0:
            parts.append(f"{minutes} —Ö–≤")
        if final_seconds > 0 or not parts:  # –ü–æ–∫–∞–∑—É—î–º–æ —Å–µ–∫—É–Ω–¥–∏ —è–∫—â–æ —Ü–µ —î–¥–∏–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
            if final_seconds == int(final_seconds):
                parts.append(f"{int(final_seconds)} —Å–µ–∫")
            else:
                parts.append(f"{final_seconds:.1f} —Å–µ–∫")
    
    return " ".join(parts)


def format_time_range(start_seconds: float, end_seconds: float, short: bool = False) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î —á–∞—Å–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω
    
    Args:
        start_seconds: –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —á–∞—Å —É —Å–µ–∫—É–Ω–¥–∞—Ö
        end_seconds: –ö—ñ–Ω—Ü–µ–≤–∏–π —á–∞—Å —É —Å–µ–∫—É–Ω–¥–∞—Ö
        short: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
    
    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω —á–∞—Å—É
    
    Examples:
        format_time_range(78, 125) -> "1 —Ö–≤ 18 —Å–µ–∫ - 2 —Ö–≤ 5 —Å–µ–∫"
        format_time_range(78, 125, short=True) -> "1—Ö 18—Å - 2—Ö 5—Å"
    """
    start_formatted = format_time(start_seconds, short)
    end_formatted = format_time(end_seconds, short)
    
    separator = " - " if not short else "-"
    return f"{start_formatted}{separator}{end_formatted}"


def format_duration(duration_seconds: float, short: bool = False) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å (—Ä—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ —á–∞—Å–∞–º–∏)
    
    Args:
        duration_seconds: –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —É —Å–µ–∫—É–Ω–¥–∞—Ö
        short: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
    
    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
    
    Examples:
        format_duration(47) -> "47 —Å–µ–∫"
        format_duration(125.5) -> "2 —Ö–≤ 5.5 —Å–µ–∫"
    """
    return format_time(duration_seconds, short)


def parse_time_to_seconds(time_string: str) -> float:
    """
    –ü–∞—Ä—Å–∏—Ç—å —Ä—è–¥–æ–∫ —á–∞—Å—É –Ω–∞–∑–∞–¥ —É —Å–µ–∫—É–Ω–¥–∏
    
    Args:
        time_string: –†—è–¥–æ–∫ —Ç–∏–ø—É "1 —Ö–≤ 18 —Å–µ–∫" –∞–±–æ "1—Ö 18—Å"
    
    Returns:
        –ß–∞—Å —É —Å–µ–∫—É–Ω–¥–∞—Ö
    
    Examples:
        parse_time_to_seconds("1 —Ö–≤ 18 —Å–µ–∫") -> 78.0
        parse_time_to_seconds("1—Ö 18—Å") -> 78.0
        parse_time_to_seconds("45.2 —Å–µ–∫") -> 45.2
    """
    import re
    
    total_seconds = 0.0
    
    # Patterns –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤
    patterns = [
        (r'(\d+(?:\.\d+)?)\s*–≥(?:–æ–¥)?', 3600),  # –≥–æ–¥–∏–Ω–∏
        (r'(\d+(?:\.\d+)?)\s*—Ö(?:–≤)?', 60),     # —Ö–≤–∏–ª–∏–Ω–∏
        (r'(\d+(?:\.\d+)?)\s*—Å(?:–µ–∫)?', 1),     # —Å–µ–∫—É–Ω–¥–∏
    ]
    
    for pattern, multiplier in patterns:
        matches = re.findall(pattern, time_string.lower())
        for match in matches:
            total_seconds += float(match) * multiplier
    
    return total_seconds


def format_timestamp(seconds: float, include_ms: bool = True) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ timestamp (HH:MM:SS –∞–±–æ MM:SS)
    
    Args:
        seconds: –ß–∞—Å —É —Å–µ–∫—É–Ω–¥–∞—Ö
        include_ms: –í–∫–ª—é—á–∞—Ç–∏ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏
    
    Returns:
        Timestamp —Ñ–æ—Ä–º–∞—Ç
    
    Examples:
        format_timestamp(78) -> "01:18"
        format_timestamp(3661.5) -> "01:01:01.5"
        format_timestamp(45.2, include_ms=False) -> "00:45"
    """
    total_seconds = int(seconds)
    milliseconds = seconds - total_seconds
    
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    remaining_seconds = total_seconds % 60
    
    if hours > 0:
        if include_ms and milliseconds > 0:
            return f"{hours:02d}:{minutes:02d}:{remaining_seconds:02d}.{int(milliseconds*10)}"
        else:
            return f"{hours:02d}:{minutes:02d}:{remaining_seconds:02d}"
    else:
        if include_ms and milliseconds > 0:
            return f"{minutes:02d}:{remaining_seconds:02d}.{int(milliseconds*10)}"
        else:
            return f"{minutes:02d}:{remaining_seconds:02d}"


# ==============================================================
# –û–ù–û–í–õ–ï–ù–Ü –§–£–ù–ö–¶–Ü–á –î–õ–Ø –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á –í –ü–†–û–ï–ö–¢
# ==============================================================

def update_sentence_widget_time_display():
    """
    –ü—Ä–∏–∫–ª–∞–¥ —Ç–æ–≥–æ, —è–∫ –æ–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–∞—Å—É –≤ SentenceWidget
    –î–æ–¥–∞–π—Ç–µ —Ü–µ–π –∫–æ–¥ –¥–æ –≤–∞—à–æ–≥–æ sentence_widget.py
    """
    return """
    # –£ –º–µ—Ç–æ–¥—ñ create_english_section() –∑–∞–º—ñ–Ω—ñ—Ç—å:
    # time_text = f"{self.sentence_data['start_time']:.1f}s"
    # –ù–ê:
    time_text = format_time(self.sentence_data['start_time'], short=True)
    
    # –î–ª—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É —á–∞—Å—É:
    time_range_text = format_time_range(
        self.sentence_data['start_time'], 
        self.sentence_data['end_time'], 
        short=True
    )
    
    # –î–ª—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ:
    duration = self.sentence_data['end_time'] - self.sentence_data['start_time']
    duration_text = format_duration(duration, short=True)
    """


def update_main_window_time_display():
    """
    –ü—Ä–∏–∫–ª–∞–¥ —Ç–æ–≥–æ, —è–∫ –æ–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–∞—Å—É –≤ MainWindow
    –î–æ–¥–∞–π—Ç–µ —Ü–µ–π –∫–æ–¥ –¥–æ –≤–∞—à–æ–≥–æ main_window.py
    """
    return """
    # –£ –º–µ—Ç–æ–¥—ñ display_sentences() –∑–∞–º—ñ–Ω—ñ—Ç—å:
    # self.sentences_title.config(text=f"üìñ {filename}")
    # –ù–ê:
    total_duration = sum(s['end_time'] - s['start_time'] for s in sentences)
    duration_text = format_duration(total_duration)
    self.sentences_title.config(text=f"üìñ {filename} ‚Ä¢ {duration_text}")
    
    # –î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:
    stats_text = f"{len(sentences)} —Ä–µ—á–µ–Ω—å ‚Ä¢ {duration_text}"
    self.sentences_stats.config(text=stats_text)
    """


# ==============================================================
# –¢–ï–°–¢–£–í–ê–ù–ù–Ø –§–£–ù–ö–¶–Ü–ô
# ==============================================================

if __name__ == "__main__":
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É"""
    
    test_cases = [
        0,        # 0 —Å–µ–∫
        5.5,      # 5.5 —Å–µ–∫
        45,       # 45 —Å–µ–∫
        78,       # 1 —Ö–≤ 18 —Å–µ–∫
        125.7,    # 2 —Ö–≤ 5.7 —Å–µ–∫
        3661.5,   # 1 –≥–æ–¥ 1 —Ö–≤ 1.5 —Å–µ–∫
        7200,     # 2 –≥–æ–¥
        3600,     # 1 –≥–æ–¥
        60,       # 1 —Ö–≤
        90.25,    # 1 —Ö–≤ 30.25 —Å–µ–∫
    ]
    
    print("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É:")
    print("=" * 60)
    
    for seconds in test_cases:
        full_format = format_time(seconds, short=False)
        short_format = format_time(seconds, short=True)
        timestamp = format_timestamp(seconds)
        
        print(f"{seconds:>8.1f} —Å–µ–∫ -> {full_format:<20} | {short_format:<10} | {timestamp}")
    
    print("\n–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ–≤ —á–∞—Å—É:")
    print("=" * 60)
    
    ranges = [
        (10, 45),      # 10—Å - 45—Å
        (78, 125),     # 1—Ö18—Å - 2—Ö5—Å
        (3600, 3720),  # 1–≥ - 1–≥2—Ö
    ]
    
    for start, end in ranges:
        full_range = format_time_range(start, end, short=False)
        short_range = format_time_range(start, end, short=True)
        duration = format_duration(end - start, short=True)
        
        print(f"{start}-{end} -> {full_range} (—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration})")
    
    print("\n–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Å–∏–Ω–≥—É:")
    print("=" * 60)
    
    parse_tests = [
        "45 —Å–µ–∫",
        "1 —Ö–≤ 18 —Å–µ–∫", 
        "1—Ö 18—Å",
        "2 –≥–æ–¥ 5 —Ö–≤ 30 —Å–µ–∫",
        "1–≥ 5—Ö 30—Å"
    ]
    
    for test_string in parse_tests:
        parsed_seconds = parse_time_to_seconds(test_string)
        back_to_string = format_time(parsed_seconds)
        print(f"'{test_string}' -> {parsed_seconds} —Å–µ–∫ -> '{back_to_string}'")