"""
Ollama Client - –∫–ª—ñ—î–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ª–æ–∫–∞–ª—å–Ω–æ—é Llama –º–æ–¥–µ–ª–ª—é —á–µ—Ä–µ–∑ Ollama
–û–ù–û–í–õ–ï–ù–û: –õ–∞–∫–æ–Ω—ñ—á–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º TES Skyrim
"""

import requests
import json
import logging
from typing import Dict, Optional
import time

class OllamaClient:
    """–ö–ª—ñ—î–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Ollama API –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –¥–ª—è Skyrim"""

    def __init__(self,
                 model: str = "llama3.1:8b",
                 base_url: str = "http://localhost:11434"):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Ollama –∫–ª—ñ—î–Ω—Ç–∞

        Args:
            model: –ù–∞–∑–≤–∞ –º–æ–¥–µ–ª—ñ (llama3.1:8b)
            base_url: URL Ollama —Å–µ—Ä–≤–µ—Ä–∞
        """
        self.model = model
        self.base_url = base_url
        self.logger = logging.getLogger(__name__)

        # –û–ù–û–í–õ–ï–ù–Ü –ü–†–û–ú–ü–¢–ò –¥–ª—è Skyrim –∑ –ª–∞–∫–æ–Ω—ñ—á–Ω–∏–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏
        self.prompts = {
            "translate": """–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Ü–µ –∞–Ω–≥–ª—ñ–π—Å—å–∫–µ —Ä–µ—á–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. 
–î–∞–π —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–∫–ª–∞–¥ –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤:

–†–µ—á–µ–Ω–Ω—è: "{text}"

–ü–µ—Ä–µ–∫–ª–∞–¥:""",

            "grammar": """–¢–∏ –∞–Ω–∞–ª—ñ–∑—É—î—à –¥—ñ–∞–ª–æ–≥–∏ –∑ –≥—Ä–∏ The Elder Scrolls V: Skyrim. 
–î–∞–π –ª–∞–∫–æ–Ω—ñ—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:

üá∫üá¶ –ü–ï–†–ï–ö–õ–ê–î: [—Ç–æ—á–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é]

üìö –ì–†–ê–ú–ê–¢–ò–ö–ê: [–∫–æ—Ä–æ—Ç–∫–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è 1-2 —Ä–µ—á–µ–Ω–Ω—è –ø—Ä–æ –æ—Å–Ω–æ–≤–Ω—ñ –≥—Ä–∞–º–∞—Ç–∏—á–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏]

–†–µ—á–µ–Ω–Ω—è –∑ Skyrim: "{text}"

–í–ê–ñ–õ–ò–í–û: 
- –í—Ä–∞—Ö–æ–≤—É–π —Ñ–∞–Ω—Ç–µ–∑—ñ–π–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–¥—Ä–∞–≥–æ–Ω–∏, –º–∞–≥—ñ—è, Nordic –∫—É–ª—å—Ç—É—Ä–∞)
- –°–µ—Ä–µ–¥–Ω—å–æ–≤—ñ—á–Ω–∏–π —Å—Ç–∏–ª—å –º–æ–≤–ª–µ–Ω–Ω—è
- –Ü–≥—Ä–æ–≤—ñ —Ç–µ—Ä–º—ñ–Ω–∏ –∑–∞–ª–∏—à–∞–π –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –≤ –¥—É–∂–∫–∞—Ö
- –ë—É–¥—å –ª–∞–∫–æ–Ω—ñ—á–Ω–∏–º, –º–∞–∫—Å–∏–º—É–º 3-4 —Ä—è–¥–∫–∏ –∑–∞–≥–∞–ª–æ–º

–í—ñ–¥–ø–æ–≤—ñ–¥—å:""",

            "custom": """–ö–æ–Ω—Ç–µ–∫—Å—Ç: –¥—ñ–∞–ª–æ–≥ –∑ –≥—Ä–∏ Skyrim "{text}"

–ó–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {prompt}

–í—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é (–≤—Ä–∞—Ö–æ–≤—É–π —Ñ–∞–Ω—Ç–µ–∑—ñ–π–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç TES):"""
        }

    def is_available(self) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π Ollama —Å–µ—Ä–≤–µ—Ä

        Returns:
            True —è–∫—â–æ Ollama –ø—Ä–∞—Ü—é—î
        """
        try:
            response = requests.get(f"{self.base_url}/api/tags", timeout=5)
            if response.status_code == 200:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø–æ—Ç—Ä—ñ–±–Ω–∞ –º–æ–¥–µ–ª—å
                models = response.json().get("models", [])
                model_names = [model.get("name", "") for model in models]
                return any(self.model in name for name in model_names)
            return False
        except Exception as e:
            self.logger.debug(f"Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
            return False

    def _make_request(self, prompt: str, max_retries: int = 3) -> Dict[str, any]:
        """
        –†–æ–±–∏—Ç—å –∑–∞–ø–∏—Ç –¥–æ Ollama API –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π

        Args:
            prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç—É
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±

        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {"success": bool, "text": str, "error": str}
        """
        for attempt in range(max_retries):
            try:
                data = {
                    "model": self.model,
                    "prompt": prompt,
                    "stream": False,
                    "options": {
                        "temperature": 0.2,  # –ú–µ–Ω—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
                        "top_p": 0.8,        # –ë—ñ–ª—å—à —Ñ–æ–∫—É—Å–æ–≤–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                        "num_ctx": 2048,     # –ö–æ–Ω—Ç–µ–∫—Å—Ç
                        "max_tokens": 150,   # –û–ë–ú–ï–ñ–ï–ù–ù–Ø: –º–∞–∫—Å–∏–º—É–º 150 —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è –ª–∞–∫–æ–Ω—ñ—á–Ω–æ—Å—Ç—ñ
                        "stop": ["\n\n", "---", "–ü—Ä–∏–∫–ª–∞–¥:", "–î–æ–¥–∞—Ç–∫–æ–≤–æ:"]  # –°—Ç–æ–ø-—Å–ª–æ–≤–∞ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
                    }
                }

                self.logger.debug(f"–ó–∞–ø–∏—Ç –¥–æ Ollama (—Å–ø—Ä–æ–±–∞ {attempt + 1})")

                response = requests.post(
                    f"{self.base_url}/api/generate",
                    json=data,
                    timeout=30  # –ó–º–µ–Ω—à–µ–Ω–æ –∑ 60 –¥–æ 30 —Å–µ–∫—É–Ω–¥
                )

                if response.status_code == 200:
                    result = response.json()
                    generated_text = result.get("response", "").strip()

                    # –û–ë–†–Ü–ó–ê–ù–ù–Ø: –≤–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤–∏–π —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è —Å—Ç–æ–ø-—Å–ª—ñ–≤
                    generated_text = self._trim_response(generated_text)

                    if generated_text:
                        return {
                            "success": True,
                            "text": generated_text,
                            "error": None
                        }
                    else:
                        return {
                            "success": False,
                            "text": "",
                            "error": "–ü–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI"
                        }
                else:
                    error_msg = f"HTTP {response.status_code}: {response.text}"
                    self.logger.warning(f"–ü–æ–º–∏–ª–∫–∞ Ollama: {error_msg}")

                    if attempt == max_retries - 1:
                        return {
                            "success": False,
                            "text": "",
                            "error": error_msg
                        }

                    # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                    time.sleep(2 ** attempt)

            except requests.exceptions.Timeout:
                error_msg = "–¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É –¥–æ AI (30 —Å–µ–∫—É–Ω–¥)"
                self.logger.warning(error_msg)

                if attempt == max_retries - 1:
                    return {
                        "success": False,
                        "text": "",
                        "error": error_msg
                    }

                time.sleep(2 ** attempt)

            except Exception as e:
                error_msg = f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {str(e)}"
                self.logger.error(error_msg)

                if attempt == max_retries - 1:
                    return {
                        "success": False,
                        "text": "",
                        "error": error_msg
                    }

                time.sleep(2 ** attempt)

        return {
            "success": False,
            "text": "",
            "error": "–í–∏—á–µ—Ä–ø–∞–Ω–æ –≤—Å—ñ —Å–ø—Ä–æ–±–∏"
        }

    def _trim_response(self, text: str) -> str:
        """
        –û–±—Ä—ñ–∑–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –ª–∞–∫–æ–Ω—ñ—á–Ω–æ—Å—Ç—ñ

        Args:
            text: –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å

        Returns:
            –û–±—Ä—ñ–∑–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        """
        # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –∞–±–∑–∞—Ü–∏ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –±–ª–æ–∫—É
        lines = text.split('\n')

        # –®—É–∫–∞—î–º–æ –∫—ñ–Ω–µ—Ü—å –æ—Å–Ω–æ–≤–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        main_content = []
        found_grammar = False

        for line in lines:
            line = line.strip()
            if not line:
                if found_grammar:
                    break  # –ó—É–ø–∏–Ω—è—î–º–æ—Å—å –ø—ñ—Å–ª—è –≥—Ä–∞–º–∞—Ç–∏—á–Ω–æ–≥–æ –±–ª–æ–∫—É
                continue

            # –Ü–≥–Ω–æ—Ä—É—î–º–æ –∑–∞–π–≤—ñ –ø–æ—è—Å–Ω–µ–Ω–Ω—è
            if any(skip in line.lower() for skip in ["–ø—Ä–∏–∫–ª–∞–¥:", "–¥–æ–¥–∞—Ç–∫–æ–≤–æ:", "–∑–∞—É–≤–∞–∂–µ–Ω–Ω—è:", "–ø—Ä–∏–º—ñ—Ç–∫–∞:", "–¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ:"]):
                break

            main_content.append(line)

            # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —â–æ –∑–Ω–∞–π—à–ª–∏ –≥—Ä–∞–º–∞—Ç–∏—á–Ω–∏–π –±–ª–æ–∫
            if "üìö" in line or "–≥—Ä–∞–º–∞—Ç–∏–∫–∞:" in line.lower():
                found_grammar = True

        result = '\n'.join(main_content)

        # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É
        if len(result) > 300:  # –ú–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª—ñ–≤
            sentences = result.split('. ')
            trimmed = []
            current_length = 0

            for sentence in sentences:
                if current_length + len(sentence) > 280:
                    break
                trimmed.append(sentence)
                current_length += len(sentence) + 2

            result = '. '.join(trimmed)
            if not result.endswith('.') and not result.endswith('!') and not result.endswith('?'):
                result += '.'

        return result

    def translate(self, text: str) -> Dict[str, any]:
        """
        –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é

        Args:
            text: –ê–Ω–≥–ª—ñ–π—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É

        Returns:
            {"success": bool, "text": str, "error": str}
        """
        if not text.strip():
            return {
                "success": False,
                "text": "",
                "error": "–ü–æ—Ä–æ–∂–Ω—ñ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É"
            }

        prompt = self.prompts["translate"].format(text=text.strip())
        return self._make_request(prompt)

    def explain_grammar(self, text: str) -> Dict[str, any]:
        """
        –ü–æ—è—Å–Ω—é—î –≥—Ä–∞–º–∞—Ç–∏–∫—É –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º Skyrim
        –û–ù–û–í–õ–ï–ù–û: –õ–∞–∫–æ–Ω—ñ—á–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑ –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º

        Args:
            text: –ê–Ω–≥–ª—ñ–π—Å—å–∫–µ —Ä–µ—á–µ–Ω–Ω—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É

        Returns:
            {"success": bool, "text": str, "error": str}
        """
        if not text.strip():
            return {
                "success": False,
                "text": "",
                "error": "–ü–æ—Ä–æ–∂–Ω—ñ–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É"
            }

        prompt = self.prompts["grammar"].format(text=text.strip())
        result = self._make_request(prompt)

        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
        if result["success"]:
            response_text = result["text"]

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
            if "üá∫üá¶" not in response_text and "üìö" not in response_text:
                # –Ø–∫—â–æ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π, –¥–æ–¥–∞—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                lines = response_text.split('\n')
                if len(lines) >= 2:
                    translation = lines[0].strip()
                    grammar = ' '.join(lines[1:]).strip()

                    formatted_response = f"üá∫üá¶ –ü–ï–†–ï–ö–õ–ê–î: {translation}\n\nüìö –ì–†–ê–ú–ê–¢–ò–ö–ê: {grammar}"
                    result["text"] = formatted_response

        return result

    def custom_request(self, text: str, user_prompt: str) -> Dict[str, any]:
        """
        –û–±—Ä–æ–±–ª—è—î –∫–∞—Å—Ç–æ–º–Ω–∏–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º Skyrim

        Args:
            text: –ö–æ–Ω—Ç–µ–∫—Å—Ç - –∞–Ω–≥–ª—ñ–π—Å—å–∫–µ —Ä–µ—á–µ–Ω–Ω—è
            user_prompt: –ó–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        Returns:
            {"success": bool, "text": str, "error": str}
        """
        if not text.strip() or not user_prompt.strip():
            return {
                "success": False,
                "text": "",
                "error": "–ü–æ—Ä–æ–∂–Ω—ñ–π —Ç–µ–∫—Å—Ç –∞–±–æ –∑–∞–ø–∏—Ç"
            }

        prompt = self.prompts["custom"].format(
            text=text.strip(),
            prompt=user_prompt.strip()
        )
        return self._make_request(prompt)

    def get_model_info(self) -> Dict[str, any]:
        """
        –û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–æ–¥–µ–ª—å

        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –º–æ–¥–µ–ª—å
        """
        try:
            response = requests.get(f"{self.base_url}/api/show",
                                  json={"name": self.model},
                                  timeout=10)

            if response.status_code == 200:
                return response.json()
            else:
                return {"error": f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó: {response.status_code}"}

        except Exception as e:
            return {"error": f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"}

    def test_connection(self) -> Dict[str, any]:
        """
        –¢–µ—Å—Ç—É—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Ollama –∑ Skyrim –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É
        """
        if not self.is_available():
            return {
                "success": False,
                "message": f"Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –º–æ–¥–µ–ª—å {self.model} –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            }

        # –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –∑ Skyrim —Ñ—Ä–∞–∑–æ—é
        test_result = self.explain_grammar("You're finally awake!")

        if test_result["success"]:
            return {
                "success": True,
                "message": f"Ollama –ø—Ä–∞—Ü—é—î –∑ –º–æ–¥–µ–ª–ª—é {self.model} –¥–ª—è Skyrim –∫–æ–Ω—Ç–µ–∫—Å—Ç—É",
                "test_response": test_result["text"]
            }
        else:
            return {
                "success": False,
                "message": f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É: {test_result['error']}"
            }


# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ Skyrim —Ñ—Ä–∞–∑–∞–º–∏
if __name__ == "__main__":
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    logging.basicConfig(level=logging.DEBUG)

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
    client = OllamaClient()

    # –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ Skyrim
    print("=== –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Ollama –∑ Skyrim ===")
    test_result = client.test_connection()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {test_result}")

    if test_result["success"]:
        # –¢–µ—Å—Ç –≥—Ä–∞–º–∞—Ç–∏–∫–∏ –∑ –≤—ñ–¥–æ–º–∏–º–∏ Skyrim —Ñ—Ä–∞–∑–∞–º–∏
        print("\n=== –¢–µ—Å—Ç –≥—Ä–∞–º–∞—Ç–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É Skyrim —Ñ—Ä–∞–∑ ===")

        skyrim_phrases = [
            "You're finally awake!",
            "I used to be an adventurer like you, then I took an arrow to the knee.",
            "Hey, you. You're finally awake.",
            "Damn you Stormcloaks. Skyrim was fine until you came along.",
            "Fus Ro Dah!"
        ]

        for phrase in skyrim_phrases:
            print(f"\n--- –§—Ä–∞–∑–∞: {phrase} ---")
            grammar = client.explain_grammar(phrase)
            if grammar["success"]:
                print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å:\n{grammar['text']}")
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {grammar['error']}")