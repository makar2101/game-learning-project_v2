"""
Enhanced Group Widget - –≤—ñ–¥–∂–µ—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—Ä—É–ø–∏ —Å–µ–≥–º–µ–Ω—Ç—ñ–≤ –∑ –∫–∞–¥—Ä–∞–º–∏ —Ç–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º AI
–ó–∞–º—ñ–Ω—é—î –æ–∫—Ä–µ–º—ñ —Ä–µ—á–µ–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø–∏ –∑ –ø–∞—É–∑–∞–º–∏, –¥–æ–¥–∞—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞–¥—Ä—ñ–≤ —Ç–∞ –¥–µ—Ç–∞–ª—å–Ω—ñ AI –ø–æ—è—Å–Ω–µ–Ω–Ω—è
"""

import tkinter as tk
from tkinter import ttk, messagebox
import logging
import threading
import base64
import io
from typing import Dict, List, Optional, Callable
from datetime import datetime
from PIL import Image, ImageTk

# –Ü–º–ø–æ—Ä—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–π —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
from utils.time_formatting import format_time, format_time_range, format_duration


class FrameViewer:
    """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞–¥—Ä—ñ–≤ –∑ –≤—ñ–¥–µ–æ"""

    def __init__(self, parent_frame: ttk.Frame):
        self.parent = parent_frame
        self.current_frames = []
        self.frame_index = 0
        self.logger = logging.getLogger(__name__)

        self.create_viewer()

    def create_viewer(self):
        """–°—Ç–≤–æ—Ä—é—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–∞–¥—Ä—ñ–≤"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(self.parent)
        header_frame.pack(fill=tk.X, pady=(0, 5))

        ttk.Label(header_frame, text="üñºÔ∏è –ö–∞–¥—Ä–∏ –∑ –≤—ñ–¥–µ–æ:", font=("Arial", 10, "bold")).pack(side=tk.LEFT)

        # –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞–¥—Ä—ñ–≤
        self.frame_indicator = ttk.Label(header_frame, text="", font=("Arial", 9))
        self.frame_indicator.pack(side=tk.RIGHT)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞–¥—Ä—É
        self.frame_container = ttk.Frame(self.parent)
        self.frame_container.pack(fill=tk.BOTH, expand=True)

        # –õ–µ–π–±–ª –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self.image_label = ttk.Label(self.frame_container, text="üì∑ –ö–∞–¥—Ä–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ")
        self.image_label.pack(expand=True)

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        nav_frame = ttk.Frame(self.parent)
        nav_frame.pack(fill=tk.X, pady=(5, 0))

        self.prev_btn = ttk.Button(nav_frame, text="‚óÄ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π",
                                   command=self.previous_frame, state=tk.DISABLED)
        self.prev_btn.pack(side=tk.LEFT, padx=2)

        self.next_btn = ttk.Button(nav_frame, text="–ù–∞—Å—Ç—É–ø–Ω–∏–π ‚ñ∂",
                                   command=self.next_frame, state=tk.DISABLED)
        self.next_btn.pack(side=tk.LEFT, padx=2)

        self.open_btn = ttk.Button(nav_frame, text="üîç –ó–±—ñ–ª—å—à–∏—Ç–∏",
                                   command=self.open_fullscreen, state=tk.DISABLED)
        self.open_btn.pack(side=tk.RIGHT, padx=2)

        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–∞–¥—Ä
        self.frame_info = ttk.Label(nav_frame, text="", font=("Arial", 8))
        self.frame_info.pack(side=tk.RIGHT, padx=(10, 5))

    def load_frames(self, frames_data: List[Dict]):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–∞–¥—Ä–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        self.current_frames = frames_data
        self.frame_index = 0

        if frames_data:
            self.update_frame_display()
            self.prev_btn.config(state=tk.NORMAL if len(frames_data) > 1 else tk.DISABLED)
            self.next_btn.config(state=tk.NORMAL if len(frames_data) > 1 else tk.DISABLED)
            self.open_btn.config(state=tk.NORMAL)
        else:
            self.clear_display()

    def update_frame_display(self):
        """–û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–∞–¥—Ä—É"""
        if not self.current_frames:
            return

        try:
            frame_data = self.current_frames[self.frame_index]

            # –î–µ–∫–æ–¥—É—î–º–æ base64 –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            image_data = base64.b64decode(frame_data['thumbnail_b64'])
            image = Image.open(io.BytesIO(image_data))

            # –ú–∞—Å—à—Ç–∞–±—É—î–º–æ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            display_image = self.resize_for_display(image, (300, 200))
            photo = ImageTk.PhotoImage(display_image)

            # –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            self.image_label.config(image=photo, text="")
            self.image_label.image = photo  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è

            # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
            total = len(self.current_frames)
            self.frame_indicator.config(text=f"{self.frame_index + 1}/{total}")

            timestamp = format_time(frame_data['timestamp'])
            self.frame_info.config(text=f"‚è∞ {timestamp}")

            # –î–æ–¥–∞—î–º–æ –∫–ª—ñ–∫ –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è
            self.image_label.bind('<Double-Button-1>', lambda e: self.open_fullscreen())

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞–¥—Ä—É: {e}")
            self.image_label.config(image="", text="‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞–¥—Ä—É")

    def resize_for_display(self, image: Image.Image, target_size: tuple) -> Image.Image:
        """–ó–º—ñ–Ω—é—î —Ä–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó"""
        original_width, original_height = image.size
        target_width, target_height = target_size

        # –û–±—á–∏—Å–ª—é—î–º–æ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
        ratio = min(target_width / original_width, target_height / original_height)

        new_width = int(original_width * ratio)
        new_height = int(original_height * ratio)

        return image.resize((new_width, new_height), Image.Resampling.LANCZOS)

    def previous_frame(self):
        """–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫–∞–¥—Ä—É"""
        if self.current_frames and self.frame_index > 0:
            self.frame_index -= 1
            self.update_frame_display()

    def next_frame(self):
        """–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–∞–¥—Ä—É"""
        if self.current_frames and self.frame_index < len(self.current_frames) - 1:
            self.frame_index += 1
            self.update_frame_display()

    def open_fullscreen(self):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î –∫–∞–¥—Ä —É –ø–æ–≤–Ω–æ—Ä–æ–∑–º—ñ—Ä–Ω–æ–º—É –≤—ñ–∫–Ω—ñ"""
        if not self.current_frames:
            return

        try:
            frame_data = self.current_frames[self.frame_index]

            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –≤—ñ–∫–Ω–æ
            fullscreen_window = tk.Toplevel(self.parent)
            fullscreen_window.title(f"–ö–∞–¥—Ä - {format_time(frame_data['timestamp'])}")
            fullscreen_window.geometry("800x600")

            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ–≤–Ω–æ—Ä–æ–∑–º—ñ—Ä–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É
            if 'frame_path' in frame_data:
                try:
                    image = Image.open(frame_data['frame_path'])
                    display_image = self.resize_for_display(image, (750, 550))
                    photo = ImageTk.PhotoImage(display_image)

                    label = ttk.Label(fullscreen_window, image=photo)
                    label.image = photo
                    label.pack(expand=True)

                    # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
                    info_frame = ttk.Frame(fullscreen_window)
                    info_frame.pack(fill=tk.X, padx=10, pady=5)

                    ttk.Label(info_frame, text=f"–ß–∞—Å: {format_time(frame_data['timestamp'])}").pack(side=tk.LEFT)
                    ttk.Label(info_frame, text=f"–†–æ–∑–º—ñ—Ä: {image.size[0]}√ó{image.size[1]}").pack(side=tk.RIGHT)

                except Exception as e:
                    ttk.Label(fullscreen_window, text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}").pack(expand=True)

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–≤–Ω–æ—Ä–æ–∑–º—ñ—Ä–Ω–æ–≥–æ –∫–∞–¥—Ä—É: {e}")

    def clear_display(self):
        """–û—á–∏—â–∞—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        self.image_label.config(image="", text="üì∑ –ö–∞–¥—Ä–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ")
        self.image_label.image = None
        self.frame_indicator.config(text="")
        self.frame_info.config(text="")
        self.prev_btn.config(state=tk.DISABLED)
        self.next_btn.config(state=tk.DISABLED)
        self.open_btn.config(state=tk.DISABLED)


class AIAnalysisPanel:
    """–ü–∞–Ω–µ–ª—å –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ AI –∞–Ω–∞–ª—ñ–∑—É"""

    def __init__(self, parent_frame: ttk.Frame, ai_manager, group_data: Dict):
        self.parent = parent_frame
        self.ai_manager = ai_manager
        self.group_data = group_data
        self.logger = logging.getLogger(__name__)

        self.analysis_tabs = {}
        self.create_panel()

    def create_panel(self):
        """–°—Ç–≤–æ—Ä—é—î –ø–∞–Ω–µ–ª—å –∑ –≤–∫–ª–∞–¥–∫–∞–º–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(self.parent)
        header_frame.pack(fill=tk.X, pady=(0, 5))

        ttk.Label(header_frame, text="ü§ñ AI –ê–Ω–∞–ª—ñ–∑:", font=("Arial", 10, "bold")).pack(side=tk.LEFT)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É
        buttons_frame = ttk.Frame(header_frame)
        buttons_frame.pack(side=tk.RIGHT)

        ttk.Button(buttons_frame, text="üìö –í—Å–µ–±—ñ—á–Ω–∏–π",
                   command=self.generate_comprehensive, width=12).pack(side=tk.LEFT, padx=1)
        ttk.Button(buttons_frame, text="üîó –ö–æ–Ω—Ç–µ–∫—Å—Ç",
                   command=self.generate_contextual, width=10).pack(side=tk.LEFT, padx=1)
        ttk.Button(buttons_frame, text="üìù –õ–µ–∫—Å–∏–∫–∞",
                   command=self.generate_vocabulary, width=10).pack(side=tk.LEFT, padx=1)
        ttk.Button(buttons_frame, text="üó£Ô∏è –í–∏–º–æ–≤–∞",
                   command=self.generate_pronunciation, width=10).pack(side=tk.LEFT, padx=1)

        # –°—Ç–≤–æ—Ä—é—î–º–æ Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self.parent)
        self.notebook.pack(fill=tk.BOTH, expand=True, pady=(5, 0))

        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É
        self.create_analysis_tabs()

    def create_analysis_tabs(self):
        """–°—Ç–≤–æ—Ä—é—î –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É"""
        analysis_types = [
            ("comprehensive", "üìö –í—Å–µ–±—ñ—á–Ω–∏–π", "üí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–í—Å–µ–±—ñ—á–Ω–∏–π' –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É"),
            ("contextual", "üîó –ö–æ–Ω—Ç–µ–∫—Å—Ç", "üí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ö–æ–Ω—Ç–µ–∫—Å—Ç' –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ—è—Å–Ω–µ–Ω–Ω—è"),
            ("vocabulary", "üìù –õ–µ–∫—Å–∏–∫–∞", "üí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–õ–µ–∫—Å–∏–∫–∞' –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å–ª–æ–≤–Ω–∏–∫–æ–≤–æ–≥–æ –∑–∞–ø–∞—Å—É"),
            ("pronunciation", "üó£Ô∏è –í–∏–º–æ–≤–∞", "üí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–í–∏–º–æ–≤–∞' –¥–ª—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑ –≤–∏–º–æ–≤–∏")
        ]

        for analysis_type, tab_title, placeholder_text in analysis_types:
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—Ä–µ–π–º –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
            tab_frame = ttk.Frame(self.notebook)
            self.notebook.add(tab_frame, text=tab_title)

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é
            text_widget = tk.Text(
                tab_frame,
                wrap=tk.WORD,
                font=("Arial", 10),
                bg="#f8f9fa",
                relief=tk.FLAT,
                borderwidth=1
            )

            scrollbar = ttk.Scrollbar(tab_frame, orient="vertical", command=text_widget.yview)
            text_widget.configure(yscrollcommand=scrollbar.set)

            text_widget.pack(side="left", fill="both", expand=True)
            scrollbar.pack(side="right", fill="y")

            # –î–æ–¥–∞—î–º–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
            text_widget.insert(tk.END, placeholder_text)
            text_widget.config(state=tk.DISABLED)

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            self.analysis_tabs[analysis_type] = text_widget

    def generate_comprehensive(self):
        """–ì–µ–Ω–µ—Ä—É—î –≤—Å–µ–±—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑"""
        self._generate_analysis("comprehensive",
                                self.ai_manager.analyze_sentence_comprehensive,
                                self._prepare_comprehensive_context())

    def generate_contextual(self):
        """–ì–µ–Ω–µ—Ä—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è"""
        self._generate_analysis("contextual",
                                self.ai_manager.explain_in_context,
                                self._prepare_contextual_context())

    def generate_vocabulary(self):
        """–ì–µ–Ω–µ—Ä—É—î –∞–Ω–∞–ª—ñ–∑ –ª–µ–∫—Å–∏–∫–∏"""
        self._generate_analysis("vocabulary",
                                self.ai_manager.analyze_vocabulary)

    def generate_pronunciation(self):
        """–ì–µ–Ω–µ—Ä—É—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –∑ –≤–∏–º–æ–≤–∏"""
        self._generate_analysis("pronunciation",
                                self.ai_manager.get_pronunciation_guide)

    def _generate_analysis(self, analysis_type: str, ai_method, context=None):
        """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–Ω–∞–ª—ñ–∑—É"""
        if not self.ai_manager or not self.ai_manager.is_available():
            self._show_error(analysis_type, "AI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
            return

        text_widget = self.analysis_tabs[analysis_type]
        text = self.group_data['combined_text']

        # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        self._show_loading(analysis_type)

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –≤–∫–ª–∞–¥–∫—É
        for i, (tab_type, _, _) in enumerate([
            ("comprehensive", "", ""), ("contextual", "", ""),
            ("vocabulary", "", ""), ("pronunciation", "", "")
        ]):
            if tab_type == analysis_type:
                self.notebook.select(i)
                break

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        threading.Thread(
            target=self._analysis_thread,
            args=(analysis_type, ai_method, text, context),
            daemon=True
        ).start()

    def _analysis_thread(self, analysis_type: str, ai_method, text: str, context=None):
        """–í–∏–∫–æ–Ω—É—î –∞–Ω–∞–ª—ñ–∑ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        try:
            if context is not None:
                result = ai_method(text, context)
            else:
                result = ai_method(text)

            # –û–Ω–æ–≤–ª—é—î–º–æ UI –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            self.parent.after(0, lambda: self._update_analysis_result(analysis_type, result))

        except Exception as e:
            self.parent.after(0, lambda: self._show_error(analysis_type, str(e)))

    def _update_analysis_result(self, analysis_type: str, result: Dict):
        """–û–Ω–æ–≤–ª—é—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É –≤ UI"""
        text_widget = self.analysis_tabs[analysis_type]

        if result.get('success'):
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –∞–Ω–∞–ª—ñ–∑—É
            formatted_text = self._format_analysis_result(analysis_type, result)

            text_widget.config(state=tk.NORMAL, bg="#ffffff")
            text_widget.delete(1.0, tk.END)
            text_widget.insert(tk.END, formatted_text)
            text_widget.config(state=tk.DISABLED)
        else:
            self._show_error(analysis_type, result.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'))

    def _format_analysis_result(self, analysis_type: str, result: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        timestamp = datetime.now().strftime("%H:%M:%S")

        if analysis_type == "comprehensive":
            analysis = result.get('analysis', {})
            if isinstance(analysis, dict):
                formatted = f"üïê –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {timestamp}\n"
                formatted += f"üìä –†—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ: {result.get('difficulty_level', '–ù–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ')}\n\n"

                sections = [
                    ("üî§ –ü–ï–†–ï–ö–õ–ê–î:", analysis.get('translation', '')),
                    ("üìö –ì–†–ê–ú–ê–¢–ò–ö–ê:", analysis.get('grammar', '')),
                    ("üìñ –õ–ï–ö–°–ò–ö–ê:", analysis.get('vocabulary', '')),
                    ("üó£Ô∏è –§–û–ù–ï–¢–ò–ö–ê:", analysis.get('phonetics', '')),
                    ("üí° –ü–û–†–ê–î–ò:", analysis.get('memorization_tips', ''))
                ]

                for title, content in sections:
                    if content.strip():
                        formatted += f"{title}\n{content.strip()}\n\n"

                return formatted
            else:
                return f"üïê –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {timestamp}\n\n{analysis.get('full_text', result.get('analysis', ''))}"

        elif analysis_type == "contextual":
            return f"üïê –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {timestamp}\n\n{result.get('explanation', '')}"

        elif analysis_type == "vocabulary":
            vocab_text = f"üïê –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {timestamp}\n\n"
            vocab_text += result.get('vocabulary_analysis', '')

            # –î–æ–¥–∞—î–º–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
            key_words = result.get('key_words', [])
            if key_words:
                vocab_text += "\n\nüîë –ö–õ–Æ–ß–û–í–Ü –°–õ–û–í–ê:\n"
                for word_info in key_words:
                    vocab_text += f"‚Ä¢ {word_info['word']} (—Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: {word_info['complexity']})\n"

            return vocab_text

        elif analysis_type == "pronunciation":
            pronunciation_text = f"üïê –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {timestamp}\n\n"
            pronunciation_text += result.get('pronunciation_guide', '')

            # –î–æ–¥–∞—î–º–æ —Ñ–æ–Ω–µ—Ç–∏—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
            phonetic_info = result.get('phonetic_info', {})
            if phonetic_info:
                pronunciation_text += "\n\nüéØ –§–û–ù–ï–¢–ò–ß–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø:\n"

                difficult_sounds = phonetic_info.get('difficult_sounds', [])
                if difficult_sounds:
                    pronunciation_text += f"‚ö†Ô∏è –°–∫–ª–∞–¥–Ω—ñ –∑–≤—É–∫–∏: {', '.join(difficult_sounds)}\n"

                duration = phonetic_info.get('estimated_duration', 0)
                if duration:
                    pronunciation_text += f"‚è±Ô∏è –ü—Ä–∏–±–ª–∏–∑–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration:.1f} —Å–µ–∫—É–Ω–¥\n"

            return pronunciation_text

        return f"üïê –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {timestamp}\n\n{result}"

    def _show_loading(self, analysis_type: str):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"""
        text_widget = self.analysis_tabs[analysis_type]
        text_widget.config(state=tk.NORMAL, bg="#fff3cd")
        text_widget.delete(1.0, tk.END)
        text_widget.insert(tk.END, "üîÑ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É...\n–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ...")
        text_widget.config(state=tk.DISABLED)

    def _show_error(self, analysis_type: str, error_message: str):
        """–ü–æ–∫–∞–∑—É—î –ø–æ–º–∏–ª–∫—É"""
        text_widget = self.analysis_tabs[analysis_type]
        text_widget.config(state=tk.NORMAL, bg="#f8d7da")
        text_widget.delete(1.0, tk.END)
        text_widget.insert(tk.END, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {error_message}")
        text_widget.config(state=tk.DISABLED)

    def _prepare_comprehensive_context(self) -> Dict:
        """–ü—ñ–¥–≥–æ—Ç–æ–≤—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å–µ–±—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É"""
        return {
            "video_title": getattr(self, 'video_filename', '–ù–µ–≤—ñ–¥–æ–º–µ –≤—ñ–¥–µ–æ'),
            "scene_description": f"–ì—Ä—É–ø–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é {self.group_data.get('group_duration', 0):.1f} —Å–µ–∫—É–Ω–¥",
            "difficulty_level": self.group_data.get('difficulty_level', 'intermediate'),
            "word_count": self.group_data.get('word_count', 0)
        }

    def _prepare_contextual_context(self) -> Dict:
        """–ü—ñ–¥–≥–æ—Ç–æ–≤—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É"""
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —Ç–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≥—Ä—É–ø
        return {
            "previous_sentence": "–ü–æ–ø–µ—Ä–µ–¥–Ω—è –≥—Ä—É–ø–∞...",  # TODO: —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏
            "next_sentence": "–ù–∞—Å—Ç—É–ø–Ω–∞ –≥—Ä—É–ø–∞...",  # TODO: —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏
            "video_description": f"–í—ñ–¥–µ–æ –≥—Ä—É–ø–∞ –∑ {self.group_data.get('segments_count', 0)} —Å–µ–≥–º–µ–Ω—Ç—ñ–≤"
        }


class EnhancedGroupWidget:
    """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –≤—ñ–¥–∂–µ—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—Ä—É–ø–∏ —Å–µ–≥–º–µ–Ω—Ç—ñ–≤ –∑ –∫–∞–¥—Ä–∞–º–∏ —Ç–∞ AI"""

    def __init__(self,
                 parent_frame: ttk.Frame,
                 group_data: Dict,
                 video_filename: str,
                 group_index: int,
                 ai_manager,
                 data_manager,
                 on_group_click: Optional[Callable] = None):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–∂–µ—Ç–∞ –≥—Ä—É–ø–∏"""

        self.parent = parent_frame
        self.group_data = group_data
        self.video_filename = video_filename
        self.group_index = group_index
        self.ai_manager = ai_manager
        self.data_manager = data_manager
        self.on_group_click = on_group_click

        self.logger = logging.getLogger(__name__)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
        if not self._validate_group_data():
            raise ValueError("–ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –≥—Ä—É–ø–∏")

        # –°—Ç–∞–Ω –≤—ñ–¥–∂–µ—Ç–∞
        self.is_expanded = False
        self.is_destroyed = False

        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–∂–µ—Ç
        self.create_widget()

    def _validate_group_data(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö –≥—Ä—É–ø–∏"""
        required_fields = ['combined_text', 'group_start_time', 'group_end_time', 'group_duration']
        return all(field in self.group_data for field in required_fields)

    def create_widget(self):
        """–°—Ç–≤–æ—Ä—é—î –≤—ñ–¥–∂–µ—Ç –≥—Ä—É–ø–∏"""
        try:
            # –§–æ—Ä–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –≥—Ä—É–ø—É
            duration = self.group_data['group_duration']
            start_time = self.group_data['group_start_time']
            word_count = self.group_data.get('word_count', 0)
            segments_count = self.group_data.get('segments_count', 0)
            difficulty = self.group_data.get('difficulty_level', 'intermediate')

            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–∞—Å
            duration_text = format_duration(duration, short=True)
            start_time_text = format_time(start_time, short=True)

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title_parts = [
                f"–ì—Ä—É–ø–∞ {self.group_index + 1}",
                f"üïê {start_time_text}",
                f"‚è±Ô∏è {duration_text}",
                f"üìù {word_count} —Å–ª—ñ–≤",
                f"üéØ {segments_count} —Å–µ–≥–º–µ–Ω—Ç—ñ–≤"
            ]

            # –î–æ–¥–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
            difficulty_icons = {
                'beginner': 'üü¢',
                'intermediate': 'üü°',
                'advanced': 'üî¥'
            }
            difficulty_icon = difficulty_icons.get(difficulty.split()[0].lower(), 'üü°')
            title_parts.append(f"{difficulty_icon} {difficulty}")

            title_text = " ‚Ä¢ ".join(title_parts)

            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ñ—Ä–µ–π–º –≥—Ä—É–ø–∏
            self.main_frame = ttk.LabelFrame(self.parent, text=title_text)
            self.main_frame.pack(fill=tk.X, padx=5, pady=3)

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏–π –≤–º—ñ—Å—Ç
            self.create_group_header()
            self.create_expandable_content()

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç–∞ –≥—Ä—É–ø–∏: {e}")
            raise

    def create_group_header(self):
        """–°—Ç–≤–æ—Ä—é—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–∏ –∑ –æ—Å–Ω–æ–≤–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é"""
        header_frame = ttk.Frame(self.main_frame)
        header_frame.pack(fill=tk.X, padx=5, pady=5)

        # –¢–µ–∫—Å—Ç –≥—Ä—É–ø–∏ (—Å–∫–æ—Ä–æ—á–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
        text_frame = ttk.Frame(header_frame)
        text_frame.pack(fill=tk.X, pady=(0, 5))

        ttk.Label(text_frame, text="üá¨üáß English:", font=("Arial", 10, "bold")).pack(anchor=tk.W)

        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 150 —Å–∏–º–≤–æ–ª—ñ–≤ —Ç–µ–∫—Å—Ç—É
        preview_text = self.group_data['combined_text']
        if len(preview_text) > 150:
            preview_text = preview_text[:150] + "..."

        self.preview_label = tk.Text(
            text_frame,
            height=3,
            font=("Arial", 11),
            bg="#f0f0f0",
            relief=tk.FLAT,
            borderwidth=1,
            state=tk.DISABLED,
            cursor="hand2",
            wrap=tk.WORD
        )
        self.preview_label.pack(fill=tk.X, pady=(2, 0))

        # –í—Å—Ç–∞–≤–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–µ–∫—Å—Ç
        self.preview_label.config(state=tk.NORMAL)
        self.preview_label.insert(tk.END, preview_text)
        self.preview_label.config(state=tk.DISABLED)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        controls_frame = ttk.Frame(header_frame)
        controls_frame.pack(fill=tk.X, pady=(5, 0))

        # –õ—ñ–≤—ñ –∫–Ω–æ–ø–∫–∏
        left_controls = ttk.Frame(controls_frame)
        left_controls.pack(side=tk.LEFT)

        ttk.Button(left_controls, text="‚ñ∂ –í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏",
                   command=self.play_group_video, width=12).pack(side=tk.LEFT, padx=2)
        ttk.Button(left_controls, text="üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏",
                   command=self.copy_group_text, width=12).pack(side=tk.LEFT, padx=2)

        # –ü—Ä–∞–≤–∞ –∫–Ω–æ–ø–∫–∞ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è
        self.expand_button = ttk.Button(controls_frame, text="üîΩ –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ",
                                        command=self.toggle_expansion, width=15)
        self.expand_button.pack(side=tk.RIGHT)

        # –ü—Ä–∏–≤'—è–∑—É—î–º–æ –∫–ª—ñ–∫ –¥–æ —Ç–µ–∫—Å—Ç—É
        self.preview_label.bind('<Button-1>', self.on_group_selected)

    def create_expandable_content(self):
        """–°—Ç–≤–æ—Ä—é—î —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏–π –≤–º—ñ—Å—Ç –≥—Ä—É–ø–∏"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–æ–≥–æ –≤–º—ñ—Å—Ç—É (—Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π)
        self.expanded_frame = ttk.Frame(self.main_frame)
        # –ù–µ –ø–∞–∫—É—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É

        # –°—Ç–≤–æ—Ä—é—î–º–æ Paned Window –¥–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è
        self.content_paned = ttk.PanedWindow(self.expanded_frame, orient=tk.HORIZONTAL)
        self.content_paned.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        # –õ—ñ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç —Ç–∞ –∫–∞–¥—Ä–∏ (60%)
        self.create_left_panel()

        # –ü—Ä–∞–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - AI –∞–Ω–∞–ª—ñ–∑ (40%)
        self.create_right_panel()

    def create_left_panel(self):
        """–°—Ç–≤–æ—Ä—é—î –ª—ñ–≤—É –ø–∞–Ω–µ–ª—å –∑ —Ç–µ–∫—Å—Ç–æ–º —Ç–∞ –∫–∞–¥—Ä–∞–º–∏"""
        left_frame = ttk.Frame(self.content_paned)
        self.content_paned.add(left_frame, weight=6)

        # –ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –≥—Ä—É–ø–∏
        text_section = ttk.LabelFrame(left_frame, text="üìù –ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç")
        text_section.pack(fill=tk.BOTH, expand=True, pady=(0, 5))

        self.full_text_widget = tk.Text(
            text_section,
            height=6,
            font=("Arial", 11),
            bg="#ffffff",
            relief=tk.FLAT,
            borderwidth=1,
            wrap=tk.WORD
        )

        text_scrollbar = ttk.Scrollbar(text_section, orient="vertical",
                                       command=self.full_text_widget.yview)
        self.full_text_widget.configure(yscrollcommand=text_scrollbar.set)

        self.full_text_widget.pack(side="left", fill="both", expand=True, padx=5, pady=5)
        text_scrollbar.pack(side="right", fill="y", pady=5)

        # –í—Å—Ç–∞–≤–ª—è—î–º–æ –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
        self.full_text_widget.insert(tk.END, self.group_data['combined_text'])
        self.full_text_widget.config(state=tk.DISABLED)

        # –°–µ–∫—Ü—ñ—è –∫–∞–¥—Ä—ñ–≤
        frames_section = ttk.LabelFrame(left_frame, text="üñºÔ∏è –ö–∞–¥—Ä–∏ –∑ –≤—ñ–¥–µ–æ")
        frames_section.pack(fill=tk.BOTH, expand=True)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–µ—Ä–µ–≥–ª—è–¥–∞—á –∫–∞–¥—Ä—ñ–≤
        self.frame_viewer = FrameViewer(frames_section)

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–∞–¥—Ä–∏ —è–∫—â–æ —î
        frames_data = self.group_data.get('frames', [])
        if frames_data:
            self.frame_viewer.load_frames(frames_data)

    def create_right_panel(self):
        """–°—Ç–≤–æ—Ä—é—î –ø—Ä–∞–≤—É –ø–∞–Ω–µ–ª—å –∑ AI –∞–Ω–∞–ª—ñ–∑–æ–º"""
        right_frame = ttk.Frame(self.content_paned)
        self.content_paned.add(right_frame, weight=4)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–Ω–µ–ª—å AI –∞–Ω–∞–ª—ñ–∑—É
        self.ai_panel = AIAnalysisPanel(right_frame, self.ai_manager, self.group_data)
        self.ai_panel.video_filename = self.video_filename  # –ü–µ—Ä–µ–¥–∞—î–º–æ –Ω–∞–∑–≤—É –≤—ñ–¥–µ–æ

    def toggle_expansion(self):
        """–ü–µ—Ä–µ–º–∏–∫–∞—î —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è/–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –≥—Ä—É–ø–∏"""
        if self.is_expanded:
            self.collapse_group()
        else:
            self.expand_group()

    def expand_group(self):
        """–†–æ–∑–≥–æ—Ä—Ç–∞—î –≥—Ä—É–ø—É"""
        self.expanded_frame.pack(fill=tk.BOTH, expand=True, pady=(5, 0))
        self.expand_button.config(text="üîº –ó–≥–æ—Ä–Ω—É—Ç–∏")
        self.is_expanded = True

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó Paned Window
        self.main_frame.after(100, lambda: self.content_paned.sashpos(0, 400))

    def collapse_group(self):
        """–ó–≥–æ—Ä—Ç–∞—î –≥—Ä—É–ø—É"""
        self.expanded_frame.pack_forget()
        self.expand_button.config(text="üîΩ –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ")
        self.is_expanded = False

    def play_group_video(self):
        """–í—ñ–¥—Ç–≤–æ—Ä—é—î –≤—ñ–¥–µ–æ –∑ –ø–æ—á–∞—Ç–∫—É –≥—Ä—É–ø–∏"""
        try:
            import subprocess
            from pathlib import Path

            video_path = None

            # –ü–æ—à—É–∫ –≤—ñ–¥–µ–æ —Ñ–∞–π–ª—É
            try:
                from processing.database_manager import DatabaseManager
                db_manager = DatabaseManager()
                videos = db_manager.get_all_videos()
                for video in videos:
                    if video['filename'] == self.video_filename:
                        video_path = video['filepath']
                        break
            except:
                videos_dir = Path("videos")
                potential_path = videos_dir / self.video_filename
                if potential_path.exists():
                    video_path = str(potential_path)

            if not video_path:
                messagebox.showwarning("–ü–æ–º–∏–ª–∫–∞", "–í—ñ–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return

            start_time = self.group_data['group_start_time']
            end_time = self.group_data['group_end_time']

            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–∞—Å –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            time_range = format_time_range(start_time, end_time)

            # –°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å–∫—É —Ä—ñ–∑–Ω–∏—Ö –ø–ª–µ—î—Ä—ñ–≤
            players = [
                (['vlc', video_path, f'--start-time={start_time}', f'--stop-time={end_time}'], "VLC"),
                (['mpv', video_path, f'--start={start_time}', f'--end={end_time}'], "MPV"),
                (['ffplay', video_path, '-ss', str(start_time), '-t', str(end_time - start_time)], "FFplay")
            ]

            for cmd, name in players:
                try:
                    subprocess.Popen(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    self.show_temporary_message(f"‚úÖ {name} –≤—ñ–¥–∫—Ä–∏—Ç–æ: {time_range}")
                    return
                except FileNotFoundError:
                    continue

            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø–ª–µ—î—Ä
            try:
                import os
                os.startfile(video_path)
                self.show_temporary_message(f"‚úÖ –í—ñ–¥–∫—Ä–∏—Ç–æ (–ø–µ—Ä–µ–º–æ—Ç–∞–π—Ç–µ –Ω–∞ {format_time(start_time)})")
            except:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –≤—ñ–¥–µ–æ")

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ: {e}")
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è: {e}")

    def copy_group_text(self):
        """–ö–æ–ø—ñ—é—î —Ç–µ–∫—Å—Ç –≥—Ä—É–ø–∏ –∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º"""
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")

            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä—É–ø—É
            start_time = self.group_data['group_start_time']
            end_time = self.group_data['group_end_time']
            duration = self.group_data['group_duration']

            time_range = format_time_range(start_time, end_time)
            duration_text = format_duration(duration)

            text_to_copy = f"[{timestamp}] {self.video_filename}\n"
            text_to_copy += f"üì¶ –ì—Ä—É–ø–∞ {self.group_index + 1}\n"
            text_to_copy += f"üïê –ß–∞—Å: {time_range} (—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration_text})\n"
            text_to_copy += f"üìä –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: {self.group_data.get('difficulty_level', 'intermediate')}\n"
            text_to_copy += f"üìù –°–ª—ñ–≤: {self.group_data.get('word_count', 0)}, "
            text_to_copy += f"–°–µ–≥–º–µ–Ω—Ç—ñ–≤: {self.group_data.get('segments_count', 0)}\n\n"
            text_to_copy += f"üá¨üáß –¢–µ–∫—Å—Ç:\n{self.group_data['combined_text']}\n"
            text_to_copy += "‚îÄ" * 60

            self.main_frame.clipboard_clear()
            self.main_frame.clipboard_append(text_to_copy)

            start_time_short = format_time(start_time, short=True)
            self.show_temporary_message(f"‚úÖ –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≥—Ä—É–ø—É ({start_time_short})")

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: {e}")

    def show_temporary_message(self, message: str, duration: int = 3000):
        """–ü–æ–∫–∞–∑—É—î —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        try:
            # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if hasattr(self, 'temp_message_label'):
                self.temp_message_label.destroy()

            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ
            self.temp_message_label = tk.Label(
                self.main_frame,
                text=message,
                bg="#d4edda",
                fg="#155724",
                font=("Arial", 9, "bold"),
                relief=tk.RAISED,
                borderwidth=1,
                padx=10,
                pady=2
            )

            # –ü–æ–∫–∞–∑—É—î–º–æ –≤ –ø—Ä–∞–≤–æ–º—É –≤–µ—Ä—Ö–Ω—å–æ–º—É –∫—É—Ç—ñ
            self.temp_message_label.place(relx=1.0, rely=0.0, anchor="ne")

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ö–æ–≤–∞—î–º–æ
            self.main_frame.after(duration, self.hide_temporary_message)

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

    def hide_temporary_message(self):
        """–•–æ–≤–∞—î —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        try:
            if hasattr(self, 'temp_message_label'):
                self.temp_message_label.destroy()
                delattr(self, 'temp_message_label')
        except:
            pass

    def on_group_selected(self, event=None):
        """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –≥—Ä—É–ø–∏"""
        try:
            if self.on_group_click:
                self.on_group_click(self.group_data, self.video_filename)

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ —è–∫—â–æ –∑–≥–æ—Ä–Ω—É—Ç–æ
            if not self.is_expanded:
                self.expand_group()

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –≥—Ä—É–ø–∏: {e}")

    def destroy(self):
        """–ë–µ–∑–ø–µ—á–Ω–µ –∑–Ω–∏—â–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç–∞"""
        try:
            self.is_destroyed = True

            if hasattr(self, 'main_frame') and self.main_frame.winfo_exists():
                self.main_frame.destroy()

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–Ω–∏—â–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç–∞ –≥—Ä—É–ø–∏: {e}")


# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
if __name__ == "__main__":
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è EnhancedGroupWidget"""

    import json

    # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –≥—Ä—É–ø–∏
    test_group_data = {
        'id': 1,
        'group_index': 0,
        'group_start_time': 78.5,
        'group_end_time': 125.2,
        'group_duration': 46.7,
        'segments_count': 3,
        'combined_text': "You're finally awake! You were trying to cross the border, right? Walked right into that Imperial ambush, same as us, and that thief over there.",
        'word_count': 28,
        'difficulty_level': 'intermediate',
        'content_analysis': {
            'question_count': 1,
            'exclamation_count': 1,
            'long_sentences': 1
        },
        'frames': [
            {
                'timestamp': 80.0,
                'frame_path': 'processed/frames/test_frame_1.jpg',
                'thumbnail_b64': '/9j/4AAQSkZJRgABAQAAAQABAAD...',  # –¢–µ—Å—Ç–æ–≤–∏–π base64
                'frame_analysis': {'brightness': 120.5, 'complexity_score': 75.2}
            },
            {
                'timestamp': 100.0,
                'frame_path': 'processed/frames/test_frame_2.jpg',
                'thumbnail_b64': '/9j/4AAQSkZJRgABAQAAAQABAAD...',  # –¢–µ—Å—Ç–æ–≤–∏–π base64
                'frame_analysis': {'brightness': 98.3, 'complexity_score': 82.1}
            }
        ]
    }


    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
    class DummyAIManager:
        def is_available(self):
            return True

        def analyze_sentence_comprehensive(self, text, context=None):
            return {
                'success': True,
                'analysis': {
                    'translation': '–¢–∏ –Ω–∞—Ä–µ—à—Ç—ñ –ø—Ä–æ–∫–∏–Ω—É–≤—Å—è! –¢–∏ –Ω–∞–º–∞–≥–∞–≤—Å—è –ø–µ—Ä–µ—Ç–Ω—É—Ç–∏ –∫–æ—Ä–¥–æ–Ω, –ø—Ä–∞–≤–¥–∞?',
                    'grammar': 'Present Perfect (You\'re = You are), Past Continuous (were trying)',
                    'vocabulary': 'awake - –ø—Ä–æ–∫–∏–Ω—É—Ç–∏—Å—è, border - –∫–æ—Ä–¥–æ–Ω, ambush - –∑–∞—Å—ñ–¥–∫–∞',
                    'phonetics': '–°–∫–ª–∞–¥–Ω—ñ –∑–≤—É–∫–∏: /Œ∏/ –≤ "thief", /r/ –≤ "right"',
                    'memorization_tips': '–ó–∞–ø–∞–º\'—è—Ç–∞–π—Ç–µ: "finally" –ø—ñ–¥—Å–∏–ª—é—î –∑–Ω–∞—á–µ–Ω–Ω—è "–Ω–∞—Ä–µ—à—Ç—ñ"'
                },
                'difficulty_level': 'Intermediate',
                'analysis_type': 'comprehensive'
            }

        def explain_in_context(self, text, context):
            return {
                'success': True,
                'explanation': '–¶–µ –ø–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–ª–æ–≥—É, –¥–µ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∑–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –¥–æ –≥—Ä–∞–≤—Ü—è –ø—ñ—Å–ª—è –ø—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è. –†–∏—Ç–æ—Ä–∏—á–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä—é—î –≤—ñ–¥—á—É—Ç—Ç—è –∑–Ω–∞–π–æ–º–æ—Å—Ç—ñ.',
                'analysis_type': 'contextual'
            }

        def analyze_vocabulary(self, text):
            return {
                'success': True,
                'vocabulary_analysis': '–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –≤–∫–ª—é—á–∞—é—Ç—å —Ñ—Ä–∞–∑–æ–≤—ñ –¥—ñ—î—Å–ª–æ–≤–∞ —Ç–∞ —Ä–æ–∑–º–æ–≤–Ω—ñ –≤–∏—Ä–∞–∑–∏ —Ç–∏–ø–æ–≤—ñ –¥–ª—è –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É.',
                'key_words': [
                    {'word': 'finally', 'complexity': 'medium'},
                    {'word': 'awake', 'complexity': 'low'},
                    {'word': 'border', 'complexity': 'medium'},
                    {'word': 'ambush', 'complexity': 'high'}
                ],
                'analysis_type': 'vocabulary'
            }

        def get_pronunciation_guide(self, text):
            return {
                'success': True,
                'pronunciation_guide': '–û—Å–æ–±–ª–∏–≤–∞ —É–≤–∞–≥–∞ –∑–≤—É–∫–∞–º /Œ∏/ –≤ "thief" —Ç–∞ —ñ–Ω—Ç–æ–Ω–∞—Ü—ñ—ó –ø–∏—Ç–∞–ª—å–Ω–∏—Ö —Ä–µ—á–µ–Ω—å.',
                'phonetic_info': {
                    'difficult_sounds': ['th', 'r'],
                    'estimated_duration': 4.2
                },
                'analysis_type': 'pronunciation'
            }


    class DummyDataManager:
        def save_user_note(self, **kwargs):
            pass


    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –≤—ñ–∫–Ω–æ
    root = tk.Tk()
    root.title("–¢–µ—Å—Ç Enhanced Group Widget")
    root.geometry("1200x800")

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é
    main_frame = ttk.Frame(root, padding="10")
    main_frame.pack(fill=tk.BOTH, expand=True)

    canvas = tk.Canvas(main_frame)
    scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
    scrollable_frame = ttk.Frame(canvas)

    scrollable_frame.bind(
        "<Configure>",
        lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
    )

    canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
    canvas.configure(yscrollcommand=scrollbar.set)

    canvas.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")

    # –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
    instructions = tk.Label(
        scrollable_frame,
        text="üéØ –¢–ï–°–¢ ENHANCED GROUP WIDGET:\n\n"
             "‚úÖ –†–æ–∑—É–º–Ω–µ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ –ø–∞—É–∑–∞—Ö\n"
             "‚úÖ –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞–¥—Ä—ñ–≤ –∑ –≤—ñ–¥–µ–æ\n"
             "‚úÖ –ü–æ–∫—Ä–∞—â–µ–Ω—ñ AI –ø–æ—è—Å–Ω–µ–Ω–Ω—è (4 —Ç–∏–ø–∏)\n"
             "‚úÖ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ' –¥–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è\n"
             "‚úÖ –¢–µ—Å—Ç—É–π—Ç–µ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ AI –∞–Ω–∞–ª—ñ–∑—É\n"
             "‚úÖ –§—É–Ω–∫—Ü—ñ—ó –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è",
        font=("Arial", 11),
        justify=tk.LEFT,
        bg="#e8f5e8",
        padx=15,
        pady=15,
        relief=tk.RAISED,
        borderwidth=2
    )
    instructions.pack(fill=tk.X, pady=(0, 15))

    # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–∂–µ—Ç –≥—Ä—É–ø–∏
    try:
        group_widget = EnhancedGroupWidget(
            parent_frame=scrollable_frame,
            group_data=test_group_data,
            video_filename="skyrim_intro.mkv",
            group_index=0,
            ai_manager=DummyAIManager(),
            data_manager=DummyDataManager(),
            on_group_click=lambda data, filename: print(f"–í–∏–±—Ä–∞–Ω–æ –≥—Ä—É–ø—É: {data['combined_text'][:50]}...")
        )

        print("‚úÖ Enhanced Group Widget —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ!")
        print("üéØ –¢–µ—Å—Ç—É–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª: —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è, AI –∞–Ω–∞–ª—ñ–∑, –ø–µ—Ä–µ–≥–ª—è–¥ –∫–∞–¥—Ä—ñ–≤")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç–∞ –≥—Ä—É–ø–∏: {e}")
        import traceback

        traceback.print_exc()


    # –ü—Ä–∏–≤'—è–∑—É—î–º–æ –ø—Ä–æ–∫—Ä—É—Ç–∫—É
    def _on_mousewheel(event):
        canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")


    canvas.bind_all("<MouseWheel>", _on_mousewheel)

    print("üöÄ –ó–∞–ø—É—Å–∫ GUI...")
    root.mainloop()