"""
Notes Panel - –ø—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–æ—Ç–∞—Ç–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
–ü—ñ–¥—Ç—Ä–∏–º—É—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –∑–∞–º—ñ—Ç–∫–∏, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó —Ç–∞ —Ç–µ–≥–∏
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from tkinter.scrolledtext import ScrolledText
import io
import logging
from typing import Optional, Dict, Callable
from PIL import Image, ImageTk
import os

class NotesPanel:
    """–ü–∞–Ω–µ–ª—å –Ω–æ—Ç–∞—Ç–æ–∫ —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å"""
    
    def __init__(self, parent_frame: ttk.Frame, data_manager, on_note_changed: Optional[Callable] = None):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–∞–Ω–µ–ª—ñ –Ω–æ—Ç–∞—Ç–æ–∫
        
        Args:
            parent_frame: –ë–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π —Ñ—Ä–µ–π–º
            data_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–∏—Ö
            on_note_changed: Callback –ø—Ä–∏ –∑–º—ñ–Ω—ñ –Ω–æ—Ç–∞—Ç–∫–∏
        """
        self.parent = parent_frame
        self.data_manager = data_manager
        self.on_note_changed = on_note_changed
        
        self.logger = logging.getLogger(__name__)
        
        # –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ
        self.current_sentence = None
        self.current_video = None
        self.current_image = None
        self.current_image_path = None
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()
        
        # –ü—Ä–∏–≤'—è–∑—É—î–º–æ –ø–æ–¥—ñ—ó –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        self.setup_autosave()
    
    def create_widgets(self):
        """–°—Ç–≤–æ—Ä—é—î –≤—ñ–¥–∂–µ—Ç–∏ –ø–∞–Ω–µ–ª—ñ –Ω–æ—Ç–∞—Ç–æ–∫"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª—ñ
        header_frame = ttk.Frame(self.parent)
        header_frame.pack(fill=tk.X, padx=5, pady=(5, 0))
        
        title_label = ttk.Label(header_frame, text="üìù –ù–æ—Ç–∞—Ç–∫–∏", font=("Arial", 12, "bold"))
        title_label.pack(side=tk.LEFT)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è
        clear_btn = ttk.Button(header_frame, text="üóëÔ∏è", width=3, command=self.clear_notes)
        clear_btn.pack(side=tk.RIGHT)
        
        # –û–±–ª–∞—Å—Ç—å –∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é –¥–ª—è –≤—Å—å–æ–≥–æ –≤–º—ñ—Å—Ç—É
        self.create_scrollable_area()
        
        # –¢–µ–∫—Å—Ç–æ–≤–∞ –Ω–æ—Ç–∞—Ç–∫–∞
        self.create_text_note_section()
        
        # –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self.create_image_section()
        
        # –¢–µ–≥–∏
        self.create_tags_section()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.create_stats_section()
    
    def create_scrollable_area(self):
        """–°—Ç–≤–æ—Ä—é—î –æ–±–ª–∞—Å—Ç—å –∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é"""
        # Canvas –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.canvas = tk.Canvas(self.parent, bg="white", highlightthickness=0)
        self.scrollbar = ttk.Scrollbar(self.parent, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = ttk.Frame(self.canvas)
        
        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )
        
        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=self.scrollbar.set)
        
        # –ü—Ä–∏–≤'—è–∑—É—î–º–æ –∫–æ–ª–µ—Å–æ –º–∏—à—ñ
        self.canvas.bind_all("<MouseWheel>", self._on_mousewheel)
        
        self.canvas.pack(side="left", fill="both", expand=True, padx=(5, 0), pady=5)
        self.scrollbar.pack(side="right", fill="y", pady=5)
    
    def _on_mousewheel(self, event):
        """–û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –º–∏—à–∫–æ—é"""
        if self.canvas.winfo_exists():
            self.canvas.yview_scroll(int(-1*(event.delta/120)), "units")
    
    def create_text_note_section(self):
        """–°—Ç–≤–æ—Ä—é—î —Å–µ–∫—Ü—ñ—é —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –Ω–æ—Ç–∞—Ç–æ–∫"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        text_frame = ttk.LabelFrame(self.scrollable_frame, text="–¢–µ–∫—Å—Ç–æ–≤–∞ –Ω–æ—Ç–∞—Ç–∫–∞")
        text_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é
        self.notes_text = ScrolledText(
            text_frame, 
            height=8, 
            wrap=tk.WORD,
            font=("Arial", 10),
            bg="#fffef7",  # –õ–µ–≥–∫–æ –∂–æ–≤—Ç—É–≤–∞—Ç–∏–π —Ñ–æ–Ω
            relief=tk.FLAT,
            borderwidth=1
        )
        self.notes_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
        self.notes_placeholder = "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ –Ω–æ—Ç–∞—Ç–∫–∏ —Ç—É—Ç...\n\nüí° –ü–æ—Ä–∞–¥–∏:\n‚Ä¢ –ó–∞–ø–∏—Å—É–π—Ç–µ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª—ñ —Å–ª–æ–≤–∞\n‚Ä¢ –ü–æ–º—ñ—á–∞–π—Ç–µ –≥—Ä–∞–º–∞—Ç–∏—á–Ω—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ\n‚Ä¢ –î–æ–¥–∞–≤–∞–π—Ç–µ –≤–ª–∞—Å–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏"
        self.show_placeholder()
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç—É
        text_buttons_frame = ttk.Frame(text_frame)
        text_buttons_frame.pack(fill=tk.X, padx=5, pady=(0, 5))
        
        ttk.Button(text_buttons_frame, text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏", command=self.save_notes).pack(side=tk.LEFT, padx=2)
        ttk.Button(text_buttons_frame, text="üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏", command=self.copy_notes).pack(side=tk.LEFT, padx=2)
        ttk.Button(text_buttons_frame, text="üî§ –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏", command=self.format_notes).pack(side=tk.LEFT, padx=2)
    
    def create_image_section(self):
        """–°—Ç–≤–æ—Ä—é—î —Å–µ–∫—Ü—ñ—é –∑–æ–±—Ä–∞–∂–µ–Ω—å"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        image_frame = ttk.LabelFrame(self.scrollable_frame, text="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
        image_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
        image_buttons_frame = ttk.Frame(image_frame)
        image_buttons_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Button(image_buttons_frame, text="üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏", command=self.load_image).pack(side=tk.LEFT, padx=2)
        ttk.Button(image_buttons_frame, text="üì∑ –°–∫—Ä—ñ–Ω—à–æ—Ç", command=self.take_screenshot).pack(side=tk.LEFT, padx=2)
        ttk.Button(image_buttons_frame, text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", command=self.remove_image).pack(side=tk.RIGHT, padx=2)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self.image_container = ttk.Frame(image_frame)
        self.image_container.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –õ–µ–π–±–ª –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self.image_label = ttk.Label(self.image_container, text="üì∑ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
        self.image_label.pack(expand=True)
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self.image_info_label = ttk.Label(image_frame, text="", font=("Arial", 8))
        self.image_info_label.pack(padx=5, pady=(0, 5))
    
    def create_tags_section(self):
        """–°—Ç–≤–æ—Ä—é—î —Å–µ–∫—Ü—ñ—é —Ç–µ–≥—ñ–≤"""
        tags_frame = ttk.LabelFrame(self.scrollable_frame, text="–¢–µ–≥–∏")
        tags_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–≥—ñ–≤
        tags_input_frame = ttk.Frame(tags_frame)
        tags_input_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Label(tags_input_frame, text="–¢–µ–≥–∏:").pack(side=tk.LEFT)
        
        self.tags_var = tk.StringVar()
        self.tags_entry = ttk.Entry(tags_input_frame, textvariable=self.tags_var, font=("Arial", 9))
        self.tags_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(5, 2))
        
        ttk.Button(tags_input_frame, text="‚ûï", width=3, command=self.add_tag).pack(side=tk.RIGHT)
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ñ —Ç–µ–≥–∏
        popular_tags_frame = ttk.Frame(tags_frame)
        popular_tags_frame.pack(fill=tk.X, padx=5, pady=(0, 5))
        
        ttk.Label(popular_tags_frame, text="–®–≤–∏–¥–∫—ñ —Ç–µ–≥–∏:", font=("Arial", 8)).pack(anchor=tk.W)
        
        self.quick_tags_frame = ttk.Frame(popular_tags_frame)
        self.quick_tags_frame.pack(fill=tk.X, pady=2)
        
        # –î–æ–¥–∞—î–º–æ –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Ç–µ–≥–∏
        popular_tags = ["#–≤–∞–∂–ª–∏–≤–æ", "#–≥—Ä–∞–º–∞—Ç–∏–∫–∞", "#–Ω–æ–≤–µ_—Å–ª–æ–≤–æ", "#—ñ–¥—ñ–æ–º–∞", "#–ø–æ–º–∏–ª–∫–∞", "#–ø–æ–≤—Ç–æ—Ä–∏—Ç–∏"]
        for tag in popular_tags:
            btn = ttk.Button(
                self.quick_tags_frame, 
                text=tag, 
                command=lambda t=tag: self.add_quick_tag(t)
            )
            btn.pack(side=tk.LEFT, padx=1, pady=1)
    
    def create_stats_section(self):
        """–°—Ç–≤–æ—Ä—é—î —Å–µ–∫—Ü—ñ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats_frame = ttk.LabelFrame(self.scrollable_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.stats_label = ttk.Label(
            stats_frame, 
            text="–ù–æ—Ç–∞—Ç–æ–∫: 0 | –ó–æ–±—Ä–∞–∂–µ–Ω—å: 0 | –¢–µ–≥—ñ–≤: 0",
            font=("Arial", 8)
        )
        self.stats_label.pack(padx=5, pady=5)
    
    def setup_autosave(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è"""
        # –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ç–µ–∫—Å—Ç—É
        self.notes_text.bind('<KeyRelease>', self.on_text_changed)
        self.notes_text.bind('<FocusOut>', self.save_notes)
        
        # –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–µ–≥—ñ–≤
        self.tags_entry.bind('<Return>', self.save_notes)
        self.tags_entry.bind('<FocusOut>', self.save_notes)
        
        # –û–±—Ä–æ–±–∫–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
        self.notes_text.bind('<FocusIn>', self.on_text_focus_in)
        self.notes_text.bind('<FocusOut>', self.on_text_focus_out)
    
    def show_placeholder(self):
        """–ü–æ–∫–∞–∑—É—î –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä"""
        self.notes_text.delete(1.0, tk.END)
        self.notes_text.insert(1.0, self.notes_placeholder)
        self.notes_text.config(fg="gray")
    
    def hide_placeholder(self):
        """–ü—Ä–∏—Ö–æ–≤—É—î –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä"""
        if self.notes_text.get(1.0, tk.END).strip() == self.notes_placeholder.strip():
            self.notes_text.delete(1.0, tk.END)
        self.notes_text.config(fg="black")
    
    def on_text_focus_in(self, event):
        """–û–±—Ä–æ–±–∫–∞ —Ñ–æ–∫—É—Å—É –Ω–∞ —Ç–µ–∫—Å—Ç—ñ"""
        self.hide_placeholder()
    
    def on_text_focus_out(self, event):
        """–û–±—Ä–æ–±–∫–∞ –≤—Ç—Ä–∞—Ç–∏ —Ñ–æ–∫—É—Å—É"""
        if not self.notes_text.get(1.0, tk.END).strip():
            self.show_placeholder()
    
    def on_text_changed(self, event):
        """–û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Ç–µ–∫—Å—Ç—É"""
        # –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏ –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∑–º—ñ–Ω–∏
        if hasattr(self, '_save_after_id'):
            self.notes_text.after_cancel(self._save_after_id)
        
        self._save_after_id = self.notes_text.after(2000, self.save_notes)
    
    def set_sentence_context(self, sentence_data: Dict, video_filename: str):
        """
        –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ—á–µ–Ω–Ω—è –¥–ª—è –Ω–æ—Ç–∞—Ç–æ–∫
        
        Args:
            sentence_data: –î–∞–Ω—ñ –ø—Ä–æ —Ä–µ—á–µ–Ω–Ω—è
            video_filename: –ù–∞–∑–≤–∞ –≤—ñ–¥–µ–æ —Ñ–∞–π–ª—É
        """
        self.current_sentence = sentence_data
        self.current_video = video_filename
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –Ω–æ—Ç–∞—Ç–∫–∏
        self.load_existing_notes()
    
    def load_existing_notes(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —ñ—Å–Ω—É—é—á—ñ –Ω–æ—Ç–∞—Ç–∫–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è"""
        if not self.current_sentence or not self.current_video:
            return
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ—Ç–∞—Ç–∫–∏ –∑ –ë–î
            note_data = self.data_manager.get_user_note(
                sentence_text=self.current_sentence['text'],
                video_filename=self.current_video,
                start_time=self.current_sentence['start_time']
            )
            
            if note_data:
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–µ–∫—Å—Ç
                if note_data['note_text']:
                    self.notes_text.delete(1.0, tk.END)
                    self.notes_text.insert(1.0, note_data['note_text'])
                    self.notes_text.config(fg="black")
                else:
                    self.show_placeholder()
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                if note_data['image_data']:
                    self.load_image_from_data(note_data['image_data'])
                    
                    # –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    if note_data['image_width'] and note_data['image_height']:
                        info_text = f"üìè {note_data['image_width']}√ó{note_data['image_height']}"
                        if note_data['image_filename']:
                            info_text += f" | {note_data['image_filename']}"
                        self.image_info_label.config(text=info_text)
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–µ–≥–∏
                if note_data['tags']:
                    self.tags_var.set(note_data['tags'])
            else:
                # –û—á–∏—â—É—î–º–æ –ø–æ–ª—è —è–∫—â–æ –Ω–µ–º–∞—î –Ω–æ—Ç–∞—Ç–æ–∫
                self.clear_notes()
                
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫: {e}")
    
    def save_notes(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω—ñ –Ω–æ—Ç–∞—Ç–∫–∏"""
        if not self.current_sentence or not self.current_video:
            return
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏
            note_text = self.notes_text.get(1.0, tk.END).strip()
            if note_text == self.notes_placeholder.strip():
                note_text = ""
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–≥–∏
            tags = self.tags_var.get().strip()
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            image_data = None
            image_filename = None
            
            if self.current_image:
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ PIL Image –≤ bytes
                img_byte_arr = io.BytesIO()
                self.current_image.save(img_byte_arr, format='PNG')
                image_data = img_byte_arr.getvalue()
                image_filename = self.current_image_path or "uploaded_image.png"
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
            self.data_manager.save_user_note(
                sentence_text=self.current_sentence['text'],
                video_filename=self.current_video,
                start_time=self.current_sentence['start_time'],
                note_text=note_text,
                image_data=image_data,
                image_filename=image_filename,
                tags=tags
            )
            
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ callback
            if self.on_note_changed:
                self.on_note_changed()
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.update_stats()
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫: {e}")
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ—Ç–∞—Ç–∫–∏: {e}")
    
    def load_image(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É"""
        try:
            file_path = filedialog.askopenfilename(
                title="–í–∏–±–µ—Ä—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
                filetypes=[
                    ("–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è", "*.png *.jpg *.jpeg *.gif *.bmp"),
                    ("PNG —Ñ–∞–π–ª–∏", "*.png"),
                    ("JPEG —Ñ–∞–π–ª–∏", "*.jpg *.jpeg"),
                    ("–í—Å—ñ —Ñ–∞–π–ª–∏", "*.*")
                ]
            )
            
            if file_path:
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                image = Image.open(file_path)
                
                # –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                display_image = self.resize_image_for_display(image)
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª –¥–ª—è –ë–î
                self.current_image = image
                self.current_image_path = os.path.basename(file_path)
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                self.display_image(display_image)
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
                self.save_notes()
                
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
    
    def load_image_from_data(self, image_data: bytes):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –±–∞–π—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö"""
        try:
            image = Image.open(io.BytesIO(image_data))
            display_image = self.resize_image_for_display(image)
            
            self.current_image = image
            self.display_image(display_image)
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –¥–∞–Ω–∏—Ö: {e}")
    
    def resize_image_for_display(self, image: Image.Image, max_width: int = 250, max_height: int = 200) -> Image.Image:
        """–ó–º—ñ–Ω—é—î —Ä–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        # –û–±—á–∏—Å–ª—é—î–º–æ –Ω–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó
        ratio = min(max_width / image.width, max_height / image.height)
        
        if ratio < 1:
            new_width = int(image.width * ratio)
            new_height = int(image.height * ratio)
            return image.resize((new_width, new_height), Image.Resampling.LANCZOS)
        
        return image
    
    def display_image(self, image: Image.Image):
        """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ PhotoImage
            photo = ImageTk.PhotoImage(image)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –ª–µ–π–±–ª
            self.image_label.config(image=photo, text="")
            self.image_label.image = photo  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            
            # –î–æ–¥–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –ø–æ –∫–ª—ñ–∫—É
            self.image_label.bind('<Double-Button-1>', self.zoom_image)
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
    
    def zoom_image(self, event):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –ø–æ–≤–Ω–æ–º—É —Ä–æ–∑–º—ñ—Ä—ñ"""
        if self.current_image:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –≤—ñ–∫–Ω–æ –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            zoom_window = tk.Toplevel(self.parent)
            zoom_window.title("–ó–±—ñ–ª—å—à–µ–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
            zoom_window.geometry("800x600")
            
            # –ó–º—ñ–Ω—é—î–º–æ —Ä–æ–∑–º—ñ—Ä –¥–ª—è –≤–µ–ª–∏–∫–æ–≥–æ –≤—ñ–∫–Ω–∞
            display_image = self.resize_image_for_display(self.current_image, 750, 550)
            photo = ImageTk.PhotoImage(display_image)
            
            label = ttk.Label(zoom_window, image=photo)
            label.image = photo
            label.pack(expand=True)
    
    def take_screenshot(self):
        """–†–æ–±–∏—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –µ–∫—Ä–∞–Ω—É"""
        try:
            import tkinter.simpledialog as simpledialog
            
            # –ü—Ä–æ—Å–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–±—Ä–∞—Ç–∏ –æ–±–ª–∞—Å—Ç—å (–∑–∞–≥–ª—É—à–∫–∞)
            response = messagebox.askyesno(
                "–°–∫—Ä—ñ–Ω—à–æ—Ç", 
                "–§—É–Ω–∫—Ü—ñ—è —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö.\n–ü–æ–∫–∏ —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏' –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å."
            )
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞: {e}")
    
    def remove_image(self):
        """–í–∏–¥–∞–ª—è—î –ø–æ—Ç–æ—á–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if self.current_image:
            if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–í–∏–¥–∞–ª–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è?"):
                self.current_image = None
                self.current_image_path = None
                
                # –û—á–∏—â—É—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                self.image_label.config(image="", text="üì∑ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
                self.image_label.image = None
                self.image_info_label.config(text="")
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
                self.save_notes()
    
    def add_tag(self):
        """–î–æ–¥–∞—î –Ω–æ–≤–∏–π —Ç–µ–≥"""
        current_tags = self.tags_var.get().strip()
        new_tag = "#–Ω–æ–≤–∏–π_—Ç–µ–≥"
        
        if current_tags:
            if new_tag not in current_tags:
                self.tags_var.set(f"{current_tags}, {new_tag}")
        else:
            self.tags_var.set(new_tag)
        
        # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ —Ç–µ–≥—ñ–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        self.tags_entry.focus_set()
        self.tags_entry.selection_range(len(current_tags) + 2, tk.END)
    
    def add_quick_tag(self, tag: str):
        """–î–æ–¥–∞—î —à–≤–∏–¥–∫–∏–π —Ç–µ–≥"""
        current_tags = self.tags_var.get().strip()
        
        if current_tags:
            if tag not in current_tags:
                self.tags_var.set(f"{current_tags}, {tag}")
        else:
            self.tags_var.set(tag)
        
        # –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        self.save_notes()
    
    def copy_notes(self):
        """–ö–æ–ø—ñ—é—î –Ω–æ—Ç–∞—Ç–∫–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É"""
        try:
            note_text = self.notes_text.get(1.0, tk.END).strip()
            if note_text and note_text != self.notes_placeholder.strip():
                self.parent.clipboard_clear()
                self.parent.clipboard_append(note_text)
                messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ù–æ—Ç–∞—Ç–∫–∏ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω—ñ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É")
            else:
                messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ù–µ–º–∞—î —Ç–µ–∫—Å—Ç—É –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è")
                
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: {e}")
    
    def format_notes(self):
        """–§–æ—Ä–º–∞—Ç—É—î –Ω–æ—Ç–∞—Ç–∫–∏"""
        try:
            note_text = self.notes_text.get(1.0, tk.END).strip()
            if note_text and note_text != self.notes_placeholder.strip():
                # –ü—Ä–æ—Å—Ç–∏–π –∞–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç
                formatted_text = note_text.replace(". ", ".\n‚Ä¢ ")
                formatted_text = "‚Ä¢ " + formatted_text if not formatted_text.startswith("‚Ä¢") else formatted_text
                
                self.notes_text.delete(1.0, tk.END)
                self.notes_text.insert(1.0, formatted_text)
                
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è: {e}")
    
    def clear_notes(self):
        """–û—á–∏—â—É—î –≤—Å—ñ –Ω–æ—Ç–∞—Ç–∫–∏"""
        self.show_placeholder()
        self.current_image = None
        self.current_image_path = None
        self.tags_var.set("")
        
        # –û—á–∏—â—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self.image_label.config(image="", text="üì∑ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
        self.image_label.image = None
        self.image_info_label.config(text="")
    
    def update_stats(self):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ –ë–î
            stats_text = "–ù–æ—Ç–∞—Ç–æ–∫: ? | –ó–æ–±—Ä–∞–∂–µ–Ω—å: ? | –¢–µ–≥—ñ–≤: ?"
            self.stats_label.config(text=stats_text)
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def insert_text_to_notes(self, text_content: str, source_info: Dict):
        """
        –í—Å—Ç–∞–≤–ª—è—î —Ç–µ–∫—Å—Ç –≤ –Ω–æ—Ç–∞—Ç–∫–∏ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –¥–∂–µ—Ä–µ–ª–æ
        
        Args:
            text_content: –¢–µ–∫—Å—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            source_info: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–∂–µ—Ä–µ–ª–æ (—Ç–∏–ø, —Ä–µ—á–µ–Ω–Ω—è, –≤—ñ–¥–µ–æ —ñ —Ç.–¥.)
        """
        try:
            # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —è–∫—â–æ –≤—ñ–Ω –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è
            current_text = self.notes_text.get(1.0, tk.END).strip()
            if current_text == self.notes_placeholder.strip():
                self.notes_text.delete(1.0, tk.END)
                self.notes_text.config(fg="black")
            
            # –í—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –≤ –∫—ñ–Ω–µ—Ü—å
            self.notes_text.insert(tk.END, text_content)
            
            # –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –¥–æ–Ω–∏–∑—É —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω–∏–π —Ç–µ–∫—Å—Ç
            self.notes_text.see(tk.END)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
            self.save_notes()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Å—Ç–∞–≤–∫—É –≤ –ë–î
            self.save_note_insert(source_info, text_content)
            
            self.logger.info(f"–¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –Ω–æ—Ç–∞—Ç–∫–∏ –∑ –¥–∂–µ—Ä–µ–ª–∞: {source_info['source_type']}")
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç—É –≤ –Ω–æ—Ç–∞—Ç–∫–∏: {e}")

    def save_note_insert(self, source_info: Dict, text_content: str):
        """–ó–±–µ—Ä—ñ–≥–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Å—Ç–∞–≤–∫—É —Ç–µ–∫—Å—Ç—É –≤ –ë–î"""
        try:
            if not self.current_sentence or not self.current_video:
                return
            
            db_path = Path("processed/database/game_learning.db")
            
            with sqlite3.connect(db_path) as conn:
                cursor = conn.cursor()
                
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ—Ç–∞—Ç–∫—É
                cursor.execute("""
                    SELECT id FROM notes 
                    WHERE video_filename = ? AND sentence_text = ? AND sentence_start_time = ?
                """, (
                    self.current_video,
                    self.current_sentence['text'],
                    self.current_sentence['start_time']
                ))
                
                result = cursor.fetchone()
                
                if result:
                    note_id = result[0]
                else:
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –Ω–æ—Ç–∞—Ç–∫—É
                    cursor.execute("""
                        INSERT INTO notes (video_filename, sentence_text, sentence_start_time, content, note_type)
                        VALUES (?, ?, ?, ?, 'sentence')
                    """, (
                        self.current_video,
                        self.current_sentence['text'], 
                        self.current_sentence['start_time'],
                        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –Ω–æ—Ç–∞—Ç–∫–∞"
                    ))
                    note_id = cursor.lastrowid
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Å—Ç–∞–≤–∫—É
                cursor.execute("""
                    INSERT INTO note_inserts 
                    (note_id, source_type, source_text, video_filename, sentence_index)
                    VALUES (?, ?, ?, ?, ?)
                """, (
                    note_id,
                    source_info['source_type'],
                    text_content[:500],  # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É
                    source_info.get('video_filename', self.current_video),
                    source_info.get('sentence_index', 0)
                ))
                
                conn.commit()
                
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—Å—Ç–∞–≤–∫–∏: {e}")

    def get_insert_statistics(self) -> Dict:
        """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å—Ç–∞–≤–æ–∫ —Ç–µ–∫—Å—Ç—É"""
        try:
            db_path = Path("processed/database/game_learning.db")
            
            with sqlite3.connect(db_path) as conn:
                cursor = conn.cursor()
                
                # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—Å—Ç–∞–≤–æ–∫
                cursor.execute("SELECT COUNT(*) FROM note_inserts")
                total_inserts = cursor.fetchone()[0]
                
                # –í—Å—Ç–∞–≤–∫–∏ –ø–æ —Ç–∏–ø–∞—Ö
                cursor.execute("""
                    SELECT source_type, COUNT(*) 
                    FROM note_inserts 
                    GROUP BY source_type
                """)
                inserts_by_type = dict(cursor.fetchall())
                
                # –û—Å—Ç–∞–Ω–Ω—ñ –≤—Å—Ç–∞–≤–∫–∏
                cursor.execute("""
                    SELECT source_type, inserted_at 
                    FROM note_inserts 
                    ORDER BY inserted_at DESC 
                    LIMIT 5
                """)
                recent_inserts = cursor.fetchall()
                
                return {
                    'total_inserts': total_inserts,
                    'inserts_by_type': inserts_by_type,
                    'recent_inserts': recent_inserts
                }
                
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'total_inserts': 0, 'inserts_by_type': {}, 'recent_inserts': []}

# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è NotesPanel
    root = tk.Tk()
    root.title("–¢–µ—Å—Ç Notes Panel")
    root.geometry("400x800")
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è data_manager
    class MockDataManager:
        def get_user_note(self, *args, **kwargs):
            return None
        
        def save_user_note(self, *args, **kwargs):
            print("–ó–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–æ—Ç–∞—Ç–∫—É:", args, kwargs)
    
    data_manager = MockDataManager()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–Ω–µ–ª—å
    frame = ttk.Frame(root)
    frame.pack(fill=tk.BOTH, expand=True)
    
    notes_panel = NotesPanel(frame, data_manager)
    
    # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    test_sentence = {
        'text': "Hello world, this is a test sentence",
        'start_time': 10.5,
        'end_time': 15.0
    }
    
    notes_panel.set_sentence_context(test_sentence, "test_video.mkv")
    
    root.mainloop()