"""
Main Window - –æ–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –Ω–æ–≤–∏–º SentenceWidget
–ü—ñ–¥—Ç—Ä–∏–º—É—î —Ç—ñ–ª—å–∫–∏ –≥—Ä–∞–º–∞—Ç–∏—á–Ω—ñ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑—à–∏—Ä—é–≤–∞–Ω–∏–º –ø–æ–ª–µ–º
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
import logging
import json
from pathlib import Path
from typing import Dict, List, Optional

# –Ü–º–ø–æ—Ä—Ç–∏ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
from ai.ai_manager import AIManager
from data.data_manager import DataManager
from data.video_processor import VideoProcessor
from gui.sentence_widget import SentenceWidget
from gui.notes_panel import NotesPanel

# –§–£–ù–ö–¶–Ü–á –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø –ß–ê–°–£ (–ù–ê –ü–û–ß–ê–¢–ö–£, –ó–û–í–ù–Ü –ö–õ–ê–°–£)
def format_time(seconds: float, short: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î —á–∞—Å –∑ —Å–µ–∫—É–Ω–¥ —É –∑—Ä—É—á–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç"""
    if seconds < 0:
        return "0 —Å–µ–∫" if not short else "0—Å"
    
    total_seconds = int(seconds)
    milliseconds = seconds - total_seconds
    
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    remaining_seconds = total_seconds % 60
    
    final_seconds = remaining_seconds + milliseconds
    
    parts = []
    
    if short:
        if hours > 0:
            parts.append(f"{hours}–≥")
        if minutes > 0:
            parts.append(f"{minutes}—Ö")
        if final_seconds > 0 or not parts:
            if final_seconds == int(final_seconds):
                parts.append(f"{int(final_seconds)}—Å")
            else:
                parts.append(f"{final_seconds:.1f}—Å")
    else:
        if hours > 0:
            parts.append(f"{hours} –≥–æ–¥")
        if minutes > 0:
            parts.append(f"{minutes} —Ö–≤")
        if final_seconds > 0 or not parts:
            if final_seconds == int(final_seconds):
                parts.append(f"{int(final_seconds)} —Å–µ–∫")
            else:
                parts.append(f"{final_seconds:.1f} —Å–µ–∫")
    
    return " ".join(parts)

def format_duration(duration_seconds: float, short: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å"""
    return format_time(duration_seconds, short)

def calculate_total_duration(sentences: List[Dict]) -> float:
    """–û–±—á–∏—Å–ª—é—î –∑–∞–≥–∞–ª—å–Ω—É —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤—Å—ñ—Ö —Ä–µ—á–µ–Ω—å"""
    total = 0.0
    for sentence in sentences:
        if 'end_time' in sentence and 'start_time' in sentence:
            duration = sentence['end_time'] - sentence['start_time']
            total += duration
    return total

def get_video_time_stats(sentences: List[Dict]) -> Dict[str, str]:
    """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Å—É –¥–ª—è –≤—ñ–¥–µ–æ"""
    if not sentences:
        return {
            'total_duration': '0 —Å–µ–∫',
            'total_duration_short': '0—Å',
            'avg_sentence_duration': '0—Å',
            'shortest': '0—Å',
            'longest': '0—Å',
            'sentence_count': 0
        }
    
    durations = []
    for sentence in sentences:
        if 'end_time' in sentence and 'start_time' in sentence:
            duration = sentence['end_time'] - sentence['start_time']
            durations.append(duration)
    
    if not durations:
        return {
            'total_duration': '0 —Å–µ–∫',
            'total_duration_short': '0—Å',
            'avg_sentence_duration': '0—Å',
            'shortest': '0—Å',
            'longest': '0—Å',
            'sentence_count': len(sentences)
        }
    
    total_duration = sum(durations)
    avg_duration = total_duration / len(durations)
    
    return {
        'total_duration': format_duration(total_duration),
        'total_duration_short': format_duration(total_duration, short=True),
        'avg_sentence_duration': format_duration(avg_duration, short=True),
        'shortest': format_duration(min(durations), short=True),
        'longest': format_duration(max(durations), short=True),
        'sentence_count': len(sentences)
    }


class MainWindow:
    """–ì–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –Ω–æ–≤–æ–≥–æ —Å–ø—Ä–æ—â–µ–Ω–æ–≥–æ SentenceWidget"""
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞"""
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ
        self.root = tk.Tk()
        self.root.title("Game Learning - –í–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó —á–µ—Ä–µ–∑ —ñ–≥—Ä–æ–≤—ñ –≤—ñ–¥–µ–æ")
        self.root.geometry("1400x900")
        self.root.minsize(1000, 700)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
        self.init_managers()
        
        # –î–∞–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        self.current_video = None
        self.current_sentences = []
        self.sentence_widgets = []
        self.selected_sentence = None
        
        # –°—Ç–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤
        self.is_creating_widgets = False
        self.widgets_creation_cancelled = False
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        self.create_interface()
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        self.load_initial_data()
    
    def init_managers(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏"""
        try:
            # AI Manager
            self.ai_manager = AIManager()
            
            # Data Manager
            self.data_manager = DataManager()
            
            # Video Processor
            self.video_processor = VideoProcessor()
            
            self.logger.info("–í—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤: {e}")
            messagebox.showerror("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞", 
                               f"–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É: {e}")
    
    def create_interface(self):
        """–°—Ç–≤–æ—Ä—é—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–≥—Ä–∞–º–∏"""
        # –ú–µ–Ω—é
        self.create_menu()
        
        # –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å –∑ –≤–∏–±–æ—Ä–æ–º –≤—ñ–¥–µ–æ
        self.create_top_panel()
        
        # –ì–æ–ª–æ–≤–Ω–∞ —Ä–æ–±–æ—á–∞ –æ–±–ª–∞—Å—Ç—å
        self.create_main_area()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.create_status_bar()
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤
        self.setup_styles()
    
    def create_menu(self):
        """–°—Ç–≤–æ—Ä—é—î —Å–ø—Ä–æ—â–µ–Ω–µ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # –ú–µ–Ω—é –§–∞–π–ª
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ...", command=self.add_video_file)
        file_menu.add_command(label="–û–±—Ä–æ–±–∏—Ç–∏ –≤—Å—ñ –≤—ñ–¥–µ–æ", command=self.process_all_videos)
        file_menu.add_separator()
        file_menu.add_command(label="–í–∏—Ö—ñ–¥", command=self.on_closing)
        
        # –ú–µ–Ω—é AI (—Ç—ñ–ª—å–∫–∏ –≥—Ä–∞–º–∞—Ç–∏–∫–∞)
        ai_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="AI", menu=ai_menu)
        ai_menu.add_command(label="–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≥—Ä–∞–º–∞—Ç–∏–∫—É –¥–ª—è –≤—Å—ñ—Ö", command=self.generate_grammar_for_all)
        
        # –ú–µ–Ω—é –î–æ–ø–æ–º–æ–≥–∞
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–î–æ–ø–æ–º–æ–≥–∞", menu=help_menu)
        help_menu.add_command(label="–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É", command=self.simple_about)
    
    def create_top_panel(self):
        """–°—Ç–≤–æ—Ä—é—î –≤–µ—Ä—Ö–Ω—é –ø–∞–Ω–µ–ª—å –∑ –≤–∏–±–æ—Ä–æ–º –≤—ñ–¥–µ–æ"""
        top_frame = ttk.Frame(self.root)
        top_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # –õ–µ–π–±–ª —Ç–∞ –∫–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –≤–∏–±–æ—Ä—É –≤—ñ–¥–µ–æ
        ttk.Label(top_frame, text="üìπ –í—ñ–¥–µ–æ:", font=("Arial", 12)).pack(side=tk.LEFT, padx=(0, 10))
        
        self.video_var = tk.StringVar()
        self.video_combo = ttk.Combobox(
            top_frame, 
            textvariable=self.video_var, 
            state="readonly", 
            width=50,
            font=("Arial", 11)
        )
        self.video_combo.pack(side=tk.LEFT, padx=(0, 10))
        self.video_combo.bind('<<ComboboxSelected>>', self.on_video_selected)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è (—Å–ø—Ä–æ—â–µ–Ω—ñ)
        buttons_frame = ttk.Frame(top_frame)
        buttons_frame.pack(side=tk.RIGHT)
        
        ttk.Button(buttons_frame, text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", 
                  command=self.refresh_videos).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(buttons_frame, text="‚öôÔ∏è –û–±—Ä–æ–±–∏—Ç–∏", 
                  command=self.process_current_video).pack(side=tk.LEFT, padx=2)
        
        # –û–ù–û–í–õ–ï–ù–û: –¢—ñ–ª—å–∫–∏ –≥—Ä–∞–º–∞—Ç–∏–∫–∞
        ttk.Button(buttons_frame, text="üìö –ì—Ä–∞–º–∞—Ç–∏–∫–∞ –¥–ª—è –≤—Å—ñ—Ö", 
                  command=self.generate_grammar_for_current_video).pack(side=tk.LEFT, padx=2)
        
        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        ttk.Button(buttons_frame, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                  command=self.show_video_statistics).pack(side=tk.LEFT, padx=2)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤
        self.cancel_button = ttk.Button(buttons_frame, text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", 
                                      command=self.cancel_widget_creation, state=tk.DISABLED)
        self.cancel_button.pack(side=tk.LEFT, padx=2)
        
        # –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞–Ω—É AI
        self.ai_status_label = ttk.Label(top_frame, text="", font=("Arial", 9))
        self.ai_status_label.pack(side=tk.RIGHT, padx=(10, 0))
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å AI
        self.update_ai_status()
    
    def create_main_area(self):
        """–°—Ç–≤–æ—Ä—é—î –≥–æ–ª–æ–≤–Ω—É —Ä–æ–±–æ—á—É –æ–±–ª–∞—Å—Ç—å"""
        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.root)
        main_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Paned Window –¥–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –ª—ñ–≤—É —Ç–∞ –ø—Ä–∞–≤—É —á–∞—Å—Ç–∏–Ω–∏
        self.paned_window = ttk.PanedWindow(main_container, orient=tk.HORIZONTAL)
        self.paned_window.pack(fill=tk.BOTH, expand=True)
        
        # –õ—ñ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - —Ä–µ—á–µ–Ω–Ω—è (70%)
        self.create_sentences_panel()
        
        # –ü—Ä–∞–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - –Ω–æ—Ç–∞—Ç–∫–∏ (30%)
        self.create_notes_panel()
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó
        self.root.after(100, lambda: self.paned_window.sashpos(0, 980))
    
    def create_sentences_panel(self):
        """–°—Ç–≤–æ—Ä—é—î –ø–∞–Ω–µ–ª—å –∑ —Ä–µ—á–µ–Ω–Ω—è–º–∏"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ—á–µ–Ω—å
        sentences_frame = ttk.Frame(self.paned_window)
        self.paned_window.add(sentences_frame, weight=7)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(sentences_frame)
        header_frame.pack(fill=tk.X, pady=(0, 5))
        
        self.sentences_title = ttk.Label(
            header_frame, 
            text="üìñ –†–µ—á–µ–Ω–Ω—è (–æ–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–µ–æ)", 
            font=("Arial", 14, "bold")
        )
        self.sentences_title.pack(side=tk.LEFT)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—á–µ–Ω—å
        self.sentences_stats = ttk.Label(
            header_frame, 
            text="", 
            font=("Arial", 10)
        )
        self.sentences_stats.pack(side=tk.RIGHT)
        
        # Canvas –∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é –¥–ª—è —Ä–µ—á–µ–Ω—å
        self.create_sentences_scroll_area(sentences_frame)
    
    def create_sentences_scroll_area(self, parent):
        """–°—Ç–≤–æ—Ä—é—î –æ–±–ª–∞—Å—Ç—å –∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é –¥–ª—è —Ä–µ—á–µ–Ω—å"""
        # Canvas —Ç–∞ Scrollbar
        self.sentences_canvas = tk.Canvas(parent, bg="white", highlightthickness=0)
        sentences_scrollbar = ttk.Scrollbar(parent, orient="vertical", 
                                          command=self.sentences_canvas.yview)
        
        self.sentences_scrollable_frame = ttk.Frame(self.sentences_canvas)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.sentences_scrollable_frame.bind(
            "<Configure>",
            lambda e: self.sentences_canvas.configure(
                scrollregion=self.sentences_canvas.bbox("all")
            )
        )
        
        self.sentences_canvas.create_window(
            (0, 0), 
            window=self.sentences_scrollable_frame, 
            anchor="nw"
        )
        self.sentences_canvas.configure(yscrollcommand=sentences_scrollbar.set)
        
        # –ü—Ä–∏–≤'—è–∑–∫–∞ –∫–æ–ª–µ—Å–∞ –º–∏—à—ñ
        self.sentences_canvas.bind_all("<MouseWheel>", self._on_sentences_mousewheel)
        
        # –ü–∞–∫—É–≤–∞–Ω–Ω—è
        self.sentences_canvas.pack(side="left", fill="both", expand=True)
        sentences_scrollbar.pack(side="right", fill="y")
    
    def _on_sentences_mousewheel(self, event):
        """–û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –º–∏—à–∫–æ—é –¥–ª—è —Ä–µ—á–µ–Ω—å"""
        self.sentences_canvas.yview_scroll(int(-1*(event.delta/120)), "units")
    
    def create_notes_panel(self):
        """–°—Ç–≤–æ—Ä—é—î –ø–∞–Ω–µ–ª—å –Ω–æ—Ç–∞—Ç–æ–∫"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–æ—Ç–∞—Ç–æ–∫
        notes_frame = ttk.Frame(self.paned_window)
        self.paned_window.add(notes_frame, weight=3)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ NotesPanel
        self.notes_panel = NotesPanel(
            parent_frame=notes_frame,
            data_manager=self.data_manager,
            on_note_changed=self.on_note_changed
        )
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        self.notes_panel.main_window = self
    
    def display_sentences(self, sentences: List[Dict], filename: str):
        """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä–µ—á–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º —á–∞—Å—É"""
        try:
            self.logger.info(f"=== –ü–û–ß–ê–¢–û–ö –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –†–ï–ß–ï–ù–¨ ===")
            self.logger.info(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—á–µ–Ω—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {len(sentences)}")
            
            # –°–∫–∞—Å–æ–≤—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —è–∫—â–æ –≤–æ–Ω–æ —Ç—Ä–∏–≤–∞—î
            if self.is_creating_widgets:
                self.cancel_widget_creation()
                # –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
                self.root.after(100, lambda: self.display_sentences(sentences, filename))
                return
            
            # –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Ä–µ—á–µ–Ω–Ω—è
            self.clear_sentences()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ
            self.current_video = filename
            self.current_sentences = sentences
            
            # –û–±—á–∏—Å–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Å—É
            time_stats = get_video_time_stats(sentences)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é
            title_text = f"üìñ {filename}"
            if time_stats['total_duration_short'] != '0—Å':
                title_text += f" ‚Ä¢ {time_stats['total_duration_short']}"
            
            self.sentences_title.config(text=title_text)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
            stats_parts = [f"{time_stats['sentence_count']} —Ä–µ—á–µ–Ω—å"]
            
            if time_stats['total_duration'] != '0 —Å–µ–∫':
                stats_parts.append(f"‚è±Ô∏è {time_stats['total_duration']}")
                stats_parts.append(f"üìä —Å–µ—Ä–µ–¥–Ω—î: {time_stats['avg_sentence_duration']}")
                
                # –î–æ–¥–∞—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
                if time_stats['shortest'] != time_stats['longest']:
                    stats_parts.append(f"üìè {time_stats['shortest']} - {time_stats['longest']}")
            
            stats_text = " ‚Ä¢ ".join(stats_parts)
            self.sentences_stats.config(text=stats_text)
            
            self.logger.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ: {filename}, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats_text}")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–∞—Ç—á–µ–≤–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤
            self.create_widgets_in_batches(sentences, filename)
            
        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ—á–µ–Ω—å: {error_msg}")
            import traceback
            self.logger.error(f"–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:\n{traceback.format_exc()}")
            self.status_var.set(f"–ü–æ–º–∏–ª–∫–∞: {error_msg}")
    
    def create_widgets_in_batches(self, sentences: List[Dict], filename: str, batch_size: int = 5):
        """–°—Ç–≤–æ—Ä—é—î –≤—ñ–¥–∂–µ—Ç–∏ –ø–æ—Ä—Ü—ñ—è–º–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ä–µ–∫—É—Ä—Å—ñ—ó"""
        if self.is_creating_widgets:
            self.logger.warning("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ –≤–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ")
            return
        
        self.is_creating_widgets = True
        self.widgets_creation_cancelled = False
        self.cancel_button.config(state=tk.NORMAL)
        
        total = len(sentences)
        current_index = 0
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
        self.show_progress_message(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤: 0/{total}")
        
        def create_next_batch():
            nonlocal current_index
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
            if self.widgets_creation_cancelled:
                self.logger.info("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
                self.finish_widget_creation(cancelled=True)
                return
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            if current_index >= total:
                self.logger.info(f"=== –°–¢–í–û–†–ï–ù–û {len(self.sentence_widgets)} –í–Ü–î–ñ–ï–¢–Ü–í ===")
                self.finish_widget_creation()
                return
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–µ–∂—ñ –±–∞—Ç—á—É
            batch_end = min(current_index + batch_size, total)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–∂–µ—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –±–∞—Ç—á—ñ
            for i in range(current_index, batch_end):
                if self.widgets_creation_cancelled:
                    return
                
                try:
                    sentence = sentences[i]
                    self.logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ—á–µ–Ω–Ω—è {i+1}/{total}: {sentence['text'][:30]}...")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ—á–µ–Ω–Ω—è
                    required_fields = ['text', 'start_time', 'end_time']
                    missing_fields = [field for field in required_fields if field not in sentence]
                    
                    if missing_fields:
                        self.logger.error(f"–†–µ—á–µ–Ω–Ω—è {i} –º–∞—î –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ–ª—è: {missing_fields}")
                        continue
                    
                    # –û–ù–û–í–õ–ï–ù–û: –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Å–ø—Ä–æ—â–µ–Ω–∏–π SentenceWidget
                    sentence_widget = SentenceWidget(
                        parent_frame=self.sentences_scrollable_frame,
                        sentence_data=sentence,
                        video_filename=filename,
                        sentence_index=i,
                        ai_manager=self.ai_manager,
                        data_manager=self.data_manager,
                        on_sentence_click=self.on_sentence_clicked
                    )
                    
                    self.sentence_widgets.append(sentence_widget)
                    self.logger.info(f"‚úÖ SentenceWidget {i} —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ")
                    
                except Exception as widget_error:
                    self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è SentenceWidget {i}: {widget_error}")
                    import traceback
                    self.logger.error(f"–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:\n{traceback.format_exc()}")
                    continue
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
            current_index = batch_end
            progress_text = f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤: {current_index}/{total} ({current_index/total*100:.1f}%)"
            self.update_progress_message(progress_text)
            
            # –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.sentences_canvas.update_idletasks()
            
            # –ü–ª–∞–Ω—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –±–∞—Ç—á –∑ –ø–∞—É–∑–æ—é
            self.root.after(100, create_next_batch)
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à–∏–π –±–∞—Ç—á
        self.root.after(10, create_next_batch)
    
    def finish_widget_creation(self, cancelled: bool = False):
        """–ó–∞–≤–µ—Ä—à—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤"""
        try:
            self.is_creating_widgets = False
            self.cancel_button.config(state=tk.DISABLED)
            
            if cancelled:
                self.status_var.set("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
                self.hide_progress_message()
                return
            
            # –•–æ–≤–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
            self.hide_progress_message()
            
            # –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.sentences_canvas.update_idletasks()
            
            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –ø–æ—á–∞—Ç–∫—É
            self.sentences_canvas.yview_moveto(0)
            
            # –§—ñ–Ω–∞–ª—å–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            self.root.update_idletasks()
            
            total_widgets = len(self.sentence_widgets)
            self.status_var.set(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {total_widgets} —Ä–µ—á–µ–Ω—å")
            self.logger.info(f"=== –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û: {total_widgets} –≤—ñ–¥–∂–µ—Ç—ñ–≤ ===")
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤: {e}")
    
    def cancel_widget_creation(self):
        """–°–∫–∞—Å–æ–≤—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤"""
        if self.is_creating_widgets:
            self.widgets_creation_cancelled = True
            self.logger.info("–ó–∞–ø–∏—Ç –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤")
    
    def show_progress_message(self, message: str):
        """–ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É"""
        if hasattr(self, 'progress_label'):
            self.progress_label.destroy()
        
        self.progress_label = ttk.Label(
            self.sentences_scrollable_frame,
            text=f"üîÑ {message}",
            font=("Arial", 12, "bold"),
            background="#fff3cd"
        )
        self.progress_label.pack(pady=20)
        self.root.update_idletasks()
    
    def update_progress_message(self, message: str):
        """–û–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É"""
        if hasattr(self, 'progress_label') and self.progress_label.winfo_exists():
            self.progress_label.config(text=f"üîÑ {message}")
            self.root.update_idletasks()
    
    def hide_progress_message(self):
        """–•–æ–≤–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É"""
        if hasattr(self, 'progress_label'):
            try:
                self.progress_label.destroy()
                delattr(self, 'progress_label')
            except:
                pass
    
    def clear_sentences(self):
        """–û—á–∏—â–∞—î –≤—Å—ñ —Ä–µ—á–µ–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω–æ"""
        try:
            # –°–∫–∞—Å–æ–≤—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ —è–∫—â–æ –≤–æ–Ω–æ —Ç—Ä–∏–≤–∞—î
            if self.is_creating_widgets:
                self.cancel_widget_creation()
                # –î–∞—î–º–æ —á–∞—Å –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
                self.root.after(50)
            
            self.logger.info(f"–û—á–∏—â–µ–Ω–Ω—è {len(self.sentence_widgets)} –≤—ñ–¥–∂–µ—Ç—ñ–≤...")
            
            # –í–∏–¥–∞–ª—è—î–º–æ –≤—ñ–¥–∂–µ—Ç–∏
            for i, widget in enumerate(self.sentence_widgets):
                try:
                    if hasattr(widget, 'main_frame') and widget.main_frame.winfo_exists():
                        widget.main_frame.destroy()
                        self.logger.debug(f"–í—ñ–¥–∂–µ—Ç {i} –≤–∏–¥–∞–ª–µ–Ω–∏–π")
                except Exception as e:
                    self.logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç–∞ {i}: {e}")
            
            self.sentence_widgets.clear()
            
            # –û—á–∏—â–∞—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π —Ñ—Ä–µ–π–º
            for child in self.sentences_scrollable_frame.winfo_children():
                try:
                    child.destroy()
                except:
                    pass
            
            # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
            self.current_sentences.clear()
            self.selected_sentence = None
            
            # –°–∫–∏–¥–∞—î–º–æ –ø—Ä–æ–∫—Ä—É—Ç–∫—É
            self.sentences_canvas.yview_moveto(0)
            
            self.logger.info("–û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è: {e}")
    
    def refresh_videos(self):
        """–û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–µ–æ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –≤—ñ–¥–µ–æ
            video_states = self.data_manager.get_all_video_states()
            processed_videos = [v for v in video_states if v['processing_completed']]
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ–º–±–æ–±–æ–∫—Å–∞ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
            video_options = []
            for video in processed_videos:
                filename = video['video_filename']
                sentences_count = video['sentences_extracted']
                
                # –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤—ñ–¥–µ–æ
                try:
                    from processing.database_manager import DatabaseManager
                    db_manager = DatabaseManager()
                    videos = db_manager.get_all_videos()
                    video_data = next((v for v in videos if v['filename'] == filename), None)
                    
                    if video_data:
                        segments = db_manager.get_video_segments(video_data['id'])
                        sentences = self.video_processor.split_text_into_sentences(segments)
                        
                        if sentences:
                            total_duration = calculate_total_duration(sentences)
                            duration_text = format_duration(total_duration, short=True)
                            video_options.append(f"{filename} ({sentences_count} —Ä–µ—á–µ–Ω—å ‚Ä¢ {duration_text})")
                        else:
                            video_options.append(f"{filename} ({sentences_count} —Ä–µ—á–µ–Ω—å)")
                    else:
                        video_options.append(f"{filename} ({sentences_count} —Ä–µ—á–µ–Ω—å)")
                except Exception as e:
                    self.logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –¥–ª—è {filename}: {e}")
                    video_options.append(f"{filename} ({sentences_count} —Ä–µ—á–µ–Ω—å)")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–º–±–æ–±–æ–∫—Å
            self.video_combo['values'] = video_options
            
            if video_options and not self.current_video:
                self.video_combo.current(0)
                self.on_video_selected()
            
            self.logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(video_options)} –≤—ñ–¥–µ–æ")
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—ñ–¥–µ–æ: {e}")
    
    def show_video_statistics(self):
        """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ –Ω–æ–≤–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º"""
        if not self.current_sentences:
            messagebox.showinfo("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ù–µ–º–∞—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö —Ä–µ—á–µ–Ω—å")
            return
        
        try:
            time_stats = get_video_time_stats(self.current_sentences)
            
            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_chars = sum(len(s.get('text', '')) for s in self.current_sentences)
            avg_chars = total_chars / len(self.current_sentences) if self.current_sentences else 0
            
            # –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
            durations = []
            for sentence in self.current_sentences:
                if 'end_time' in sentence and 'start_time' in sentence:
                    duration = sentence['end_time'] - sentence['start_time']
                    durations.append(duration)
            
            short_sentences = len([d for d in durations if d < 3])  # < 3 —Å–µ–∫
            medium_sentences = len([d for d in durations if 3 <= d <= 10])  # 3-10 —Å–µ–∫
            long_sentences = len([d for d in durations if d > 10])  # > 10 —Å–µ–∫
            
            stats_text = f"""–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–µ–æ: {self.current_video}

üìä –ó–ê–ì–ê–õ–¨–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø:
‚Ä¢ –†–µ—á–µ–Ω—å: {time_stats['sentence_count']}
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {time_stats['total_duration']}
‚Ä¢ –°–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ä–µ—á–µ–Ω–Ω—è: {time_stats['avg_sentence_duration']}
‚Ä¢ –ù–∞–π–∫–æ—Ä–æ—Ç—à–µ —Ä–µ—á–µ–Ω–Ω—è: {time_stats['shortest']}
‚Ä¢ –ù–∞–π–¥–æ–≤—à–µ —Ä–µ—á–µ–Ω–Ω—è: {time_stats['longest']}

üìù –¢–ï–ö–°–¢–û–í–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤: {total_chars:,}
‚Ä¢ –°–µ—Ä–µ–¥–Ω—è –¥–æ–≤–∂–∏–Ω–∞ —Ä–µ—á–µ–Ω–Ω—è: {avg_chars:.1f} —Å–∏–º–≤–æ–ª—ñ–≤

‚è±Ô∏è –†–û–ó–ü–û–î–Ü–õ –ó–ê –¢–†–ò–í–ê–õ–Ü–°–¢–Æ:
‚Ä¢ –ö–æ—Ä–æ—Ç–∫—ñ (< 3 —Å–µ–∫): {short_sentences} —Ä–µ—á–µ–Ω—å
‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ (3-10 —Å–µ–∫): {medium_sentences} —Ä–µ—á–µ–Ω—å  
‚Ä¢ –î–æ–≤–≥—ñ (> 10 —Å–µ–∫): {long_sentences} —Ä–µ—á–µ–Ω—å

üéØ –ï–§–ï–ö–¢–ò–í–ù–Ü–°–¢–¨:
‚Ä¢ –°–∏–º–≤–æ–ª—ñ–≤/—Å–µ–∫—É–Ω–¥–∞: {total_chars/sum(durations):.1f} (—à–≤–∏–¥–∫—ñ—Å—Ç—å –º–æ–≤–ª–µ–Ω–Ω—è)
‚Ä¢ –†–µ—á–µ–Ω—å/—Ö–≤–∏–ª–∏–Ω–∞: {len(durations)/(sum(durations)/60):.1f}
"""
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_window = tk.Toplevel(self.root)
            stats_window.title(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - {self.current_video}")
            stats_window.geometry("500x400")
            stats_window.resizable(True, True)
            
            # –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
            text_widget = tk.Text(stats_window, wrap=tk.WORD, padx=10, pady=10)
            text_widget.pack(fill=tk.BOTH, expand=True)
            
            text_widget.insert(tk.END, stats_text)
            text_widget.config(state=tk.DISABLED)
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è
            close_btn = ttk.Button(stats_window, text="–ó–∞–∫—Ä–∏—Ç–∏", 
                                  command=stats_window.destroy)
            close_btn.pack(pady=10)
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
    
    def on_video_selected(self, event=None):
        """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –≤—ñ–¥–µ–æ"""
        selected = self.video_var.get()
        if not selected:
            return
        
        try:
            # –í–∏—Ç—è–≥—É—î–º–æ –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É –∑ —Ä—è–¥–∫–∞
            filename = selected.split(' (')[0]
            
            self.status_var.set(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ—á–µ–Ω—å –¥–ª—è {filename}...")
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–µ—á–µ–Ω–Ω—è –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            threading.Thread(target=self.load_sentences_for_video, 
                           args=(filename,), daemon=True).start()
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –≤—ñ–¥–µ–æ: {e}")
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ: {e}")
    
    def load_sentences_for_video(self, filename: str):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ä–µ—á–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–µ–æ"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –æ—Å–Ω–æ–≤–Ω–æ—ó –ë–î
            from processing.database_manager import DatabaseManager
            db_manager = DatabaseManager()
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–µ–æ
            videos = db_manager.get_all_videos()
            video = next((v for v in videos if v['filename'] == filename), None)
            
            if not video:
                raise Exception(f"–í—ñ–¥–µ–æ {filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–µ–≥–º–µ–Ω—Ç–∏
            segments = db_manager.get_video_segments(video['id'])
            
            # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Ä–µ—á–µ–Ω–Ω—è
            sentences = self.video_processor.split_text_into_sentences(segments)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ UI –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            self.root.after(0, lambda: self.display_sentences(sentences, filename))
            
        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ—á–µ–Ω—å: {error_msg}")
            self.root.after(0, lambda msg=error_msg: messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ—á–µ–Ω–Ω—è: {msg}"))
    
    def on_sentence_clicked(self, sentence_data: Dict, video_filename: str):
        """–û–±—Ä–æ–±–ª—è—î –∫–ª—ñ–∫ –ø–æ —Ä–µ—á–µ–Ω–Ω—é"""
        self.selected_sentence = sentence_data
        
        # –ü–µ—Ä–µ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ø–∞–Ω–µ–ª—å –Ω–æ—Ç–∞—Ç–æ–∫
        self.notes_panel.set_sentence_context(sentence_data, video_filename)
        
        self.logger.debug(f"–í–∏–±—Ä–∞–Ω–æ —Ä–µ—á–µ–Ω–Ω—è: {sentence_data['text'][:50]}...")
    
    def on_note_changed(self):
        """–û–±—Ä–æ–±–ª—è—î –∑–º—ñ–Ω—É –Ω–æ—Ç–∞—Ç–∫–∏"""
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ª–æ–≥—ñ–∫—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ –Ω–æ—Ç–∞—Ç–æ–∫
        pass
    
    # ===============================
    # AI –ú–ï–¢–û–î–ò (–¢–Ü–õ–¨–ö–ò –ì–†–ê–ú–ê–¢–ò–ö–ê)
    # ===============================
    
    def generate_grammar_for_all(self):
        """–ì–µ–Ω–µ—Ä—É—î –≥—Ä–∞–º–∞—Ç–∏—á–Ω—ñ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö —Ä–µ—á–µ–Ω—å –≤—Å—ñ—Ö –≤—ñ–¥–µ–æ"""
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", 
                              "–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≥—Ä–∞–º–∞—Ç–∏—á–Ω—ñ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö —Ä–µ—á–µ–Ω—å?\n–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥—É–∂–µ –±–∞–≥–∞—Ç–æ —á–∞—Å—É."):
            threading.Thread(target=self.generate_grammar_for_all_thread, daemon=True).start()
    
    def generate_grammar_for_all_thread(self):
        """–ì–µ–Ω–µ—Ä—É—î –≥—Ä–∞–º–∞—Ç–∏–∫—É –¥–ª—è –≤—Å—ñ—Ö —Ä–µ—á–µ–Ω—å –≤—Å—ñ—Ö –≤—ñ–¥–µ–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        try:
            if not self.ai_manager.is_available():
                self.update_status("AI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
                return
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –≤—ñ–¥–µ–æ
            video_states = self.data_manager.get_all_video_states()
            processed_videos = [v for v in video_states if v['processing_completed']]
            
            total_videos = len(processed_videos)
            total_sentences_processed = 0
            
            for video_idx, video in enumerate(processed_videos):
                filename = video['video_filename']
                self.update_status(f"–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–µ–æ {video_idx+1}/{total_videos}: {filename}")
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–µ—á–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–µ–æ
                from processing.database_manager import DatabaseManager
                db_manager = DatabaseManager()
                
                videos = db_manager.get_all_videos()
                video_data = next((v for v in videos if v['filename'] == filename), None)
                
                if video_data:
                    segments = db_manager.get_video_segments(video_data['id'])
                    sentences = self.video_processor.split_text_into_sentences(segments)
                    
                    for i, sentence in enumerate(sentences):
                        # –¢—ñ–ª—å–∫–∏ –≥—Ä–∞–º–∞—Ç–∏–∫–∞
                        grammar = self.ai_manager.explain_grammar(sentence['text'])
                        if grammar['success']:
                            self.data_manager.save_ai_response(
                                sentence_text=sentence['text'],
                                video_filename=filename,
                                start_time=sentence['start_time'],
                                end_time=sentence['end_time'],
                                response_type='grammar',
                                ai_response=grammar['result'],
                                ai_client='llama3.1'
                            )
                        
                        total_sentences_processed += 1
                        
                        # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
                        import time
                        time.sleep(1)
            
            self.update_status(f"–ì—Ä–∞–º–∞—Ç–∏–∫–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {total_sentences_processed} —Ä–µ—á–µ–Ω—å –∑ {total_videos} –≤—ñ–¥–µ–æ")
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥—Ä–∞–º–∞—Ç–∏–∫–∏ –¥–ª—è –≤—Å—ñ—Ö: {e}")
            self.update_status(f"–ü–æ–º–∏–ª–∫–∞: {e}")
    
    def generate_grammar_for_current_video(self):
        """–ì–µ–Ω–µ—Ä—É—î –≥—Ä–∞–º–∞—Ç–∏–∫—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—ñ–¥–µ–æ"""
        if not self.current_video:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–µ–æ")
            return
        
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", 
                              f"–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≥—Ä–∞–º–∞—Ç–∏—á–Ω—ñ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö —Ä–µ—á–µ–Ω—å —É {self.current_video}?"):
            threading.Thread(target=self.generate_grammar_for_current_video_thread, daemon=True).start()
    
    def generate_grammar_for_current_video_thread(self):
        """–ì–µ–Ω–µ—Ä—É—î –≥—Ä–∞–º–∞—Ç–∏–∫—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—ñ–¥–µ–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        try:
            if not self.ai_manager.is_available():
                self.update_status("AI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
                return
            
            total_sentences = len(self.current_sentences)
            
            for i, sentence in enumerate(self.current_sentences):
                self.update_status(f"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥—Ä–∞–º–∞—Ç–∏–∫–∏ {i+1}/{total_sentences}...")
                
                # –¢—ñ–ª—å–∫–∏ –≥—Ä–∞–º–∞—Ç–∏–∫–∞
                grammar = self.ai_manager.explain_grammar(sentence['text'])
                if grammar['success']:
                    self.data_manager.save_ai_response(
                        sentence_text=sentence['text'],
                        video_filename=self.current_video,
                        start_time=sentence['start_time'],
                        end_time=sentence['end_time'],
                        response_type='grammar',
                        ai_response=grammar['result'],
                        ai_client='llama3.1'
                    )
                
                # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
                import time
                time.sleep(1)
            
            self.update_status(f"–ì—Ä–∞–º–∞—Ç–∏–∫–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {total_sentences} —Ä–µ—á–µ–Ω—å")
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥—Ä–∞–º–∞—Ç–∏–∫–∏: {e}")
            self.update_status(f"–ü–æ–º–∏–ª–∫–∞: {e}")
    
    # ===============================
    # –£–¢–ò–õ–Ü–¢–ê–†–ù–Ü –ú–ï–¢–û–î–ò
    # ===============================
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞—î –≥–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–∏"""
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∑–∞–∫—Ä–∏—Ç—Ç—è
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        self.root.mainloop()
    
    def create_status_bar(self):
        """–°—Ç–≤–æ—Ä—é—î —Å—Ç–∞—Ç—É—Å –±–∞—Ä"""
        status_frame = ttk.Frame(self.root)
        status_frame.pack(side=tk.BOTTOM, fill=tk.X)
        
        # –û—Å–Ω–æ–≤–Ω–∏–π —Å—Ç–∞—Ç—É—Å
        self.status_var = tk.StringVar()
        self.status_var.set("–ì–æ—Ç–æ–≤–æ")
        
        self.status_label = ttk.Label(
            status_frame, 
            textvariable=self.status_var,
            relief=tk.SUNKEN,
            anchor=tk.W
        )
        self.status_label.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=2, pady=2)
        
        # –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä (–ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(
            status_frame,
            variable=self.progress_var,
            length=200
        )
        # –ù–ï –ø–∞–∫—É—î–º–æ –ø–æ–∫–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω
    
    def setup_styles(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î —Å—Ç–∏–ª—ñ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        style = ttk.Style()
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—É—á–∞—Å–Ω—É —Ç–µ–º—É
        try:
            style.theme_use('vista')  # Windows
        except:
            try:
                style.theme_use('clam')  # –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–Ω–∞
            except:
                pass
        
        # –ö–∞—Å—Ç–æ–º–Ω—ñ —Å—Ç–∏–ª—ñ
        style.configure("Title.TLabel", font=("Arial", 16, "bold"))
        style.configure("Header.TLabel", font=("Arial", 12, "bold"))
    
    def load_initial_data(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ"""
        try:
            self.status_var.set("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –Ω–æ–≤—ñ –≤—ñ–¥–µ–æ
            threading.Thread(target=self.auto_process_videos, daemon=True).start()
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–µ–æ
            self.refresh_videos()
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö: {e}")
            self.status_var.set(f"–ü–æ–º–∏–ª–∫–∞: {e}")
    
    def auto_process_videos(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–æ–±–ª—è—î –Ω–æ–≤—ñ/–∑–º—ñ–Ω–µ–Ω—ñ –≤—ñ–¥–µ–æ"""
        try:
            self.update_status("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –≤—ñ–¥–µ–æ...")
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–æ–≤—ñ/–∑–º—ñ–Ω–µ–Ω—ñ –≤—ñ–¥–µ–æ
            result = self.video_processor.process_all_videos(force_reprocess=False)
            
            if result['stats']['videos_processed'] > 0:
                message = f"–û–±—Ä–æ–±–ª–µ–Ω–æ {result['stats']['videos_processed']} –Ω–æ–≤–∏—Ö –≤—ñ–¥–µ–æ"
                self.root.after(0, lambda: self.status_var.set(message))
                self.root.after(0, self.refresh_videos)
            else:
                self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤–æ"))
                
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ: {e}")
            self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤–æ"))
    
    def update_status(self, message: str):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å"""
        self.root.after(0, lambda: self.status_var.set(message))
    
    def update_ai_status(self):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å AI"""
        try:
            if self.ai_manager.is_available():
                status = self.ai_manager.get_status()
                model = status.get('model', 'unknown')
                self.ai_status_label.config(text=f"ü§ñ AI: {model}", foreground="green")
            else:
                self.ai_status_label.config(text="ü§ñ AI: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π", foreground="red")
        except Exception as e:
            self.ai_status_label.config(text="ü§ñ AI: –ü–æ–º–∏–ª–∫–∞", foreground="red")
    
    def on_closing(self):
        """–ë–µ–∑–ø–µ—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
        try:
            self.logger.info("–ó–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≥—Ä–∞–º–∏...")
            
            # –°–∫–∞—Å–æ–≤—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤
            if self.is_creating_widgets:
                self.widgets_creation_cancelled = True
            
            # –û—á–∏—â–∞—î–º–æ –≤—ñ–¥–∂–µ—Ç–∏
            self.clear_sentences()
            
            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—ñ–∫–Ω–æ
            self.root.quit()
            self.root.destroy()
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ: {e}")
            # –ê–≤–∞—Ä—ñ–π–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è
            try:
                self.root.destroy()
            except:
                pass
    
    # ===============================
    # –§–ê–ô–õ–û–í–Ü –û–ü–ï–†–ê–¶–Ü–á
    # ===============================
    
    def add_video_file(self):
        """–î–æ–¥–∞—î –Ω–æ–≤–∏–π –≤—ñ–¥–µ–æ —Ñ–∞–π–ª"""
        file_path = filedialog.askopenfilename(
            title="–í–∏–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–µ–æ —Ñ–∞–π–ª",
            filetypes=[
                ("–í—ñ–¥–µ–æ —Ñ–∞–π–ª–∏", "*.mkv *.mp4 *.avi *.mov"),
                ("MKV —Ñ–∞–π–ª–∏", "*.mkv"),
                ("MP4 —Ñ–∞–π–ª–∏", "*.mp4"),
                ("–í—Å—ñ —Ñ–∞–π–ª–∏", "*.*")
            ]
        )
        
        if file_path:
            # –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É videos/ —Ç–∞ –æ–±—Ä–æ–±–ª—è—î–º–æ
            threading.Thread(target=self.add_and_process_video, 
                           args=(file_path,), daemon=True).start()
    
    def add_and_process_video(self, file_path: str):
        """–î–æ–¥–∞—î —Ç–∞ –æ–±—Ä–æ–±–ª—è—î –Ω–æ–≤–∏–π –≤—ñ–¥–µ–æ —Ñ–∞–π–ª"""
        try:
            import shutil
            from datetime import datetime
            
            self.update_status("–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ —Ñ–∞–π–ª—É...")
            
            # –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª
            videos_dir = Path("videos")
            videos_dir.mkdir(exist_ok=True)
            
            filename = Path(file_path).name
            destination = videos_dir / filename
            
            shutil.copy2(file_path, destination)
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ
            self.update_status("–û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ –≤—ñ–¥–µ–æ...")
            
            video_info = {
                "filename": filename,
                "filepath": str(destination),
                "size": destination.stat().st_size,
                "modified": datetime.fromtimestamp(destination.stat().st_mtime),
                "extension": destination.suffix.lower()
            }
            
            result = self.video_processor.process_single_video(video_info)
            
            if result['success']:
                self.update_status(f"–í—ñ–¥–µ–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {result['sentences_count']} —Ä–µ—á–µ–Ω—å")
                self.root.after(0, self.refresh_videos)
            else:
                self.update_status(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {result['error']}")
                
        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ: {error_msg}")
            self.update_status(f"–ü–æ–º–∏–ª–∫–∞: {error_msg}")
    
    def process_all_videos(self):
        """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ –≤—ñ–¥–µ–æ —Ñ–∞–π–ª–∏"""
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", 
                              "–ü–µ—Ä–µ–ø—Ä–æ—Ü–µ—Å—É–≤–∞—Ç–∏ –≤—Å—ñ –≤—ñ–¥–µ–æ —Ñ–∞–π–ª–∏?\n–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –±–∞–≥–∞—Ç–æ —á–∞—Å—É."):
            threading.Thread(target=self.process_all_videos_thread, daemon=True).start()
    
    def process_all_videos_thread(self):
        """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ –≤—ñ–¥–µ–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        try:
            self.update_status("–û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –≤—ñ–¥–µ–æ...")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
            self.root.after(0, lambda: self.progress_bar.pack(side=tk.RIGHT, padx=10, pady=2))
            
            result = self.video_processor.process_all_videos(force_reprocess=True)
            
            # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
            self.root.after(0, lambda: self.progress_bar.pack_forget())
            
            message = f"–û–±—Ä–æ–±–ª–µ–Ω–æ {result['stats']['videos_processed']} –≤—ñ–¥–µ–æ"
            self.update_status(message)
            self.root.after(0, self.refresh_videos)
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—Å—ñ—Ö –≤—ñ–¥–µ–æ: {e}")
            self.update_status(f"–ü–æ–º–∏–ª–∫–∞: {e}")
            self.root.after(0, lambda: self.progress_bar.pack_forget())
    
    def process_current_video(self):
        """–û–±—Ä–æ–±–ª—è—î –ø–æ—Ç–æ—á–Ω–µ –≤—ñ–¥–µ–æ"""
        if self.current_video:
            threading.Thread(target=self.process_current_video_thread, daemon=True).start()
    
    def process_current_video_thread(self):
        """–û–±—Ä–æ–±–ª—è—î –ø–æ—Ç–æ—á–Ω–µ –≤—ñ–¥–µ–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        try:
            from datetime import datetime
            
            self.update_status(f"–ü–µ—Ä–µ–æ–±—Ä–æ–±–∫–∞ {self.current_video}...")
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ñ–∞–π–ª
            videos_dir = Path("videos")
            video_path = videos_dir / self.current_video
            
            if video_path.exists():
                video_info = {
                    "filename": self.current_video,
                    "filepath": str(video_path),
                    "size": video_path.stat().st_size,
                    "modified": datetime.fromtimestamp(video_path.stat().st_mtime),
                    "extension": video_path.suffix.lower()
                }
                
                result = self.video_processor.process_single_video(video_info)
                
                if result['success']:
                    self.update_status(f"–ü–µ—Ä–µ–æ–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result['sentences_count']} —Ä–µ—á–µ–Ω—å")
                    # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–µ—á–µ–Ω–Ω—è
                    self.root.after(0, lambda: self.load_sentences_for_video(self.current_video))
                else:
                    self.update_status(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–æ–±—Ä–æ–±–∫–∏: {result['error']}")
            else:
                self.update_status("–§–∞–π–ª –≤—ñ–¥–µ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ: {error_msg}")
            self.update_status(f"–ü–æ–º–∏–ª–∫–∞: {error_msg}")
    
    def simple_about(self):
        """–ü—Ä–æ—Å—Ç–∏–π –¥—ñ–∞–ª–æ–≥ –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É"""
        messagebox.showinfo("–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É", 
                           "Game Learning v2.0\n\n–ü—Ä–æ–≥—Ä–∞–º–∞ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏\n—á–µ—Ä–µ–∑ —ñ–≥—Ä–æ–≤—ñ –≤—ñ–¥–µ–æ –∑ AI –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.\n\nüöÄ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Ä–æ–∑—Ä–æ–±–∫–∞!")


# ==============================================================
# –¢–ï–°–¢–£–í–ê–ù–ù–Ø –¢–ê –ó–ê–ü–£–°–ö
# ==============================================================

if __name__ == "__main__":
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É —Ç–∞ –∑–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞"""
    
    print("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É:")
    print("=" * 50)
    
    test_cases = [
        (5.5, "5.5 —Å–µ–∫", "5.5—Å"),
        (45, "45 —Å–µ–∫", "45—Å"), 
        (78, "1 —Ö–≤ 18 —Å–µ–∫", "1—Ö 18—Å"),
        (125.7, "2 —Ö–≤ 5.7 —Å–µ–∫", "2—Ö 5.7—Å"),
        (3661.5, "1 –≥–æ–¥ 1 —Ö–≤ 1.5 —Å–µ–∫", "1–≥ 1—Ö 1.5—Å"),
    ]
    
    for seconds, expected_full, expected_short in test_cases:
        full = format_time(seconds, short=False)
        short = format_time(seconds, short=True)
        
        print(f"{seconds:>8.1f}s ‚Üí {full:<25} | {short:<12}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞
        if full == expected_full and short == expected_short:
            print("                    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ")
        else:
            print(f"                    ‚ùå –û—á—ñ–∫—É–≤–∞–ª–æ—Å—è: {expected_full} | {expected_short}")
    
    print("\nüéØ –§—É–Ω–∫—Ü—ñ—ó —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—é—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ!")
    print("üöÄ –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞...")
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏
    try:
        app = MainWindow()
        app.run()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏: {e}")
        import traceback
        traceback.print_exc()