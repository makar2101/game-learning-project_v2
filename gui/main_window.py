"""
Main Window - –æ–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –Ω–æ–≤–∏–º SentenceWidget
–ü—ñ–¥—Ç—Ä–∏–º—É—î —Ç—ñ–ª—å–∫–∏ –≥—Ä–∞–º–∞—Ç–∏—á–Ω—ñ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑—à–∏—Ä—é–≤–∞–Ω–∏–º –ø–æ–ª–µ–º
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
import logging
import json
from pathlib import Path
from typing import Dict, List, Optional

# –Ü–º–ø–æ—Ä—Ç–∏ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
from ai.enhanced_ai_manager import EnhancedAIManager
from data.data_manager import DataManager
from data.enhanced_video_processor import EnhancedVideoProcessor
from gui.enhanced_group_widget import EnhancedGroupWidget
from gui.notes_panel import NotesPanel
from utils.time_formatting import format_time, format_duration, format_time_range

# –Ü–º–ø–æ—Ä—Ç–∏ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
from ai.ai_manager import AIManager
from data.data_manager import DataManager
from data.video_processor import VideoProcessor
from gui.sentence_widget import SentenceWidget
from gui.notes_panel import NotesPanel

# –§–£–ù–ö–¶–Ü–á –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø –ß–ê–°–£ (–ù–ê –ü–û–ß–ê–¢–ö–£, –ó–û–í–ù–Ü –ö–õ–ê–°–£)
def format_time(seconds: float, short: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î —á–∞—Å –∑ —Å–µ–∫—É–Ω–¥ —É –∑—Ä—É—á–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç"""
    if seconds < 0:
        return "0 —Å–µ–∫" if not short else "0—Å"
    
    total_seconds = int(seconds)
    milliseconds = seconds - total_seconds
    
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    remaining_seconds = total_seconds % 60
    
    final_seconds = remaining_seconds + milliseconds
    
    parts = []
    
    if short:
        if hours > 0:
            parts.append(f"{hours}–≥")
        if minutes > 0:
            parts.append(f"{minutes}—Ö")
        if final_seconds > 0 or not parts:
            if final_seconds == int(final_seconds):
                parts.append(f"{int(final_seconds)}—Å")
            else:
                parts.append(f"{final_seconds:.1f}—Å")
    else:
        if hours > 0:
            parts.append(f"{hours} –≥–æ–¥")
        if minutes > 0:
            parts.append(f"{minutes} —Ö–≤")
        if final_seconds > 0 or not parts:
            if final_seconds == int(final_seconds):
                parts.append(f"{int(final_seconds)} —Å–µ–∫")
            else:
                parts.append(f"{final_seconds:.1f} —Å–µ–∫")
    
    return " ".join(parts)

def format_duration(duration_seconds: float, short: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å"""
    return format_time(duration_seconds, short)

def calculate_total_duration(sentences: List[Dict]) -> float:
    """–û–±—á–∏—Å–ª—é—î –∑–∞–≥–∞–ª—å–Ω—É —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤—Å—ñ—Ö —Ä–µ—á–µ–Ω—å"""
    total = 0.0
    for sentence in sentences:
        if 'end_time' in sentence and 'start_time' in sentence:
            duration = sentence['end_time'] - sentence['start_time']
            total += duration
    return total

def get_video_time_stats(sentences: List[Dict]) -> Dict[str, str]:
    """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Å—É –¥–ª—è –≤—ñ–¥–µ–æ"""
    if not sentences:
        return {
            'total_duration': '0 —Å–µ–∫',
            'total_duration_short': '0—Å',
            'avg_sentence_duration': '0—Å',
            'shortest': '0—Å',
            'longest': '0—Å',
            'sentence_count': 0
        }
    
    durations = []
    for sentence in sentences:
        if 'end_time' in sentence and 'start_time' in sentence:
            duration = sentence['end_time'] - sentence['start_time']
            durations.append(duration)
    
    if not durations:
        return {
            'total_duration': '0 —Å–µ–∫',
            'total_duration_short': '0—Å',
            'avg_sentence_duration': '0—Å',
            'shortest': '0—Å',
            'longest': '0—Å',
            'sentence_count': len(sentences)
        }
    
    total_duration = sum(durations)
    avg_duration = total_duration / len(durations)
    
    return {
        'total_duration': format_duration(total_duration),
        'total_duration_short': format_duration(total_duration, short=True),
        'avg_sentence_duration': format_duration(avg_duration, short=True),
        'shortest': format_duration(min(durations), short=True),
        'longest': format_duration(max(durations), short=True),
        'sentence_count': len(sentences)
    }


class MainWindow:
    """–ì–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –Ω–æ–≤–æ–≥–æ —Å–ø—Ä–æ—â–µ–Ω–æ–≥–æ SentenceWidget"""
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞"""
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ
        self.root = tk.Tk()
        self.root.title("Game Learning - –í–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó —á–µ—Ä–µ–∑ —ñ–≥—Ä–æ–≤—ñ –≤—ñ–¥–µ–æ")
        self.root.geometry("1400x900")
        self.root.minsize(1000, 700)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
        self.init_managers()
        
        # –î–∞–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        self.current_video = None
        self.current_sentences = []
        self.sentence_widgets = []
        self.selected_sentence = None
        
        # –°—Ç–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤
        self.is_creating_widgets = False
        self.widgets_creation_cancelled = False
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        self.create_interface()
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        self.load_initial_data()
    
    def init_managers(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏"""
        try:
            # AI Manager
            self.ai_manager = AIManager()
            
            # Data Manager
            self.data_manager = DataManager()
            
            # Video Processor
            self.video_processor = VideoProcessor()
            
            self.logger.info("–í—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤: {e}")
            messagebox.showerror("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞", 
                               f"–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É: {e}")
    
    def create_interface(self):
        """–°—Ç–≤–æ—Ä—é—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–≥—Ä–∞–º–∏"""
        # –ú–µ–Ω—é
        self.create_menu()
        
        # –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å –∑ –≤–∏–±–æ—Ä–æ–º –≤—ñ–¥–µ–æ
        self.create_top_panel()
        
        # –ì–æ–ª–æ–≤–Ω–∞ —Ä–æ–±–æ—á–∞ –æ–±–ª–∞—Å—Ç—å
        self.create_main_area()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.create_status_bar()
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤
        self.setup_styles()
    
    def create_menu(self):
        """–°—Ç–≤–æ—Ä—é—î —Å–ø—Ä–æ—â–µ–Ω–µ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # –ú–µ–Ω—é –§–∞–π–ª
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ...", command=self.add_video_file)
        file_menu.add_command(label="–û–±—Ä–æ–±–∏—Ç–∏ –≤—Å—ñ –≤—ñ–¥–µ–æ", command=self.process_all_videos)
        file_menu.add_separator()
        file_menu.add_command(label="–í–∏—Ö—ñ–¥", command=self.on_closing)
        
        # –ú–µ–Ω—é AI (—Ç—ñ–ª—å–∫–∏ –≥—Ä–∞–º–∞—Ç–∏–∫–∞)
        ai_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="AI", menu=ai_menu)
        ai_menu.add_command(label="–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≥—Ä–∞–º–∞—Ç–∏–∫—É –¥–ª—è –≤—Å—ñ—Ö", command=self.generate_grammar_for_all)
        
        # –ú–µ–Ω—é –î–æ–ø–æ–º–æ–≥–∞
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–î–æ–ø–æ–º–æ–≥–∞", menu=help_menu)
        help_menu.add_command(label="–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É", command=self.simple_about)
    
    def create_top_panel(self):
        """–°—Ç–≤–æ—Ä—é—î –≤–µ—Ä—Ö–Ω—é –ø–∞–Ω–µ–ª—å –∑ –≤–∏–±–æ—Ä–æ–º –≤—ñ–¥–µ–æ"""
        top_frame = ttk.Frame(self.root)
        top_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # –õ–µ–π–±–ª —Ç–∞ –∫–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –≤–∏–±–æ—Ä—É –≤—ñ–¥–µ–æ
        ttk.Label(top_frame, text="üìπ –í—ñ–¥–µ–æ:", font=("Arial", 12)).pack(side=tk.LEFT, padx=(0, 10))
        
        self.video_var = tk.StringVar()
        self.video_combo = ttk.Combobox(
            top_frame, 
            textvariable=self.video_var, 
            state="readonly", 
            width=50,
            font=("Arial", 11)
        )
        self.video_combo.pack(side=tk.LEFT, padx=(0, 10))
        self.video_combo.bind('<<ComboboxSelected>>', self.on_video_selected)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è (—Å–ø—Ä–æ—â–µ–Ω—ñ)
        buttons_frame = ttk.Frame(top_frame)
        buttons_frame.pack(side=tk.RIGHT)
        
        ttk.Button(buttons_frame, text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", 
                  command=self.refresh_videos).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(buttons_frame, text="‚öôÔ∏è –û–±—Ä–æ–±–∏—Ç–∏", 
                  command=self.process_current_video).pack(side=tk.LEFT, padx=2)
        
        # –û–ù–û–í–õ–ï–ù–û: –¢—ñ–ª—å–∫–∏ –≥—Ä–∞–º–∞—Ç–∏–∫–∞
        ttk.Button(buttons_frame, text="üìö –ì—Ä–∞–º–∞—Ç–∏–∫–∞ –¥–ª—è –≤—Å—ñ—Ö", 
                  command=self.generate_grammar_for_current_video).pack(side=tk.LEFT, padx=2)
        
        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        ttk.Button(buttons_frame, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                  command=self.show_video_statistics).pack(side=tk.LEFT, padx=2)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤
        self.cancel_button = ttk.Button(buttons_frame, text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", 
                                      command=self.cancel_widget_creation, state=tk.DISABLED)
        self.cancel_button.pack(side=tk.LEFT, padx=2)
        
        # –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞–Ω—É AI
        self.ai_status_label = ttk.Label(top_frame, text="", font=("Arial", 9))
        self.ai_status_label.pack(side=tk.RIGHT, padx=(10, 0))
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å AI
        self.update_ai_status()
    
    def create_main_area(self):
        """–°—Ç–≤–æ—Ä—é—î –≥–æ–ª–æ–≤–Ω—É —Ä–æ–±–æ—á—É –æ–±–ª–∞—Å—Ç—å"""
        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.root)
        main_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Paned Window –¥–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –ª—ñ–≤—É —Ç–∞ –ø—Ä–∞–≤—É —á–∞—Å—Ç–∏–Ω–∏
        self.paned_window = ttk.PanedWindow(main_container, orient=tk.HORIZONTAL)
        self.paned_window.pack(fill=tk.BOTH, expand=True)
        
        # –õ—ñ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - —Ä–µ—á–µ–Ω–Ω—è (70%)
        self.create_sentences_panel()
        
        # –ü—Ä–∞–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - –Ω–æ—Ç–∞—Ç–∫–∏ (30%)
        self.create_notes_panel()
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó
        self.root.after(100, lambda: self.paned_window.sashpos(0, 980))
    
    def create_sentences_panel(self):
        """–°—Ç–≤–æ—Ä—é—î –ø–∞–Ω–µ–ª—å –∑ —Ä–µ—á–µ–Ω–Ω—è–º–∏"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ—á–µ–Ω—å
        sentences_frame = ttk.Frame(self.paned_window)
        self.paned_window.add(sentences_frame, weight=7)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(sentences_frame)
        header_frame.pack(fill=tk.X, pady=(0, 5))
        
        self.sentences_title = ttk.Label(
            header_frame, 
            text="üìñ –†–µ—á–µ–Ω–Ω—è (–æ–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–µ–æ)", 
            font=("Arial", 14, "bold")
        )
        self.sentences_title.pack(side=tk.LEFT)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—á–µ–Ω—å
        self.sentences_stats = ttk.Label(
            header_frame, 
            text="", 
            font=("Arial", 10)
        )
        self.sentences_stats.pack(side=tk.RIGHT)
        
        # Canvas –∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é –¥–ª—è —Ä–µ—á–µ–Ω—å
        self.create_sentences_scroll_area(sentences_frame)
    
    def create_sentences_scroll_area(self, parent):
        """–°—Ç–≤–æ—Ä—é—î –æ–±–ª–∞—Å—Ç—å –∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é –¥–ª—è —Ä–µ—á–µ–Ω—å"""
        # Canvas —Ç–∞ Scrollbar
        self.sentences_canvas = tk.Canvas(parent, bg="white", highlightthickness=0)
        sentences_scrollbar = ttk.Scrollbar(parent, orient="vertical", 
                                          command=self.sentences_canvas.yview)
        
        self.sentences_scrollable_frame = ttk.Frame(self.sentences_canvas)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.sentences_scrollable_frame.bind(
            "<Configure>",
            lambda e: self.sentences_canvas.configure(
                scrollregion=self.sentences_canvas.bbox("all")
            )
        )
        
        self.sentences_canvas.create_window(
            (0, 0), 
            window=self.sentences_scrollable_frame, 
            anchor="nw"
        )
        self.sentences_canvas.configure(yscrollcommand=sentences_scrollbar.set)
        
        # –ü—Ä–∏–≤'—è–∑–∫–∞ –∫–æ–ª–µ—Å–∞ –º–∏—à—ñ
        self.sentences_canvas.bind_all("<MouseWheel>", self._on_sentences_mousewheel)
        
        # –ü–∞–∫—É–≤–∞–Ω–Ω—è
        self.sentences_canvas.pack(side="left", fill="both", expand=True)
        sentences_scrollbar.pack(side="right", fill="y")
    
    def _on_sentences_mousewheel(self, event):
        """–û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –º–∏—à–∫–æ—é –¥–ª—è —Ä–µ—á–µ–Ω—å"""
        self.sentences_canvas.yview_scroll(int(-1*(event.delta/120)), "units")
    
    def create_notes_panel(self):
        """–°—Ç–≤–æ—Ä—é—î –ø–∞–Ω–µ–ª—å –Ω–æ—Ç–∞—Ç–æ–∫"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–æ—Ç–∞—Ç–æ–∫
        notes_frame = ttk.Frame(self.paned_window)
        self.paned_window.add(notes_frame, weight=3)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ NotesPanel
        self.notes_panel = NotesPanel(
            parent_frame=notes_frame,
            data_manager=self.data_manager,
            on_note_changed=self.on_note_changed
        )
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        self.notes_panel.main_window = self
    
    def display_sentences(self, sentences: List[Dict], filename: str):
        """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä–µ—á–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º —á–∞—Å—É"""
        try:
            self.logger.info(f"=== –ü–û–ß–ê–¢–û–ö –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –†–ï–ß–ï–ù–¨ ===")
            self.logger.info(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—á–µ–Ω—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {len(sentences)}")
            
            # –°–∫–∞—Å–æ–≤—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —è–∫—â–æ –≤–æ–Ω–æ —Ç—Ä–∏–≤–∞—î
            if self.is_creating_widgets:
                self.cancel_widget_creation()
                # –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
                self.root.after(100, lambda: self.display_sentences(sentences, filename))
                return
            
            # –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Ä–µ—á–µ–Ω–Ω—è
            self.clear_sentences()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ
            self.current_video = filename
            self.current_sentences = sentences
            
            # –û–±—á–∏—Å–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Å—É
            time_stats = get_video_time_stats(sentences)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é
            title_text = f"üìñ {filename}"
            if time_stats['total_duration_short'] != '0—Å':
                title_text += f" ‚Ä¢ {time_stats['total_duration_short']}"
            
            self.sentences_title.config(text=title_text)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
            stats_parts = [f"{time_stats['sentence_count']} —Ä–µ—á–µ–Ω—å"]
            
            if time_stats['total_duration'] != '0 —Å–µ–∫':
                stats_parts.append(f"‚è±Ô∏è {time_stats['total_duration']}")
                stats_parts.append(f"üìä —Å–µ—Ä–µ–¥–Ω—î: {time_stats['avg_sentence_duration']}")
                
                # –î–æ–¥–∞—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
                if time_stats['shortest'] != time_stats['longest']:
                    stats_parts.append(f"üìè {time_stats['shortest']} - {time_stats['longest']}")
            
            stats_text = " ‚Ä¢ ".join(stats_parts)
            self.sentences_stats.config(text=stats_text)
            
            self.logger.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ: {filename}, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats_text}")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–∞—Ç—á–µ–≤–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤
            self.create_widgets_in_batches(sentences, filename)
            
        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ—á–µ–Ω—å: {error_msg}")
            import traceback
            self.logger.error(f"–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:\n{traceback.format_exc()}")
            self.status_var.set(f"–ü–æ–º–∏–ª–∫–∞: {error_msg}")
    
    def create_widgets_in_batches(self, sentences: List[Dict], filename: str, batch_size: int = 5):
        """–°—Ç–≤–æ—Ä—é—î –≤—ñ–¥–∂–µ—Ç–∏ –ø–æ—Ä—Ü—ñ—è–º–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ä–µ–∫—É—Ä—Å—ñ—ó"""
        if self.is_creating_widgets:
            self.logger.warning("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ –≤–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ")
            return
        
        self.is_creating_widgets = True
        self.widgets_creation_cancelled = False
        self.cancel_button.config(state=tk.NORMAL)
        
        total = len(sentences)
        current_index = 0
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
        self.show_progress_message(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤: 0/{total}")
        
        def create_next_batch():
            nonlocal current_index
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
            if self.widgets_creation_cancelled:
                self.logger.info("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
                self.finish_widget_creation(cancelled=True)
                return
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            if current_index >= total:
                self.logger.info(f"=== –°–¢–í–û–†–ï–ù–û {len(self.sentence_widgets)} –í–Ü–î–ñ–ï–¢–Ü–í ===")
                self.finish_widget_creation()
                return
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–µ–∂—ñ –±–∞—Ç—á—É
            batch_end = min(current_index + batch_size, total)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–∂–µ—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –±–∞—Ç—á—ñ
            for i in range(current_index, batch_end):
                if self.widgets_creation_cancelled:
                    return
                
                try:
                    sentence = sentences[i]
                    self.logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ—á–µ–Ω–Ω—è {i+1}/{total}: {sentence['text'][:30]}...")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ—á–µ–Ω–Ω—è
                    required_fields = ['text', 'start_time', 'end_time']
                    missing_fields = [field for field in required_fields if field not in sentence]
                    
                    if missing_fields:
                        self.logger.error(f"–†–µ—á–µ–Ω–Ω—è {i} –º–∞—î –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ–ª—è: {missing_fields}")
                        continue
                    
                    # –û–ù–û–í–õ–ï–ù–û: –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Å–ø—Ä–æ—â–µ–Ω–∏–π SentenceWidget
                    sentence_widget = SentenceWidget(
                        parent_frame=self.sentences_scrollable_frame,
                        sentence_data=sentence,
                        video_filename=filename,
                        sentence_index=i,
                        ai_manager=self.ai_manager,
                        data_manager=self.data_manager,
                        on_sentence_click=self.on_sentence_clicked
                    )
                    
                    self.sentence_widgets.append(sentence_widget)
                    self.logger.info(f"‚úÖ SentenceWidget {i} —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ")
                    
                except Exception as widget_error:
                    self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è SentenceWidget {i}: {widget_error}")
                    import traceback
                    self.logger.error(f"–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:\n{traceback.format_exc()}")
                    continue
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
            current_index = batch_end
            progress_text = f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤: {current_index}/{total} ({current_index/total*100:.1f}%)"
            self.update_progress_message(progress_text)
            
            # –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.sentences_canvas.update_idletasks()
            
            # –ü–ª–∞–Ω—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –±–∞—Ç—á –∑ –ø–∞—É–∑–æ—é
            self.root.after(100, create_next_batch)
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à–∏–π –±–∞—Ç—á
        self.root.after(10, create_next_batch)
    
    def finish_widget_creation(self, cancelled: bool = False):
        """–ó–∞–≤–µ—Ä—à—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤"""
        try:
            self.is_creating_widgets = False
            self.cancel_button.config(state=tk.DISABLED)
            
            if cancelled:
                self.status_var.set("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
                self.hide_progress_message()
                return
            
            # –•–æ–≤–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
            self.hide_progress_message()
            
            # –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.sentences_canvas.update_idletasks()
            
            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –ø–æ—á–∞—Ç–∫—É
            self.sentences_canvas.yview_moveto(0)
            
            # –§—ñ–Ω–∞–ª—å–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            self.root.update_idletasks()
            
            total_widgets = len(self.sentence_widgets)
            self.status_var.set(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {total_widgets} —Ä–µ—á–µ–Ω—å")
            self.logger.info(f"=== –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û: {total_widgets} –≤—ñ–¥–∂–µ—Ç—ñ–≤ ===")
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤: {e}")
    
    def cancel_widget_creation(self):
        """–°–∫–∞—Å–æ–≤—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤"""
        if self.is_creating_widgets:
            self.widgets_creation_cancelled = True
            self.logger.info("–ó–∞–ø–∏—Ç –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤")
    
    def show_progress_message(self, message: str):
        """–ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É"""
        if hasattr(self, 'progress_label'):
            self.progress_label.destroy()
        
        self.progress_label = ttk.Label(
            self.sentences_scrollable_frame,
            text=f"üîÑ {message}",
            font=("Arial", 12, "bold"),
            background="#fff3cd"
        )
        self.progress_label.pack(pady=20)
        self.root.update_idletasks()
    
    def update_progress_message(self, message: str):
        """–û–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É"""
        if hasattr(self, 'progress_label') and self.progress_label.winfo_exists():
            self.progress_label.config(text=f"üîÑ {message}")
            self.root.update_idletasks()
    
    def hide_progress_message(self):
        """–•–æ–≤–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É"""
        if hasattr(self, 'progress_label'):
            try:
                self.progress_label.destroy()
                delattr(self, 'progress_label')
            except:
                pass
    
    def clear_sentences(self):
        """–û—á–∏—â–∞—î –≤—Å—ñ —Ä–µ—á–µ–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω–æ"""
        try:
            # –°–∫–∞—Å–æ–≤—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ —è–∫—â–æ –≤–æ–Ω–æ —Ç—Ä–∏–≤–∞—î
            if self.is_creating_widgets:
                self.cancel_widget_creation()
                # –î–∞—î–º–æ —á–∞—Å –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
                self.root.after(50)
            
            self.logger.info(f"–û—á–∏—â–µ–Ω–Ω—è {len(self.sentence_widgets)} –≤—ñ–¥–∂–µ—Ç—ñ–≤...")
            
            # –í–∏–¥–∞–ª—è—î–º–æ –≤—ñ–¥–∂–µ—Ç–∏
            for i, widget in enumerate(self.sentence_widgets):
                try:
                    if hasattr(widget, 'main_frame') and widget.main_frame.winfo_exists():
                        widget.main_frame.destroy()
                        self.logger.debug(f"–í—ñ–¥–∂–µ—Ç {i} –≤–∏–¥–∞–ª–µ–Ω–∏–π")
                except Exception as e:
                    self.logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç–∞ {i}: {e}")
            
            self.sentence_widgets.clear()
            
            # –û—á–∏—â–∞—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π —Ñ—Ä–µ–π–º
            for child in self.sentences_scrollable_frame.winfo_children():
                try:
                    child.destroy()
                except:
                    pass
            
            # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
            self.current_sentences.clear()
            self.selected_sentence = None
            
            # –°–∫–∏–¥–∞—î–º–æ –ø—Ä–æ–∫—Ä—É—Ç–∫—É
            self.sentences_canvas.yview_moveto(0)
            
            self.logger.info("–û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è: {e}")
    
    def refresh_videos(self):
        """–û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–µ–æ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –≤—ñ–¥–µ–æ
            video_states = self.data_manager.get_all_video_states()
            processed_videos = [v for v in video_states if v['processing_completed']]
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ–º–±–æ–±–æ–∫—Å–∞ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
            video_options = []
            for video in processed_videos:
                filename = video['video_filename']
                sentences_count = video['sentences_extracted']
                
                # –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤—ñ–¥–µ–æ
                try:
                    from processing.database_manager import DatabaseManager
                    db_manager = DatabaseManager()
                    videos = db_manager.get_all_videos()
                    video_data = next((v for v in videos if v['filename'] == filename), None)
                    
                    if video_data:
                        segments = db_manager.get_video_segments(video_data['id'])
                        sentences = self.video_processor.split_text_into_sentences(segments)
                        
                        if sentences:
                            total_duration = calculate_total_duration(sentences)
                            duration_text = format_duration(total_duration, short=True)
                            video_options.append(f"{filename} ({sentences_count} —Ä–µ—á–µ–Ω—å ‚Ä¢ {duration_text})")
                        else:
                            video_options.append(f"{filename} ({sentences_count} —Ä–µ—á–µ–Ω—å)")
                    else:
                        video_options.append(f"{filename} ({sentences_count} —Ä–µ—á–µ–Ω—å)")
                except Exception as e:
                    self.logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –¥–ª—è {filename}: {e}")
                    video_options.append(f"{filename} ({sentences_count} —Ä–µ—á–µ–Ω—å)")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–º–±–æ–±–æ–∫—Å
            self.video_combo['values'] = video_options
            
            if video_options and not self.current_video:
                self.video_combo.current(0)
                self.on_video_selected()
            
            self.logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(video_options)} –≤—ñ–¥–µ–æ")
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—ñ–¥–µ–æ: {e}")
    
    def show_video_statistics(self):
        """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ –Ω–æ–≤–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º"""
        if not self.current_sentences:
            messagebox.showinfo("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ù–µ–º–∞—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö —Ä–µ—á–µ–Ω—å")
            return
        
        try:
            time_stats = get_video_time_stats(self.current_sentences)
            
            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_chars = sum(len(s.get('text', '')) for s in self.current_sentences)
            avg_chars = total_chars / len(self.current_sentences) if self.current_sentences else 0
            
            # –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
            durations = []
            for sentence in self.current_sentences:
                if 'end_time' in sentence and 'start_time' in sentence:
                    duration = sentence['end_time'] - sentence['start_time']
                    durations.append(duration)
            
            short_sentences = len([d for d in durations if d < 3])  # < 3 —Å–µ–∫
            medium_sentences = len([d for d in durations if 3 <= d <= 10])  # 3-10 —Å–µ–∫
            long_sentences = len([d for d in durations if d > 10])  # > 10 —Å–µ–∫
            
            stats_text = f"""–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–µ–æ: {self.current_video}

üìä –ó–ê–ì–ê–õ–¨–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø:
‚Ä¢ –†–µ—á–µ–Ω—å: {time_stats['sentence_count']}
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {time_stats['total_duration']}
‚Ä¢ –°–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ä–µ—á–µ–Ω–Ω—è: {time_stats['avg_sentence_duration']}
‚Ä¢ –ù–∞–π–∫–æ—Ä–æ—Ç—à–µ —Ä–µ—á–µ–Ω–Ω—è: {time_stats['shortest']}
‚Ä¢ –ù–∞–π–¥–æ–≤—à–µ —Ä–µ—á–µ–Ω–Ω—è: {time_stats['longest']}

üìù –¢–ï–ö–°–¢–û–í–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤: {total_chars:,}
‚Ä¢ –°–µ—Ä–µ–¥–Ω—è –¥–æ–≤–∂–∏–Ω–∞ —Ä–µ—á–µ–Ω–Ω—è: {avg_chars:.1f} —Å–∏–º–≤–æ–ª—ñ–≤

‚è±Ô∏è –†–û–ó–ü–û–î–Ü–õ –ó–ê –¢–†–ò–í–ê–õ–Ü–°–¢–Æ:
‚Ä¢ –ö–æ—Ä–æ—Ç–∫—ñ (< 3 —Å–µ–∫): {short_sentences} —Ä–µ—á–µ–Ω—å
‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ (3-10 —Å–µ–∫): {medium_sentences} —Ä–µ—á–µ–Ω—å  
‚Ä¢ –î–æ–≤–≥—ñ (> 10 —Å–µ–∫): {long_sentences} —Ä–µ—á–µ–Ω—å

üéØ –ï–§–ï–ö–¢–ò–í–ù–Ü–°–¢–¨:
‚Ä¢ –°–∏–º–≤–æ–ª—ñ–≤/—Å–µ–∫—É–Ω–¥–∞: {total_chars/sum(durations):.1f} (—à–≤–∏–¥–∫—ñ—Å—Ç—å –º–æ–≤–ª–µ–Ω–Ω—è)
‚Ä¢ –†–µ—á–µ–Ω—å/—Ö–≤–∏–ª–∏–Ω–∞: {len(durations)/(sum(durations)/60):.1f}
"""
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_window = tk.Toplevel(self.root)
            stats_window.title(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - {self.current_video}")
            stats_window.geometry("500x400")
            stats_window.resizable(True, True)
            
            # –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
            text_widget = tk.Text(stats_window, wrap=tk.WORD, padx=10, pady=10)
            text_widget.pack(fill=tk.BOTH, expand=True)
            
            text_widget.insert(tk.END, stats_text)
            text_widget.config(state=tk.DISABLED)
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è
            close_btn = ttk.Button(stats_window, text="–ó–∞–∫—Ä–∏—Ç–∏", 
                                  command=stats_window.destroy)
            close_btn.pack(pady=10)
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
    
    def on_video_selected(self, event=None):
        """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –≤—ñ–¥–µ–æ"""
        selected = self.video_var.get()
        if not selected:
            return
        
        try:
            # –í–∏—Ç—è–≥—É—î–º–æ –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É –∑ —Ä—è–¥–∫–∞
            filename = selected.split(' (')[0]
            
            self.status_var.set(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ—á–µ–Ω—å –¥–ª—è {filename}...")
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–µ—á–µ–Ω–Ω—è –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            threading.Thread(target=self.load_sentences_for_video, 
                           args=(filename,), daemon=True).start()
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –≤—ñ–¥–µ–æ: {e}")
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ: {e}")
    
    def load_sentences_for_video(self, filename: str):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ä–µ—á–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–µ–æ"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –æ—Å–Ω–æ–≤–Ω–æ—ó –ë–î
            from processing.database_manager import DatabaseManager
            db_manager = DatabaseManager()
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–µ–æ
            videos = db_manager.get_all_videos()
            video = next((v for v in videos if v['filename'] == filename), None)
            
            if not video:
                raise Exception(f"–í—ñ–¥–µ–æ {filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–µ–≥–º–µ–Ω—Ç–∏
            segments = db_manager.get_video_segments(video['id'])
            
            # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Ä–µ—á–µ–Ω–Ω—è
            sentences = self.video_processor.split_text_into_sentences(segments)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ UI –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            self.root.after(0, lambda: self.display_sentences(sentences, filename))
            
        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ—á–µ–Ω—å: {error_msg}")
            self.root.after(0, lambda msg=error_msg: messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ—á–µ–Ω–Ω—è: {msg}"))
    
    def on_sentence_clicked(self, sentence_data: Dict, video_filename: str):
        """–û–±—Ä–æ–±–ª—è—î –∫–ª—ñ–∫ –ø–æ —Ä–µ—á–µ–Ω–Ω—é"""
        self.selected_sentence = sentence_data
        
        # –ü–µ—Ä–µ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ø–∞–Ω–µ–ª—å –Ω–æ—Ç–∞—Ç–æ–∫
        self.notes_panel.set_sentence_context(sentence_data, video_filename)
        
        self.logger.debug(f"–í–∏–±—Ä–∞–Ω–æ —Ä–µ—á–µ–Ω–Ω—è: {sentence_data['text'][:50]}...")
    
    def on_note_changed(self):
        """–û–±—Ä–æ–±–ª—è—î –∑–º—ñ–Ω—É –Ω–æ—Ç–∞—Ç–∫–∏"""
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ª–æ–≥—ñ–∫—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ –Ω–æ—Ç–∞—Ç–æ–∫
        pass
    
    # ===============================
    # AI –ú–ï–¢–û–î–ò (–¢–Ü–õ–¨–ö–ò –ì–†–ê–ú–ê–¢–ò–ö–ê)
    # ===============================
    
    def generate_grammar_for_all(self):
        """–ì–µ–Ω–µ—Ä—É—î –≥—Ä–∞–º–∞—Ç–∏—á–Ω—ñ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö —Ä–µ—á–µ–Ω—å –≤—Å—ñ—Ö –≤—ñ–¥–µ–æ"""
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", 
                              "–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≥—Ä–∞–º–∞—Ç–∏—á–Ω—ñ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö —Ä–µ—á–µ–Ω—å?\n–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥—É–∂–µ –±–∞–≥–∞—Ç–æ —á–∞—Å—É."):
            threading.Thread(target=self.generate_grammar_for_all_thread, daemon=True).start()
    
    def generate_grammar_for_all_thread(self):
        """–ì–µ–Ω–µ—Ä—É—î –≥—Ä–∞–º–∞—Ç–∏–∫—É –¥–ª—è –≤—Å—ñ—Ö —Ä–µ—á–µ–Ω—å –≤—Å—ñ—Ö –≤—ñ–¥–µ–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        try:
            if not self.ai_manager.is_available():
                self.update_status("AI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
                return
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –≤—ñ–¥–µ–æ
            video_states = self.data_manager.get_all_video_states()
            processed_videos = [v for v in video_states if v['processing_completed']]
            
            total_videos = len(processed_videos)
            total_sentences_processed = 0
            
            for video_idx, video in enumerate(processed_videos):
                filename = video['video_filename']
                self.update_status(f"–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–µ–æ {video_idx+1}/{total_videos}: {filename}")
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–µ—á–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–µ–æ
                from processing.database_manager import DatabaseManager
                db_manager = DatabaseManager()
                
                videos = db_manager.get_all_videos()
                video_data = next((v for v in videos if v['filename'] == filename), None)
                
                if video_data:
                    segments = db_manager.get_video_segments(video_data['id'])
                    sentences = self.video_processor.split_text_into_sentences(segments)
                    
                    for i, sentence in enumerate(sentences):
                        # –¢—ñ–ª—å–∫–∏ –≥—Ä–∞–º–∞—Ç–∏–∫–∞
                        grammar = self.ai_manager.explain_grammar(sentence['text'])
                        if grammar['success']:
                            self.data_manager.save_ai_response(
                                sentence_text=sentence['text'],
                                video_filename=filename,
                                start_time=sentence['start_time'],
                                end_time=sentence['end_time'],
                                response_type='grammar',
                                ai_response=grammar['result'],
                                ai_client='llama3.1'
                            )
                        
                        total_sentences_processed += 1
                        
                        # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
                        import time
                        time.sleep(1)
            
            self.update_status(f"–ì—Ä–∞–º–∞—Ç–∏–∫–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {total_sentences_processed} —Ä–µ—á–µ–Ω—å –∑ {total_videos} –≤—ñ–¥–µ–æ")
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥—Ä–∞–º–∞—Ç–∏–∫–∏ –¥–ª—è –≤—Å—ñ—Ö: {e}")
            self.update_status(f"–ü–æ–º–∏–ª–∫–∞: {e}")
    
    def generate_grammar_for_current_video(self):
        """–ì–µ–Ω–µ—Ä—É—î –≥—Ä–∞–º–∞—Ç–∏–∫—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—ñ–¥–µ–æ"""
        if not self.current_video:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–µ–æ")
            return
        
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", 
                              f"–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≥—Ä–∞–º–∞—Ç–∏—á–Ω—ñ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö —Ä–µ—á–µ–Ω—å —É {self.current_video}?"):
            threading.Thread(target=self.generate_grammar_for_current_video_thread, daemon=True).start()
    
    def generate_grammar_for_current_video_thread(self):
        """–ì–µ–Ω–µ—Ä—É—î –≥—Ä–∞–º–∞—Ç–∏–∫—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—ñ–¥–µ–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        try:
            if not self.ai_manager.is_available():
                self.update_status("AI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
                return
            
            total_sentences = len(self.current_sentences)
            
            for i, sentence in enumerate(self.current_sentences):
                self.update_status(f"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥—Ä–∞–º–∞—Ç–∏–∫–∏ {i+1}/{total_sentences}...")
                
                # –¢—ñ–ª—å–∫–∏ –≥—Ä–∞–º–∞—Ç–∏–∫–∞
                grammar = self.ai_manager.explain_grammar(sentence['text'])
                if grammar['success']:
                    self.data_manager.save_ai_response(
                        sentence_text=sentence['text'],
                        video_filename=self.current_video,
                        start_time=sentence['start_time'],
                        end_time=sentence['end_time'],
                        response_type='grammar',
                        ai_response=grammar['result'],
                        ai_client='llama3.1'
                    )
                
                # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
                import time
                time.sleep(1)
            
            self.update_status(f"–ì—Ä–∞–º–∞—Ç–∏–∫–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {total_sentences} —Ä–µ—á–µ–Ω—å")
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥—Ä–∞–º–∞—Ç–∏–∫–∏: {e}")
            self.update_status(f"–ü–æ–º–∏–ª–∫–∞: {e}")
    
    # ===============================
    # –£–¢–ò–õ–Ü–¢–ê–†–ù–Ü –ú–ï–¢–û–î–ò
    # ===============================
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞—î –≥–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–∏"""
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∑–∞–∫—Ä–∏—Ç—Ç—è
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        self.root.mainloop()
    
    def create_status_bar(self):
        """–°—Ç–≤–æ—Ä—é—î —Å—Ç–∞—Ç—É—Å –±–∞—Ä"""
        status_frame = ttk.Frame(self.root)
        status_frame.pack(side=tk.BOTTOM, fill=tk.X)
        
        # –û—Å–Ω–æ–≤–Ω–∏–π —Å—Ç–∞—Ç—É—Å
        self.status_var = tk.StringVar()
        self.status_var.set("–ì–æ—Ç–æ–≤–æ")
        
        self.status_label = ttk.Label(
            status_frame, 
            textvariable=self.status_var,
            relief=tk.SUNKEN,
            anchor=tk.W
        )
        self.status_label.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=2, pady=2)
        
        # –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä (–ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(
            status_frame,
            variable=self.progress_var,
            length=200
        )
        # –ù–ï –ø–∞–∫—É—î–º–æ –ø–æ–∫–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω
    
    def setup_styles(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î —Å—Ç–∏–ª—ñ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        style = ttk.Style()
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—É—á–∞—Å–Ω—É —Ç–µ–º—É
        try:
            style.theme_use('vista')  # Windows
        except:
            try:
                style.theme_use('clam')  # –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–Ω–∞
            except:
                pass
        
        # –ö–∞—Å—Ç–æ–º–Ω—ñ —Å—Ç–∏–ª—ñ
        style.configure("Title.TLabel", font=("Arial", 16, "bold"))
        style.configure("Header.TLabel", font=("Arial", 12, "bold"))
    
    def load_initial_data(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ"""
        try:
            self.status_var.set("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –Ω–æ–≤—ñ –≤—ñ–¥–µ–æ
            threading.Thread(target=self.auto_process_videos, daemon=True).start()
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–µ–æ
            self.refresh_videos()
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö: {e}")
            self.status_var.set(f"–ü–æ–º–∏–ª–∫–∞: {e}")
    
    def auto_process_videos(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–æ–±–ª—è—î –Ω–æ–≤—ñ/–∑–º—ñ–Ω–µ–Ω—ñ –≤—ñ–¥–µ–æ"""
        try:
            self.update_status("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –≤—ñ–¥–µ–æ...")
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–æ–≤—ñ/–∑–º—ñ–Ω–µ–Ω—ñ –≤—ñ–¥–µ–æ
            result = self.video_processor.process_all_videos(force_reprocess=False)
            
            if result['stats']['videos_processed'] > 0:
                message = f"–û–±—Ä–æ–±–ª–µ–Ω–æ {result['stats']['videos_processed']} –Ω–æ–≤–∏—Ö –≤—ñ–¥–µ–æ"
                self.root.after(0, lambda: self.status_var.set(message))
                self.root.after(0, self.refresh_videos)
            else:
                self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤–æ"))
                
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ: {e}")
            self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤–æ"))
    
    def update_status(self, message: str):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å"""
        self.root.after(0, lambda: self.status_var.set(message))
    
    def update_ai_status(self):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å AI"""
        try:
            if self.ai_manager.is_available():
                status = self.ai_manager.get_status()
                model = status.get('model', 'unknown')
                self.ai_status_label.config(text=f"ü§ñ AI: {model}", foreground="green")
            else:
                self.ai_status_label.config(text="ü§ñ AI: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π", foreground="red")
        except Exception as e:
            self.ai_status_label.config(text="ü§ñ AI: –ü–æ–º–∏–ª–∫–∞", foreground="red")
    
    def on_closing(self):
        """–ë–µ–∑–ø–µ—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
        try:
            self.logger.info("–ó–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≥—Ä–∞–º–∏...")
            
            # –°–∫–∞—Å–æ–≤—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤
            if self.is_creating_widgets:
                self.widgets_creation_cancelled = True
            
            # –û—á–∏—â–∞—î–º–æ –≤—ñ–¥–∂–µ—Ç–∏
            self.clear_sentences()
            
            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—ñ–∫–Ω–æ
            self.root.quit()
            self.root.destroy()
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ: {e}")
            # –ê–≤–∞—Ä—ñ–π–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è
            try:
                self.root.destroy()
            except:
                pass
    
    # ===============================
    # –§–ê–ô–õ–û–í–Ü –û–ü–ï–†–ê–¶–Ü–á
    # ===============================
    
    def add_video_file(self):
        """–î–æ–¥–∞—î –Ω–æ–≤–∏–π –≤—ñ–¥–µ–æ —Ñ–∞–π–ª"""
        file_path = filedialog.askopenfilename(
            title="–í–∏–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–µ–æ —Ñ–∞–π–ª",
            filetypes=[
                ("–í—ñ–¥–µ–æ —Ñ–∞–π–ª–∏", "*.mkv *.mp4 *.avi *.mov"),
                ("MKV —Ñ–∞–π–ª–∏", "*.mkv"),
                ("MP4 —Ñ–∞–π–ª–∏", "*.mp4"),
                ("–í—Å—ñ —Ñ–∞–π–ª–∏", "*.*")
            ]
        )
        
        if file_path:
            # –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É videos/ —Ç–∞ –æ–±—Ä–æ–±–ª—è—î–º–æ
            threading.Thread(target=self.add_and_process_video, 
                           args=(file_path,), daemon=True).start()
    
    def add_and_process_video(self, file_path: str):
        """–î–æ–¥–∞—î —Ç–∞ –æ–±—Ä–æ–±–ª—è—î –Ω–æ–≤–∏–π –≤—ñ–¥–µ–æ —Ñ–∞–π–ª"""
        try:
            import shutil
            from datetime import datetime
            
            self.update_status("–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ —Ñ–∞–π–ª—É...")
            
            # –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª
            videos_dir = Path("videos")
            videos_dir.mkdir(exist_ok=True)
            
            filename = Path(file_path).name
            destination = videos_dir / filename
            
            shutil.copy2(file_path, destination)
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ
            self.update_status("–û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ –≤—ñ–¥–µ–æ...")
            
            video_info = {
                "filename": filename,
                "filepath": str(destination),
                "size": destination.stat().st_size,
                "modified": datetime.fromtimestamp(destination.stat().st_mtime),
                "extension": destination.suffix.lower()
            }
            
            result = self.video_processor.process_single_video(video_info)
            
            if result['success']:
                self.update_status(f"–í—ñ–¥–µ–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {result['sentences_count']} —Ä–µ—á–µ–Ω—å")
                self.root.after(0, self.refresh_videos)
            else:
                self.update_status(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {result['error']}")
                
        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ: {error_msg}")
            self.update_status(f"–ü–æ–º–∏–ª–∫–∞: {error_msg}")
    
    def process_all_videos(self):
        """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ –≤—ñ–¥–µ–æ —Ñ–∞–π–ª–∏"""
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", 
                              "–ü–µ—Ä–µ–ø—Ä–æ—Ü–µ—Å—É–≤–∞—Ç–∏ –≤—Å—ñ –≤—ñ–¥–µ–æ —Ñ–∞–π–ª–∏?\n–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –±–∞–≥–∞—Ç–æ —á–∞—Å—É."):
            threading.Thread(target=self.process_all_videos_thread, daemon=True).start()
    
    def process_all_videos_thread(self):
        """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ –≤—ñ–¥–µ–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        try:
            self.update_status("–û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –≤—ñ–¥–µ–æ...")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
            self.root.after(0, lambda: self.progress_bar.pack(side=tk.RIGHT, padx=10, pady=2))
            
            result = self.video_processor.process_all_videos(force_reprocess=True)
            
            # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
            self.root.after(0, lambda: self.progress_bar.pack_forget())
            
            message = f"–û–±—Ä–æ–±–ª–µ–Ω–æ {result['stats']['videos_processed']} –≤—ñ–¥–µ–æ"
            self.update_status(message)
            self.root.after(0, self.refresh_videos)
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—Å—ñ—Ö –≤—ñ–¥–µ–æ: {e}")
            self.update_status(f"–ü–æ–º–∏–ª–∫–∞: {e}")
            self.root.after(0, lambda: self.progress_bar.pack_forget())
    
    def process_current_video(self):
        """–û–±—Ä–æ–±–ª—è—î –ø–æ—Ç–æ—á–Ω–µ –≤—ñ–¥–µ–æ"""
        if self.current_video:
            threading.Thread(target=self.process_current_video_thread, daemon=True).start()
    
    def process_current_video_thread(self):
        """–û–±—Ä–æ–±–ª—è—î –ø–æ—Ç–æ—á–Ω–µ –≤—ñ–¥–µ–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        try:
            from datetime import datetime
            
            self.update_status(f"–ü–µ—Ä–µ–æ–±—Ä–æ–±–∫–∞ {self.current_video}...")
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ñ–∞–π–ª
            videos_dir = Path("videos")
            video_path = videos_dir / self.current_video
            
            if video_path.exists():
                video_info = {
                    "filename": self.current_video,
                    "filepath": str(video_path),
                    "size": video_path.stat().st_size,
                    "modified": datetime.fromtimestamp(video_path.stat().st_mtime),
                    "extension": video_path.suffix.lower()
                }
                
                result = self.video_processor.process_single_video(video_info)
                
                if result['success']:
                    self.update_status(f"–ü–µ—Ä–µ–æ–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result['sentences_count']} —Ä–µ—á–µ–Ω—å")
                    # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–µ—á–µ–Ω–Ω—è
                    self.root.after(0, lambda: self.load_sentences_for_video(self.current_video))
                else:
                    self.update_status(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–æ–±—Ä–æ–±–∫–∏: {result['error']}")
            else:
                self.update_status("–§–∞–π–ª –≤—ñ–¥–µ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ: {error_msg}")
            self.update_status(f"–ü–æ–º–∏–ª–∫–∞: {error_msg}")
    
    def simple_about(self):
        """–ü—Ä–æ—Å—Ç–∏–π –¥—ñ–∞–ª–æ–≥ –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É"""
        messagebox.showinfo("–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É", 
                           "Game Learning v2.0\n\n–ü—Ä–æ–≥—Ä–∞–º–∞ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏\n—á–µ—Ä–µ–∑ —ñ–≥—Ä–æ–≤—ñ –≤—ñ–¥–µ–æ –∑ AI –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.\n\nüöÄ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Ä–æ–∑—Ä–æ–±–∫–∞!")


# ==============================================================
# –¢–ï–°–¢–£–í–ê–ù–ù–Ø –¢–ê –ó–ê–ü–£–°–ö
# ==============================================================

    def on_silence_threshold_changed(self):
        """–û–±—Ä–æ–±–ª—è—î –∑–º—ñ–Ω—É –ø–æ—Ä–æ–≥—É —Ç–∏—à—ñ"""
        new_threshold = self.silence_var.get()
        if new_threshold != self.silence_threshold:
            self.silence_threshold = new_threshold
            self.video_processor.segment_grouper.silence_threshold = new_threshold

            # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è
            if self.current_groups:
                threshold_text = f"üí° –ì—Ä—É–ø–∏ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø–∞—É–∑–∞–º–∏ ‚â•{self.silence_threshold}—Å"
                self.grouping_info.config(text=threshold_text + " (–∑–º—ñ–Ω—ñ—Ç—å –≤—ñ–¥–µ–æ –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è)")

    # ===============================
    # –§–Ü–õ–¨–¢–†–ò –¢–ê –°–û–†–¢–£–í–ê–ù–ù–Ø –ì–†–£–ü
    # ===============================

    def apply_groups_filter(self, event=None):
        """–ó–∞—Å—Ç–æ—Å–æ–≤—É—î —Ñ—ñ–ª—å—Ç—Ä –¥–æ –≥—Ä—É–ø"""
        filter_type = self.filter_var.get()

        if filter_type == "–í—Å—ñ –≥—Ä—É–ø–∏":
            filtered_groups = self.current_groups
        elif filter_type == "–õ–µ–≥–∫—ñ":
            filtered_groups = [g for g in self.current_groups
                               if g.get('difficulty_level', '').startswith('beginner')]
        elif filter_type == "–°–µ—Ä–µ–¥–Ω—ñ":
            filtered_groups = [g for g in self.current_groups
                               if g.get('difficulty_level', '').startswith('intermediate')]
        elif filter_type == "–°–∫–ª–∞–¥–Ω—ñ":
            filtered_groups = [g for g in self.current_groups
                               if g.get('difficulty_level', '').startswith('advanced')]
        elif filter_type == "–ó –∫–∞–¥—Ä–∞–º–∏":
            filtered_groups = [g for g in self.current_groups
                               if len(g.get('frames', [])) > 0]
        elif filter_type == "–ë–µ–∑ –∫–∞–¥—Ä—ñ–≤":
            filtered_groups = [g for g in self.current_groups
                               if len(g.get('frames', [])) == 0]
        else:
            filtered_groups = self.current_groups

        # –ü–µ—Ä–µ–≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –≥—Ä—É–ø–∏
        if filtered_groups != self.current_groups:
            self.display_filtered_groups(filtered_groups)

    def apply_groups_sorting(self, event=None):
        """–ó–∞—Å—Ç–æ—Å–æ–≤—É—î —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–æ –≥—Ä—É–ø"""
        sort_type = self.sort_var.get()

        if sort_type == "–ó–∞ —á–∞—Å–æ–º":
            sorted_groups = sorted(self.current_groups,
                                   key=lambda g: g.get('group_start_time', 0))
        elif sort_type == "–ó–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—é":
            difficulty_order = {'beginner': 1, 'intermediate': 2, 'advanced': 3}
            sorted_groups = sorted(self.current_groups,
                                   key=lambda g: difficulty_order.get(
                                       g.get('difficulty_level', 'intermediate').split()[0], 2))
        elif sort_type == "–ó–∞ –¥–æ–≤–∂–∏–Ω–æ—é":
            sorted_groups = sorted(self.current_groups,
                                   key=lambda g: g.get('group_duration', 0), reverse=True)
        elif sort_type == "–ó–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Å–ª—ñ–≤":
            sorted_groups = sorted(self.current_groups,
                                   key=lambda g: g.get('word_count', 0), reverse=True)
        else:
            sorted_groups = self.current_groups

        # –ü–µ—Ä–µ–≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –≥—Ä—É–ø–∏
        if sorted_groups != self.current_groups:
            self.display_filtered_groups(sorted_groups)

    def display_filtered_groups(self, groups: List[Dict]):
        """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ/–≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –≥—Ä—É–ø–∏"""
        # –û—á–∏—â–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –≤—ñ–¥–∂–µ—Ç–∏
        self.clear_groups()

        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –Ω–æ–≤—ñ –≥—Ä—É–ø–∏
        self.create_group_widgets_in_batches(groups, self.current_video)

    # ===============================
    # AI –ú–ï–¢–û–î–ò –î–õ–Ø –ì–†–£–ü
    # ===============================

    def generate_ai_for_current_video(self):
        """–ì–µ–Ω–µ—Ä—É—î –≤—Å—ñ —Ç–∏–ø–∏ AI –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—ñ–¥–µ–æ"""
        if not self.current_video:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–µ–æ")
            return

        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
                               f"–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤—Å—ñ —Ç–∏–ø–∏ AI –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è –≥—Ä—É–ø —É {self.current_video}?\n"
                               f"–¶–µ –≤–∫–ª—é—á–∞—î: –≤—Å–µ–±—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑, –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ª–µ–∫—Å–∏–∫—É —Ç–∞ –≤–∏–º–æ–≤—É."):
            threading.Thread(target=self.generate_all_ai_for_current_video_thread, daemon=True).start()

    def generate_all_ai_for_current_video_thread(self):
        """–ì–µ–Ω–µ—Ä—É—î –≤—Å—ñ —Ç–∏–ø–∏ AI –∞–Ω–∞–ª—ñ–∑—É –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        try:
            if not self.ai_manager.is_available():
                self.update_status("AI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
                return

            total_groups = len(self.current_groups)
            analysis_types = ['comprehensive', 'contextual', 'vocabulary', 'pronunciation']
            total_operations = total_groups * len(analysis_types)
            current_operation = 0

            for group_idx, group in enumerate(self.current_groups):
                text = group['combined_text']

                self.update_status(f"–û–±—Ä–æ–±–∫–∞ –≥—Ä—É–ø–∏ {group_idx + 1}/{total_groups}...")

                # –í—Å–µ–±—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
                comprehensive = self.ai_manager.analyze_sentence_comprehensive(text)
                current_operation += 1
                self.update_status(f"AI –∞–Ω–∞–ª—ñ–∑ {current_operation}/{total_operations}: –≤—Å–µ–±—ñ—á–Ω–∏–π")

                # –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
                context = self._prepare_group_context(group, group_idx)
                contextual = self.ai_manager.explain_in_context(text, context)
                current_operation += 1
                self.update_status(f"AI –∞–Ω–∞–ª—ñ–∑ {current_operation}/{total_operations}: –∫–æ–Ω—Ç–µ–∫—Å—Ç")

                # –õ–µ–∫—Å–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
                vocabulary = self.ai_manager.analyze_vocabulary(text)
                current_operation += 1
                self.update_status(f"AI –∞–Ω–∞–ª—ñ–∑ {current_operation}/{total_operations}: –ª–µ–∫—Å–∏–∫–∞")

                # –§–æ–Ω–µ—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
                pronunciation = self.ai_manager.get_pronunciation_guide(text)
                current_operation += 1
                self.update_status(f"AI –∞–Ω–∞–ª—ñ–∑ {current_operation}/{total_operations}: –≤–∏–º–æ–≤–∞")

                # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤ –ë–î
                self._save_group_ai_analysis(group, comprehensive, contextual, vocabulary, pronunciation)

                # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –≥—Ä—É–ø–∞–º–∏
                import time
                time.sleep(0.5)

            self.update_status(f"AI –∞–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {total_groups} –≥—Ä—É–ø")

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó AI –∞–Ω–∞–ª—ñ–∑—É: {e}")
            self.update_status(f"–ü–æ–º–∏–ª–∫–∞ AI –∞–Ω–∞–ª—ñ–∑—É: {e}")

    def _prepare_group_context(self, group: Dict, group_index: int) -> Dict:
        """–ü—ñ–¥–≥–æ—Ç–æ–≤—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥—Ä—É–ø–∏"""
        context = {
            "video_description": f"–ì—Ä—É–ø–∞ {group_index + 1} –∑ –≤—ñ–¥–µ–æ {self.current_video}",
            "group_duration": group.get('group_duration', 0),
            "word_count": group.get('word_count', 0),
            "difficulty_level": group.get('difficulty_level', 'intermediate')
        }

        # –î–æ–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Ç–∞ –Ω–∞—Å—Ç—É–ø–Ω—É –≥—Ä—É–ø–∏ —è–∫—â–æ —î
        if group_index > 0:
            context["previous_sentence"] = self.current_groups[group_index - 1].get('combined_text', '')

        if group_index < len(self.current_groups) - 1:
            context["next_sentence"] = self.current_groups[group_index + 1].get('combined_text', '')

        return context

    def _save_group_ai_analysis(self, group: Dict, comprehensive: Dict,
                                contextual: Dict, vocabulary: Dict, pronunciation: Dict):
        """–ó–±–µ—Ä—ñ–≥–∞—î AI –∞–Ω–∞–ª—ñ–∑ –≥—Ä—É–ø–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö"""
        try:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–∂–Ω–∏–π —Ç–∏–ø –∞–Ω–∞–ª—ñ–∑—É –æ–∫—Ä–µ–º–æ
            group_text = group['combined_text']
            start_time = group['group_start_time']
            end_time = group['group_end_time']

            # –í—Å–µ–±—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
            if comprehensive.get('success'):
                self.data_manager.save_ai_response(
                    sentence_text=group_text,
                    video_filename=self.current_video,
                    start_time=start_time,
                    end_time=end_time,
                    response_type='comprehensive',
                    ai_response=json.dumps(comprehensive.get('analysis', {})),
                    ai_client='llama3.1'
                )

            # –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
            if contextual.get('success'):
                self.data_manager.save_ai_response(
                    sentence_text=group_text,
                    video_filename=self.current_video,
                    start_time=start_time,
                    end_time=end_time,
                    response_type='contextual',
                    ai_response=contextual.get('explanation', ''),
                    ai_client='llama3.1'
                )

            # –õ–µ–∫—Å–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
            if vocabulary.get('success'):
                self.data_manager.save_ai_response(
                    sentence_text=group_text,
                    video_filename=self.current_video,
                    start_time=start_time,
                    end_time=end_time,
                    response_type='vocabulary',
                    ai_response=vocabulary.get('vocabulary_analysis', ''),
                    ai_client='llama3.1'
                )

            # –§–æ–Ω–µ—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
            if pronunciation.get('success'):
                self.data_manager.save_ai_response(
                    sentence_text=group_text,
                    video_filename=self.current_video,
                    start_time=start_time,
                    end_time=end_time,
                    response_type='pronunciation',
                    ai_response=pronunciation.get('pronunciation_guide', ''),
                    ai_client='llama3.1'
                )

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è AI –∞–Ω–∞–ª—ñ–∑—É –≥—Ä—É–ø–∏: {e}")

    # –û–∫—Ä–µ–º—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É
    def generate_comprehensive_for_all(self):
        """–ì–µ–Ω–µ—Ä—É—î –≤—Å–µ–±—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –≤—Å—ñ—Ö –≥—Ä—É–ø"""
        self._generate_specific_ai_analysis('comprehensive')

    def generate_contextual_for_all(self):
        """–ì–µ–Ω–µ—Ä—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ñ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –≥—Ä—É–ø"""
        self._generate_specific_ai_analysis('contextual')

    def generate_vocabulary_for_all(self):
        """–ì–µ–Ω–µ—Ä—É—î –∞–Ω–∞–ª—ñ–∑ –ª–µ–∫—Å–∏–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –≥—Ä—É–ø"""
        self._generate_specific_ai_analysis('vocabulary')

    def generate_pronunciation_for_all(self):
        """–ì–µ–Ω–µ—Ä—É—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑ –≤–∏–º–æ–≤–∏ –¥–ª—è –≤—Å—ñ—Ö –≥—Ä—É–ø"""
        self._generate_specific_ai_analysis('pronunciation')

    def _generate_specific_ai_analysis(self, analysis_type: str):
        """–ì–µ–Ω–µ—Ä—É—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ç–∏–ø AI –∞–Ω–∞–ª—ñ–∑—É"""
        if not self.current_video:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–µ–æ")
            return

        type_names = {
            'comprehensive': '–≤—Å–µ–±—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑',
            'contextual': '–∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ñ –ø–æ—è—Å–Ω–µ–Ω–Ω—è',
            'vocabulary': '–∞–Ω–∞–ª—ñ–∑ –ª–µ–∫—Å–∏–∫–∏',
            'pronunciation': '—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑ –≤–∏–º–æ–≤–∏'
        }

        type_name = type_names.get(analysis_type, analysis_type)

        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
                               f"–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ {type_name} –¥–ª—è –≤—Å—ñ—Ö –≥—Ä—É–ø —É {self.current_video}?"):
            threading.Thread(target=self._generate_specific_ai_thread,
                             args=(analysis_type,), daemon=True).start()

    def _generate_specific_ai_thread(self, analysis_type: str):
        """–ì–µ–Ω–µ—Ä—É—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ç–∏–ø –∞–Ω–∞–ª—ñ–∑—É –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        try:
            if not self.ai_manager.is_available():
                self.update_status("AI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
                return

            total_groups = len(self.current_groups)

            for group_idx, group in enumerate(self.current_groups):
                self.update_status(f"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è {analysis_type} {group_idx + 1}/{total_groups}...")

                text = group['combined_text']
                result = None

                # –í–∏–∫–ª–∏–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –º–µ—Ç–æ–¥ AI
                if analysis_type == 'comprehensive':
                    result = self.ai_manager.analyze_sentence_comprehensive(text)
                elif analysis_type == 'contextual':
                    context = self._prepare_group_context(group, group_idx)
                    result = self.ai_manager.explain_in_context(text, context)
                elif analysis_type == 'vocabulary':
                    result = self.ai_manager.analyze_vocabulary(text)
                elif analysis_type == 'pronunciation':
                    result = self.ai_manager.get_pronunciation_guide(text)

                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if result and result.get('success'):
                    self._save_single_ai_analysis(group, analysis_type, result)

                # –ü–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
                import time
                time.sleep(1)

            self.update_status(f"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è {analysis_type} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {total_groups} –≥—Ä—É–ø")

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó {analysis_type}: {e}")
            self.update_status(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó {analysis_type}: {e}")

    def _save_single_ai_analysis(self, group: Dict, analysis_type: str, result: Dict):
        """–ó–±–µ—Ä—ñ–≥–∞—î –æ–¥–∏–Ω–æ—á–Ω–∏–π AI –∞–Ω–∞–ª—ñ–∑"""
        try:
            group_text = group['combined_text']
            start_time = group['group_start_time']
            end_time = group['group_end_time']

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —â–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É
            if analysis_type == 'comprehensive':
                ai_response = json.dumps(result.get('analysis', {}))
            elif analysis_type == 'contextual':
                ai_response = result.get('explanation', '')
            elif analysis_type == 'vocabulary':
                ai_response = result.get('vocabulary_analysis', '')
            elif analysis_type == 'pronunciation':
                ai_response = result.get('pronunciation_guide', '')
            else:
                ai_response = str(result)

            self.data_manager.save_ai_response(
                sentence_text=group_text,
                video_filename=self.current_video,
                start_time=start_time,
                end_time=end_time,
                response_type=analysis_type,
                ai_response=ai_response,
                ai_client='llama3.1'
            )

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è {analysis_type} –∞–Ω–∞–ª—ñ–∑—É: {e}")

    # ===============================
    # –í–Ü–î–ï–û –¢–ê –ö–ê–î–†–ò
    # ===============================

    def extract_frames_for_current(self):
        """–í–∏—Ç—è–≥—É—î –∫–∞–¥—Ä–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—ñ–¥–µ–æ"""
        if not self.current_video:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–µ–æ")
            return

        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
                               f"–í–∏—Ç—è–≥—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–∞–¥—Ä–∏ –¥–ª—è {self.current_video}?"):
            threading.Thread(target=self.extract_frames_thread, daemon=True).start()

    def extract_frames_thread(self):
        """–í–∏—Ç—è–≥—É—î –∫–∞–¥—Ä–∏ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        try:
            self.update_status("–í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∫–∞–¥—Ä—ñ–≤...")

            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–µ–æ —Ñ–∞–π–ª
            video_path = f"videos/{self.current_video}"

            # –í–∏—Ç—è–≥—É—î–º–æ –∫–∞–¥—Ä–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –≥—Ä—É–ø–∏
            all_frames = []
            for group in self.current_groups:
                segments = group.get('segments', [])
                frames = self.video_processor.frame_extractor.extract_key_frames(
                    video_path, segments, max_frames_per_segment=5
                )
                all_frames.extend(frames)

            self.update_status(f"–í–∏—Ç—è–≥–Ω—É—Ç–æ {len(all_frames)} –∫–∞–¥—Ä—ñ–≤")

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∫–∞–¥—Ä—ñ–≤: {e}")
            self.update_status(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∫–∞–¥—Ä—ñ–≤: {e}")

    def analyze_frames_for_current(self):
        """–ê–Ω–∞–ª—ñ–∑—É—î –∫–∞–¥—Ä–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—ñ–¥–µ–æ"""
        if not self.current_video:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–µ–æ")
            return

        messagebox.showinfo("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
                            "–§—É–Ω–∫—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É –∫–∞–¥—Ä—ñ–≤ –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö.\n"
                            "–ü–æ–∫–∏ —â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π –±–∞–∑–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ (—è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å, —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å).")

    # ===============================
    # –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ê –ó–í–Ü–¢–ò
    # ===============================

    def show_video_statistics(self):
        """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ñ–¥–µ–æ –∑ –≥—Ä—É–ø–∞–º–∏"""
        if not self.current_groups:
            messagebox.showinfo("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ù–µ–º–∞—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –≥—Ä—É–ø")
            return

        try:
            stats = self.calculate_detailed_video_statistics()

            # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_window = tk.Toplevel(self.root)
            stats_window.title(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - {self.current_video}")
            stats_window.geometry("700x600")
            stats_window.resizable(True, True)

            # –°—Ç–≤–æ—Ä—é—î–º–æ Notebook –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            notebook = ttk.Notebook(stats_window)
            notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

            # –í–∫–ª–∞–¥–∫–∞ "–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
            general_tab = ttk.Frame(notebook)
            notebook.add(general_tab, text="–ó–∞–≥–∞–ª—å–Ω–∞")

            general_text = tk.Text(general_tab, wrap=tk.WORD, padx=10, pady=10)
            general_text.pack(fill=tk.BOTH, expand=True)
            general_text.insert(tk.END, stats['general_stats'])
            general_text.config(state=tk.DISABLED)

            # –í–∫–ª–∞–¥–∫–∞ "–ì—Ä—É–ø–∏"
            groups_tab = ttk.Frame(notebook)
            notebook.add(groups_tab, text="–ì—Ä—É–ø–∏")

            groups_text = tk.Text(groups_tab, wrap=tk.WORD, padx=10, pady=10)
            groups_text.pack(fill=tk.BOTH, expand=True)
            groups_text.insert(tk.END, stats['groups_stats'])
            groups_text.config(state=tk.DISABLED)

            # –í–∫–ª–∞–¥–∫–∞ "–ö–∞–¥—Ä–∏"
            frames_tab = ttk.Frame(notebook)
            notebook.add(frames_tab, text="–ö–∞–¥—Ä–∏")

            frames_text = tk.Text(frames_tab, wrap=tk.WORD, padx=10, pady=10)
            frames_text.pack(fill=tk.BOTH, expand=True)
            frames_text.insert(tk.END, stats['frames_stats'])
            frames_text.config(state=tk.DISABLED)

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è
            close_btn = ttk.Button(stats_window, text="–ó–∞–∫—Ä–∏—Ç–∏",
                                   command=stats_window.destroy)
            close_btn.pack(pady=10)

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

    def calculate_detailed_video_statistics(self) -> Dict:
        """–û–±—á–∏—Å–ª—é—î –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ñ–¥–µ–æ"""
        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_groups = len(self.current_groups)
        total_duration = sum(g.get('group_duration', 0) for g in self.current_groups)
        total_words = sum(g.get('word_count', 0) for g in self.current_groups)
        total_frames = sum(len(g.get('frames', [])) for g in self.current_groups)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
        difficulty_counts = {}
        for group in self.current_groups:
            difficulty = group.get('difficulty_level', 'intermediate').split()[0]
            difficulty_counts[difficulty] = difficulty_counts.get(difficulty, 0) + 1

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –≥—Ä—É–ø
        durations = [g.get('group_duration', 0) for g in self.current_groups]
        avg_duration = sum(durations) / len(durations) if durations else 0
        min_duration = min(durations) if durations else 0
        max_duration = max(durations) if durations else 0

        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        general_stats = f"""–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–µ–æ: {self.current_video}

üìä –ó–ê–ì–ê–õ–¨–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø:
‚Ä¢ –ì—Ä—É–ø: {total_groups}
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {format_duration(total_duration)}
‚Ä¢ –°–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≥—Ä—É–ø–∏: {format_duration(avg_duration)}
‚Ä¢ –ù–∞–π–∫–æ—Ä–æ—Ç—à–∞ –≥—Ä—É–ø–∞: {format_duration(min_duration)}
‚Ä¢ –ù–∞–π–¥–æ–≤—à–∞ –≥—Ä—É–ø–∞: {format_duration(max_duration)}
‚Ä¢ –ü–æ—Ä—ñ–≥ —Ç–∏—à—ñ: {self.silence_threshold} —Å–µ–∫

üìù –¢–ï–ö–°–¢–û–í–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤: {total_words:,}
‚Ä¢ –°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤ –Ω–∞ –≥—Ä—É–ø—É: {total_words / total_groups:.1f}
‚Ä¢ –°–ª—ñ–≤ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É: {total_words / (total_duration / 60):.1f}

üìä –†–û–ó–ü–û–î–Ü–õ –ó–ê –°–ö–õ–ê–î–ù–Ü–°–¢–Æ:"""

        for difficulty, count in difficulty_counts.items():
            percentage = (count / total_groups) * 100
            general_stats += f"\n‚Ä¢ {difficulty.title()}: {count} –≥—Ä—É–ø ({percentage:.1f}%)"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø
        groups_stats = "–î–ï–¢–ê–õ–¨–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ì–†–£–ü–ò:\n\n"
        for i, group in enumerate(self.current_groups):
            start_time = format_time(group.get('group_start_time', 0))
            duration = format_duration(group.get('group_duration', 0))
            words = group.get('word_count', 0)
            frames_count = len(group.get('frames', []))
            difficulty = group.get('difficulty_level', 'intermediate')

            groups_stats += f"üì¶ –ì—Ä—É–ø–∞ {i + 1}:\n"
            groups_stats += f"   ‚è∞ –ß–∞—Å: {start_time}, —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration}\n"
            groups_stats += f"   üìù –°–ª—ñ–≤: {words}, –∫–∞–¥—Ä—ñ–≤: {frames_count}\n"
            groups_stats += f"   üéØ –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: {difficulty}\n"
            groups_stats += f"   üìÑ –¢–µ–∫—Å—Ç: {group.get('combined_text', '')[:100]}...\n\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–¥—Ä—ñ–≤
        frames_stats = f"–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–î–†–Ü–í:\n\n"
        frames_stats += f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–¥—Ä—ñ–≤: {total_frames}\n"
        frames_stats += f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–¥—Ä—ñ–≤ –Ω–∞ –≥—Ä—É–ø—É: {total_frames / total_groups:.1f}\n"
        frames_stats += f"‚Ä¢ –ì—Ä—É–ø –∑ –∫–∞–¥—Ä–∞–º–∏: {len([g for g in self.current_groups if len(g.get('frames', [])) > 0])}\n"
        frames_stats += f"‚Ä¢ –ì—Ä—É–ø –±–µ–∑ –∫–∞–¥—Ä—ñ–≤: {len([g for g in self.current_groups if len(g.get('frames', [])) == 0])}\n\n"

        if total_frames > 0:
            frames_stats += "–î–ï–¢–ê–õ–¨–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ö–ê–î–†–ò:\n\n"
            for i, group in enumerate(self.current_groups):
                frames = group.get('frames', [])
                if frames:
                    frames_stats += f"üì¶ –ì—Ä—É–ø–∞ {i + 1}: {len(frames)} –∫–∞–¥—Ä—ñ–≤\n"
                    for j, frame in enumerate(frames):
                        timestamp = format_time(frame.get('timestamp', 0))
                        frames_stats += f"   üñºÔ∏è –ö–∞–¥—Ä {j + 1}: {timestamp}\n"
                    frames_stats += "\n"

        return {
            'general_stats': general_stats,
            'groups_stats': groups_stats,
            'frames_stats': frames_stats
        }

    def show_groups_statistics(self):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø –ø–æ –≤—Å—ñ—Ö –≤—ñ–¥–µ–æ"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ video processor
            stats = self.video_processor.get_processing_statistics()

            stats_text = f"""–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ì–†–£–ü–£–í–ê–ù–ù–Ø:

üìä –ó–ê–ì–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –í—ñ–¥–µ–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {stats.get('videos_processed', 0)}
‚Ä¢ –ì—Ä—É–ø —Å—Ç–≤–æ—Ä–µ–Ω–æ: {stats.get('groups_created', 0)}
‚Ä¢ –ö–∞–¥—Ä—ñ–≤ –≤–∏—Ç—è–≥–Ω—É—Ç–æ: {stats.get('frames_extracted', 0)}
‚Ä¢ –ß–∞—Å –æ–±—Ä–æ–±–∫–∏: {stats.get('processing_time', 0):.1f} —Å–µ–∫

‚öôÔ∏è –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø:
‚Ä¢ –ü–æ—Ç–æ—á–Ω–∏–π –ø–æ—Ä—ñ–≥ —Ç–∏—à—ñ: {self.silence_threshold} —Å–µ–∫
‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: {', '.join(self.video_processor.supported_formats)}

üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:
‚Ä¢ –ó–±—ñ–ª—å—à—É–π—Ç–µ –ø–æ—Ä—ñ–≥ —Ç–∏—à—ñ –¥–ª—è –º–µ–Ω—à–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–æ–≤—à–∏—Ö –≥—Ä—É–ø
‚Ä¢ –ó–º–µ–Ω—à—É–π—Ç–µ –ø–æ—Ä—ñ–≥ —Ç–∏—à—ñ –¥–ª—è –±—ñ–ª—å—à–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ—Ä–æ—Ç—à–∏—Ö –≥—Ä—É–ø
‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω: 3-8 —Å–µ–∫—É–Ω–¥"""

            messagebox.showinfo("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è", stats_text)

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø: {e}")
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

    # ===============================
    # –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –¢–ê –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
    # ===============================

    def configure_grouping(self):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è"""
        config_window = tk.Toplevel(self.root)
        config_window.title("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è")
        config_window.geometry("400x300")
        config_window.resizable(False, False)

        # –ü–æ—Ä—ñ–≥ —Ç–∏—à—ñ
        ttk.Label(config_window, text="–ü–æ—Ä—ñ–≥ —Ç–∏—à—ñ (—Å–µ–∫—É–Ω–¥–∏):").pack(pady=10)

        silence_var = tk.DoubleVar(value=self.silence_threshold)
        silence_scale = ttk.Scale(config_window, from_=1.0, to=15.0,
                                  variable=silence_var, orient=tk.HORIZONTAL)
        silence_scale.pack(fill=tk.X, padx=20, pady=5)

        silence_label = ttk.Label(config_window, text=f"{self.silence_threshold:.1f} —Å–µ–∫")
        silence_label.pack()

        def update_silence_label(val):
            silence_label.config(text=f"{float(val):.1f} —Å–µ–∫")

        silence_scale.config(command=update_silence_label)

        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(config_window)
        buttons_frame.pack(pady=20)

        def apply_settings():
            self.silence_threshold = silence_var.get()
            self.silence_var.set(self.silence_threshold)
            self.video_processor.segment_grouper.silence_threshold = self.silence_threshold
            messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω—ñ")
            config_window.destroy()

        ttk.Button(buttons_frame, text="–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏", command=apply_settings).pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons_frame, text="–°–∫–∞—Å—É–≤–∞—Ç–∏", command=config_window.destroy).pack(side=tk.LEFT, padx=5)

    def configure_ai(self):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è AI"""
        config_window = tk.Toplevel(self.root)
        config_window.title("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è AI")
        config_window.geometry("500x400")

        # –°—Ç–≤–æ—Ä—é—î–º–æ notebook –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        notebook = ttk.Notebook(config_window)
        notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # –í–∫–ª–∞–¥–∫–∞ "–ó–∞–≥–∞–ª—å–Ω—ñ"
        general_tab = ttk.Frame(notebook)
        notebook.add(general_tab, text="–ó–∞–≥–∞–ª—å–Ω—ñ")

        # –°—Ç–∞—Ç—É—Å AI
        status = self.ai_manager.get_enhanced_status()
        status_text = f"""–°—Ç–∞—Ç—É—Å AI: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω–∏–π' if status['available'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}
–ú–æ–¥–µ–ª—å: {status.get('model', '–ù–µ–≤—ñ–¥–æ–º–∞')}
–†—ñ–≤–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {status.get('user_level', 'intermediate')}
–ú–æ–≤–∞ –Ω–∞–≤—á–∞–Ω–Ω—è: {status.get('target_language', 'english')}"""

        ttk.Label(general_tab, text=status_text, justify=tk.LEFT).pack(pady=10)

        # –†—ñ–≤–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        ttk.Label(general_tab, text="–†—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó:").pack(anchor=tk.W, padx=10)
        level_var = tk.StringVar(value=status.get('user_level', 'intermediate'))
        level_combo = ttk.Combobox(general_tab, textvariable=level_var,
                                   values=['beginner', 'intermediate', 'advanced'],
                                   state='readonly')
        level_combo.pack(fill=tk.X, padx=10, pady=5)

        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(config_window)
        buttons_frame.pack(pady=10)

        def apply_ai_settings():
            new_level = level_var.get()
            self.ai_manager.update_user_level(new_level)
            messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è AI –∑–±–µ—Ä–µ–∂–µ–Ω—ñ")
            config_window.destroy()

        ttk.Button(buttons_frame, text="–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏", command=apply_ai_settings).pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons_frame, text="–°–∫–∞—Å—É–≤–∞—Ç–∏", command=config_window.destroy).pack(side=tk.LEFT, padx=5)

    def show_ai_status(self):
        """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å AI"""
        try:
            status = self.ai_manager.get_enhanced_status()
            recommendations = self.ai_manager.get_learning_recommendations()

            status_text = f"""–°–¢–ê–¢–£–° AI –°–ò–°–¢–ï–ú–ò:

ü§ñ –û–°–ù–û–í–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø:
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π' if status['available'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}
‚Ä¢ –ú–æ–¥–µ–ª—å: {status.get('model', '–ù–µ–≤—ñ–¥–æ–º–∞')}
‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤–∏–≤—á–µ–Ω–Ω—è –º–æ–≤–∏: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if status.get('language_learning_enabled') else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
‚Ä¢ –†—ñ–≤–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {status.get('user_level', 'intermediate').title()}
‚Ä¢ –ú–æ–≤–∞ –Ω–∞–≤—á–∞–Ω–Ω—è: {status.get('target_language', 'english').title()}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø:
‚Ä¢ –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç—ñ–≤: {status['usage_stats']['total_requests']}
‚Ä¢ –í—Å–µ–±—ñ—á–Ω–∏—Ö –∞–Ω–∞–ª—ñ–∑—ñ–≤: {status['usage_stats']['comprehensive_analyses']}
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å: {status['usage_stats']['contextual_explanations']}
‚Ä¢ –ê–Ω–∞–ª—ñ–∑—ñ–≤ –ª–µ–∫—Å–∏–∫–∏: {status['usage_stats']['vocabulary_analyses']}
‚Ä¢ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –∑ –≤–∏–º–æ–≤–∏: {status['usage_stats']['pronunciation_guides']}
‚Ä¢ –ü–æ–º–∏–ª–æ–∫: {status['usage_stats']['errors']}
‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {status['usage_stats']['average_response_time']:.2f} —Å–µ–∫

üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á –î–õ–Ø –ù–ê–í–ß–ê–ù–ù–Ø:"""

            for rec in recommendations['recommendations']:
                status_text += f"\n‚Ä¢ {rec['message']} (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {rec['priority']})"

            if status.get('features'):
                status_text += f"\n\nüîß –î–û–°–¢–£–ü–ù–Ü –§–£–ù–ö–¶–Ü–á:"
                for feature, enabled in status['features'].items():
                    status_icon = "‚úÖ" if enabled else "‚ùå"
                    status_text += f"\n‚Ä¢ {feature.replace('_', ' ').title()}: {status_icon}"

            messagebox.showinfo("–°—Ç–∞—Ç—É—Å AI", status_text)

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É —Å—Ç–∞—Ç—É—Å—É AI: {e}")
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å AI: {e}")

    def configure_video_processing(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ"""
        messagebox.showinfo("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
                            "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö.\n"
                            "–ü–æ–∫–∏ —â–æ –¥–æ—Å—Ç—É–ø–Ω—ñ: –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∫–∞–¥—Ä—ñ–≤ —Ç–∞ –±–∞–∑–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑.")

    # ===============================
    # –ï–ö–°–ü–û–†–¢/–Ü–ú–ü–û–†–¢
    # ===============================

    def export_groups(self):
        """–ï–∫—Å–ø–æ—Ä—Ç –≥—Ä—É–ø —É —Ñ–∞–π–ª"""
        if not self.current_groups:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ù–µ–º–∞—î –≥—Ä—É–ø –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É")
            return

        try:
            file_path = filedialog.asksaveasfilename(
                title="–ï–∫—Å–ø–æ—Ä—Ç –≥—Ä—É–ø",
                defaultextension=".json",
                filetypes=[("JSON —Ñ–∞–π–ª–∏", "*.json"), ("–í—Å—ñ —Ñ–∞–π–ª–∏", "*.*")]
            )

            if file_path:
                export_data = {
                    'video_filename': self.current_video,
                    'silence_threshold': self.silence_threshold,
                    'export_timestamp': datetime.now().isoformat(),
                    'groups': self.current_groups
                }

                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(export_data, f, ensure_ascii=False, indent=2)

                messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ì—Ä—É–ø–∏ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ –≤ {file_path}")

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –≥—Ä—É–ø: {e}")
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –≥—Ä—É–ø–∏: {e}")

    def import_groups(self):
        """–Ü–º–ø–æ—Ä—Ç –≥—Ä—É–ø –∑ —Ñ–∞–π–ª—É"""
        try:
            file_path = filedialog.askopenfilename(
                title="–Ü–º–ø–æ—Ä—Ç –≥—Ä—É–ø",
                filetypes=[("JSON —Ñ–∞–π–ª–∏", "*.json"), ("–í—Å—ñ —Ñ–∞–π–ª–∏", "*.*")]
            )

            if file_path:
                with open(file_path, 'r', encoding='utf-8') as f:
                    import_data = json.load(f)

                groups = import_data.get('groups', [])
                video_filename = import_data.get('video_filename', 'imported_video')

                if groups:
                    self.display_groups(groups, video_filename)
                    messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {len(groups)} –≥—Ä—É–ø")
                else:
                    messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–§–∞–π–ª –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –≥—Ä—É–ø")

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –≥—Ä—É–ø: {e}")
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –≥—Ä—É–ø–∏: {e}")

    # ===============================
    # –û–ë–†–û–ë–ö–ê –í–Ü–î–ï–û
    # ===============================

    def regroup_current_video(self):
        """–ü–µ—Ä–µ–≥—Ä—É–ø–æ–≤—É—î –ø–æ—Ç–æ—á–Ω–µ –≤—ñ–¥–µ–æ –∑ –Ω–æ–≤–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏"""
        if not self.current_video:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–µ–æ")
            return

        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
                               f"–ü–µ—Ä–µ–≥—Ä—É–ø—É–≤–∞—Ç–∏ {self.current_video} –∑ –ø–æ—Ä–æ–≥–æ–º —Ç–∏—à—ñ {self.silence_threshold}—Å?"):
            threading.Thread(target=self.regroup_video_thread, daemon=True).start()

    def regroup_video_thread(self):
        """–ü–µ—Ä–µ–≥—Ä—É–ø–æ–≤—É—î –≤—ñ–¥–µ–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        try:
            self.update_status("–ü–µ—Ä–µ–≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ...")

            # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ —Å–µ–≥–º–µ–Ω—Ç–∏ –∑ –ë–î
            from processing.database_manager import DatabaseManager
            db_manager = DatabaseManager()

            videos = db_manager.get_all_videos()
            video = next((v for v in videos if v['filename'] == self.current_video), None)

            if video:
                segments = db_manager.get_video_segments(video['id'])

                # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ –≥—Ä—É–ø–∏ –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º –ø–æ—Ä–æ–≥–æ–º
                new_groups = self.video_processor.segment_grouper.group_segments_by_silence(segments)

                # –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                self.root.after(0, lambda: self.display_groups(new_groups, self.current_video))
                self.update_status(f"–°—Ç–≤–æ—Ä–µ–Ω–æ {len(new_groups)} –Ω–æ–≤–∏—Ö –≥—Ä—É–ø")
            else:
                self.update_status("–í—ñ–¥–µ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≥—Ä—É–ø—É–≤–∞–Ω–Ω—è: {e}")
            self.update_status(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≥—Ä—É–ø—É–≤–∞–Ω–Ω—è: {e}")

    def process_current_video(self):
        """–û–±—Ä–æ–±–ª—è—î –ø–æ—Ç–æ—á–Ω–µ –≤—ñ–¥–µ–æ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏"""
        if not self.current_video:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–µ–æ")
            return

        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
                               f"–ü–µ—Ä–µ–æ–±—Ä–æ–±–∏—Ç–∏ {self.current_video} –∑ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è–º –∫–∞–¥—Ä—ñ–≤ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –≥—Ä—É–ø?"):
            threading.Thread(target=self.process_current_video_thread, daemon=True).start()

    def process_current_video_thread(self):
        """–û–±—Ä–æ–±–ª—è—î –ø–æ—Ç–æ—á–Ω–µ –≤—ñ–¥–µ–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        try:
            from datetime import datetime

            self.update_status(f"–†–æ–∑—à–∏—Ä–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ {self.current_video}...")

            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ñ–∞–π–ª
            videos_dir = Path("videos")
            video_path = videos_dir / self.current_video

            if video_path.exists():
                video_info = {
                    "filename": self.current_video,
                    "filepath": str(video_path),
                    "size": video_path.stat().st_size,
                    "modified": datetime.fromtimestamp(video_path.stat().st_mtime),
                    "extension": video_path.suffix.lower()
                }

                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
                result = self.video_processor.process_single_video_enhanced(video_info)

                if result['success']:
                    message = f"–û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
                    message += f"‚Ä¢ {result['groups_count']} –≥—Ä—É–ø —Å—Ç–≤–æ—Ä–µ–Ω–æ\n"
                    message += f"‚Ä¢ {result['frames_count']} –∫–∞–¥—Ä—ñ–≤ –≤–∏—Ç—è–≥–Ω—É—Ç–æ\n"
                    message += f"‚Ä¢ {result['segments_count']} —Å–µ–≥–º–µ–Ω—Ç—ñ–≤ –æ–±—Ä–æ–±–ª–µ–Ω–æ"

                    self.update_status("–û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")

                    # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≥—Ä—É–ø–∏
                    self.root.after(0, lambda: self.load_groups_for_video(self.current_video))

                    # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    self.root.after(1000, lambda: messagebox.showinfo("–£—Å–ø—ñ—Ö", message))
                else:
                    self.update_status(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {result['error']}")
            else:
                self.update_status("–§–∞–π–ª –≤—ñ–¥–µ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ: {error_msg}")
            self.update_status(f"–ü–æ–º–∏–ª–∫–∞: {error_msg}")

    def process_all_videos(self):
        """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ –≤—ñ–¥–µ–æ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏"""
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
                               "–û–±—Ä–æ–±–∏—Ç–∏ –≤—Å—ñ –≤—ñ–¥–µ–æ –∑ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è–º –∫–∞–¥—Ä—ñ–≤ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –≥—Ä—É–ø?\n"
                               "–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –±–∞–≥–∞—Ç–æ —á–∞—Å—É."):
            threading.Thread(target=self.process_all_videos_thread, daemon=True).start()

    def process_all_videos_thread(self):
        """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ –≤—ñ–¥–µ–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        try:
            self.update_status("–†–æ–∑—à–∏—Ä–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –≤—ñ–¥–µ–æ...")

            # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
            self.root.after(0, lambda: self.progress_bar.pack(side=tk.RIGHT, padx=10, pady=2))

            # –°–∫–∞–Ω—É—î–º–æ –≤—ñ–¥–µ–æ —Ñ–∞–π–ª–∏
            video_files = self.video_processor.scan_videos_directory()

            processed_count = 0
            total_groups = 0
            total_frames = 0

            for video_info in video_files:
                self.update_status(f"–û–±—Ä–æ–±–∫–∞ {video_info['filename']}...")

                result = self.video_processor.process_single_video_enhanced(video_info)

                if result['success']:
                    processed_count += 1
                    total_groups += result['groups_count']
                    total_frames += result['frames_count']

            # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
            self.root.after(0, lambda: self.progress_bar.pack_forget())

            message = f"–û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
            message += f"‚Ä¢ {processed_count} –≤—ñ–¥–µ–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ\n"
            message += f"‚Ä¢ {total_groups} –≥—Ä—É–ø —Å—Ç–≤–æ—Ä–µ–Ω–æ\n"
            message += f"‚Ä¢ {total_frames} –∫–∞–¥—Ä—ñ–≤ –≤–∏—Ç—è–≥–Ω—É—Ç–æ"

            self.update_status("–û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –≤—ñ–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            self.root.after(0, self.refresh_videos)
            self.root.after(1000, lambda: messagebox.showinfo("–£—Å–ø—ñ—Ö", message))

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—Å—ñ—Ö –≤—ñ–¥–µ–æ: {e}")
            self.update_status(f"–ü–æ–º–∏–ª–∫–∞: {e}")
            self.root.after(0, lambda: self.progress_bar.pack_forget())

    def add_video_file(self):
        """–î–æ–¥–∞—î –Ω–æ–≤–∏–π –≤—ñ–¥–µ–æ —Ñ–∞–π–ª –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é"""
        file_path = filedialog.askopenfilename(
            title="–í–∏–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–µ–æ —Ñ–∞–π–ª",
            filetypes=[
                ("–í—ñ–¥–µ–æ —Ñ–∞–π–ª–∏", "*.mkv *.mp4 *.avi *.mov *.wmv"),
                ("MKV —Ñ–∞–π–ª–∏", "*.mkv"),
                ("MP4 —Ñ–∞–π–ª–∏", "*.mp4"),
                ("–í—Å—ñ —Ñ–∞–π–ª–∏", "*.*")
            ]
        )

        if file_path:
            threading.Thread(target=self.add_and_process_video_enhanced,
                             args=(file_path,), daemon=True).start()

    def add_and_process_video_enhanced(self, file_path: str):
        """–î–æ–¥–∞—î —Ç–∞ –æ–±—Ä–æ–±–ª—è—î –Ω–æ–≤–∏–π –≤—ñ–¥–µ–æ —Ñ–∞–π–ª –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏"""
        try:
            import shutil
            from datetime import datetime

            self.update_status("–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ —Ñ–∞–π–ª—É...")

            # –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª
            videos_dir = Path("videos")
            videos_dir.mkdir(exist_ok=True)

            filename = Path(file_path).name
            destination = videos_dir / filename

            shutil.copy2(file_path, destination)

            # –†–æ–∑—à–∏—Ä–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞
            self.update_status("–†–æ–∑—à–∏—Ä–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ –≤—ñ–¥–µ–æ...")

            video_info = {
                "filename": filename,
                "filepath": str(destination),
                "size": destination.stat().st_size,
                "modified": datetime.fromtimestamp(destination.stat().st_mtime),
                "extension": destination.suffix.lower()
            }

            result = self.video_processor.process_single_video_enhanced(video_info)

            if result['success']:
                message = f"–í—ñ–¥–µ–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ:\n"
                message += f"‚Ä¢ {result['groups_count']} –≥—Ä—É–ø —Å—Ç–≤–æ—Ä–µ–Ω–æ\n"
                message += f"‚Ä¢ {result['frames_count']} –∫–∞–¥—Ä—ñ–≤ –≤–∏—Ç—è–≥–Ω—É—Ç–æ\n"
                message += f"‚Ä¢ {result['segments_count']} —Å–µ–≥–º–µ–Ω—Ç—ñ–≤ –æ–±—Ä–æ–±–ª–µ–Ω–æ"

                self.update_status("–ù–æ–≤–µ –≤—ñ–¥–µ–æ –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
                self.root.after(0, self.refresh_videos)
                self.root.after(1000, lambda: messagebox.showinfo("–£—Å–ø—ñ—Ö", message))
            else:
                self.update_status(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {result['error']}")

        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ: {error_msg}")
            self.update_status(f"–ü–æ–º–∏–ª–∫–∞: {error_msg}")

    # ===============================
    # –î–û–ü–û–ú–Ü–ñ–ù–Ü –ú–ï–¢–û–î–ò
    # ===============================

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞—î –≥–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–∏"""
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        self.root.mainloop()

    def create_status_bar(self):
        """–°—Ç–≤–æ—Ä—é—î —Å—Ç–∞—Ç—É—Å –±–∞—Ä"""
        status_frame = ttk.Frame(self.root)
        status_frame.pack(side=tk.BOTTOM, fill=tk.X)

        # –û—Å–Ω–æ–≤–Ω–∏–π —Å—Ç–∞—Ç—É—Å
        self.status_var = tk.StringVar()
        self.status_var.set("–ì–æ—Ç–æ–≤–æ")

        self.status_label = ttk.Label(
            status_frame,
            textvariable=self.status_var,
            relief=tk.SUNKEN,
            anchor=tk.W
        )
        self.status_label.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=2, pady=2)

        # –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(
            status_frame,
            variable=self.progress_var,
            length=200
        )

    def setup_styles(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î —Å—Ç–∏–ª—ñ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        style = ttk.Style()

        try:
            style.theme_use('vista')
        except:
            try:
                style.theme_use('clam')
            except:
                pass

        # –ö–∞—Å—Ç–æ–º–Ω—ñ —Å—Ç–∏–ª—ñ
        style.configure("Title.TLabel", font=("Arial", 16, "bold"))
        style.configure("Header.TLabel", font=("Arial", 12, "bold"))

    def load_initial_data(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ"""
        try:
            self.status_var.set("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...")

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –Ω–æ–≤—ñ –≤—ñ–¥–µ–æ
            threading.Thread(target=self.auto_process_videos, daemon=True).start()

            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–µ–æ
            self.refresh_videos()

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö: {e}")
            self.status_var.set(f"–ü–æ–º–∏–ª–∫–∞: {e}")

    def auto_process_videos(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–æ–±–ª—è—î –Ω–æ–≤—ñ/–∑–º—ñ–Ω–µ–Ω—ñ –≤—ñ–¥–µ–æ"""
        try:
            self.update_status("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –≤—ñ–¥–µ–æ...")

            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–æ–±–∫–∏
            stats = self.video_processor.get_processing_statistics()

            if stats.get('videos_processed', 0) > 0:
                message = f"–ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏—Ö –≤—ñ–¥–µ–æ: {stats['videos_processed']}"
                self.root.after(0, lambda: self.status_var.set(message))
                self.root.after(0, self.refresh_videos)
            else:
                self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤–æ"))

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ: {e}")
            self.root.after(0, lambda: self.status_var.set("–ì–æ—Ç–æ–≤–æ"))

    def update_status(self, message: str):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å"""
        self.root.after(0, lambda: self.status_var.set(message))

    def update_ai_status(self):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å AI"""
        try:
            if self.ai_manager.is_available():
                status = self.ai_manager.get_enhanced_status()
                model = status.get('model', 'unknown')
                level = status.get('user_level', 'intermediate')
                self.ai_status_label.config(text=f"ü§ñ AI: {model} ({level})", foreground="green")
            else:
                self.ai_status_label.config(text="ü§ñ AI: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π", foreground="red")
        except Exception as e:
            self.ai_status_label.config(text="ü§ñ AI: –ü–æ–º–∏–ª–∫–∞", foreground="red")

    def on_closing(self):
        """–ë–µ–∑–ø–µ—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
        try:
            self.logger.info("–ó–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≥—Ä–∞–º–∏...")

            # –°–∫–∞—Å–æ–≤—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤
            if self.is_creating_widgets:
                self.widgets_creation_cancelled = True

            # –û—á–∏—â–∞—î–º–æ –≤—ñ–¥–∂–µ—Ç–∏
            self.clear_groups()

            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—ñ–∫–Ω–æ
            self.root.quit()
            self.root.destroy()

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ: {e}")
            try:
                self.root.destroy()
            except:
                pass

    # –ú–µ—Ç–æ–¥–∏ –¥–æ–≤—ñ–¥–∫–∏
    def show_user_guide(self):
        """–ü–æ–∫–∞–∑—É—î –∫–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        guide_text = """–ö–ï–†–Ü–í–ù–ò–¶–¢–í–û –ö–û–†–ò–°–¢–£–í–ê–ß–ê Game Learning 3.0

üöÄ –û–°–ù–û–í–ù–Ü –§–£–ù–ö–¶–Ü–á:
‚Ä¢ –†–æ–∑—É–º–Ω–µ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è —Ä–µ—á–µ–Ω—å –ø–æ –ø–∞—É–∑–∞—Ö
‚Ä¢ –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –∞–Ω–∞–ª—ñ–∑ –∫–∞–¥—Ä—ñ–≤ –∑ –≤—ñ–¥–µ–æ  
‚Ä¢ 4 —Ç–∏–ø–∏ AI –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è –∫–æ–∂–Ω–æ—ó –≥—Ä—É–ø–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –Ω–æ—Ç–∞—Ç–æ–∫ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∑–æ–±—Ä–∞–∂–µ–Ω—å

üì¶ –†–û–ë–û–¢–ê –ó –ì–†–£–ü–ê–ú–ò:
‚Ä¢ –ì—Ä—É–ø–∏ —Å—Ç–≤–æ—Ä—é—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–∞—É–∑ ‚â•5—Å
‚Ä¢ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–æ—Ä—ñ–≥ —Ç–∏—à—ñ –≤ –≤–µ—Ä—Ö–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è –ø–æ—à—É–∫—É –≥—Ä—É–ø
‚Ä¢ –ö–ª—ñ–∫–Ω—ñ—Ç—å "–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ" –¥–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –≥—Ä—É–ø–∏

ü§ñ AI –ê–ù–ê–õ–Ü–ó:
‚Ä¢ –í—Å–µ–±—ñ—á–Ω–∏–π - –ø–æ–≤–Ω–∏–π –≥—Ä–∞–º–∞—Ç–∏—á–Ω–∏–π —Ç–∞ –ª–µ–∫—Å–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∏–π - –ø–æ—è—Å–Ω–µ–Ω–Ω—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –¥—ñ–∞–ª–æ–≥—É
‚Ä¢ –õ–µ–∫—Å–∏—á–Ω–∏–π - –¥–µ—Ç–∞–ª—å–Ω–∏–π —Ä–æ–∑–±—ñ—Ä —Å–ª–æ–≤–Ω–∏–∫–æ–≤–æ–≥–æ –∑–∞–ø–∞—Å—É
‚Ä¢ –§–æ–Ω–µ—Ç–∏—á–Ω–∏–π - —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –≤–∏–º–æ–≤–∏

üñºÔ∏è –ö–ê–î–†–ò –ó –í–Ü–î–ï–û:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏—Ç—è–≥—É—é—Ç—å—Å—è –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ
‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ –∫–∞–¥—Ä–∏ –≤ –≥—Ä—É–ø–∞—Ö
‚Ä¢ –ó–±—ñ–ª—å—à—É–π—Ç–µ –∫–∞–¥—Ä–∏ –ø–æ–¥–≤—ñ–π–Ω–∏–º –∫–ª—ñ–∫–æ–º

üìù –ù–û–¢–ê–¢–ö–ò:
‚Ä¢ –î–æ–¥–∞–≤–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ñ –∑–∞–º—ñ—Ç–∫–∏
‚Ä¢ –ü—Ä–∏–∫—Ä—ñ–ø–ª—é–π—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó

‚öôÔ∏è –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø:
‚Ä¢ –ú–µ–Ω—é "–ì—Ä—É–ø—É–≤–∞–Ω–Ω—è" - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Ä–æ–≥—É —Ç–∏—à—ñ
‚Ä¢ –ú–µ–Ω—é "AI" - —Ä—ñ–≤–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó
‚Ä¢ –ú–µ–Ω—é "–í—ñ–¥–µ–æ" - –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ–±—Ä–æ–±–∫–∏ –∫–∞–¥—Ä—ñ–≤"""

        messagebox.showinfo("–ö–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", guide_text)

    def show_shortcuts(self):
        """–ü–æ–∫–∞–∑—É—î –≥–∞—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à—ñ"""
        shortcuts_text = """–ì–ê–†–Ø–ß–Ü –ö–õ–ê–í–Ü–®–Ü:

üé¨ –í–Ü–î–ï–û:
‚Ä¢ F5 - –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–µ–æ
‚Ä¢ Ctrl+O - –î–æ–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ —Ñ–∞–π–ª
‚Ä¢ Ctrl+P - –û–±—Ä–æ–±–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –≤—ñ–¥–µ–æ
‚Ä¢ Ctrl+Shift+P - –û–±—Ä–æ–±–∏—Ç–∏ –≤—Å—ñ –≤—ñ–¥–µ–æ

ü§ñ AI:
‚Ä¢ Ctrl+1 - –í—Å–µ–±—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
‚Ä¢ Ctrl+2 - –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑  
‚Ä¢ Ctrl+3 - –ê–Ω–∞–ª—ñ–∑ –ª–µ–∫—Å–∏–∫–∏
‚Ä¢ Ctrl+4 - –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∑ –≤–∏–º–æ–≤–∏

üì¶ –ì–†–£–ü–ò:
‚Ä¢ Space - –†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏/–∑–≥–æ—Ä–Ω—É—Ç–∏ –≥—Ä—É–ø—É
‚Ä¢ Ctrl+C - –ö–æ–ø—ñ—é–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –≥—Ä—É–ø–∏
‚Ä¢ Enter - –í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –≤—ñ–¥–µ–æ –∑ –≥—Ä—É–ø–∏

üìù –ù–û–¢–ê–¢–ö–ò:
‚Ä¢ Ctrl+S - –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É
‚Ä¢ Ctrl+Shift+C - –ö–æ–ø—ñ—é–≤–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É

‚öôÔ∏è –Ü–ù–®–ï:
‚Ä¢ F1 - –¶–µ –≤—ñ–∫–Ω–æ
‚Ä¢ Ctrl+, - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
‚Ä¢ Ctrl+Q - –í–∏—Ö—ñ–¥"""

        messagebox.showinfo("–ì–∞—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à—ñ", shortcuts_text)

    def about_dialog(self):
        """–ü–æ–∫–∞–∑—É—î –¥—ñ–∞–ª–æ–≥ –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É"""
        about_text = """Game Learning 3.0

üéØ –†–æ–∑—É–º–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏ —á–µ—Ä–µ–∑ –≤—ñ–¥–µ–æ

üÜï –ù–û–í–Ü –§–£–ù–ö–¶–Ü–á:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ –ø–∞—É–∑–∞—Ö
‚Ä¢ –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –∞–Ω–∞–ª—ñ–∑ –∫–∞–¥—Ä—ñ–≤
‚Ä¢ 4 —Ç–∏–ø–∏ AI –∞–Ω–∞–ª—ñ–∑—É
‚Ä¢ –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–æ—Ç–∞—Ç–æ–∫
‚Ä¢ –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è

üõ†Ô∏è –¢–ï–•–ù–û–õ–û–ì–Ü–á:
‚Ä¢ Python 3.11+
‚Ä¢ OpenAI Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
‚Ä¢ Ollama + Llama –¥–ª—è AI –∞–Ω–∞–ª—ñ–∑—É
‚Ä¢ OpenCV –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–∞–¥—Ä—ñ–≤
‚Ä¢ SQLite –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö

üë®‚Äçüíª –†–û–ó–†–û–ë–ö–ê:
‚Ä¢ –í–µ—Ä—Å—ñ—è: 3.0
‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: Enhanced Group Learning
‚Ä¢ –õ—ñ—Ü–µ–Ω–∑—ñ—è: MIT

üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Ä–æ–∑—Ä–æ–±–∫–∞ –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–≤—á–µ–Ω–Ω—è –º–æ–≤–∏!

üîó GitHub: https://github.com/your-repo
üìß Email: your-email@example.com"""

        messagebox.showinfo("–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É", about_text)


# ==============================================================
# –¢–ï–°–¢–£–í–ê–ù–ù–Ø –¢–ê –ó–ê–ü–£–°–ö
# ==============================================================

if __name__ == "__main__":
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞"""

    print("üöÄ –ó–∞–ø—É—Å–∫ Game Learning 3.0 - Enhanced Group Learning")
    print("=" * 60)
    print("‚úÖ –†–æ–∑—É–º–Ω–µ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è —Ä–µ—á–µ–Ω—å –ø–æ –ø–∞—É–∑–∞—Ö")
    print("‚úÖ –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –∞–Ω–∞–ª—ñ–∑ –∫–∞–¥—Ä—ñ–≤ –∑ –≤—ñ–¥–µ–æ")
    print("‚úÖ 4 —Ç–∏–ø–∏ AI –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è –∫–æ–∂–Ω–æ—ó –≥—Ä—É–ø–∏")
    print("‚úÖ –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–æ—Ç–∞—Ç–æ–∫")
    print("‚úÖ –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è")
    print("=" * 60)

    try:
        app = UpdatedMainWindow()
        app.run()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏: {e}")
        import traceback

        traceback.print_exc()
        analysis_submenu.add_command(label="–ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ñ –ø–æ—è—Å–Ω–µ–Ω–Ω—è", command=self.generate_contextual_for_all)
        analysis_submenu.add_command(label="–ê–Ω–∞–ª—ñ–∑ –ª–µ–∫—Å–∏–∫–∏", command=self.generate_vocabulary_for_all)
        analysis_submenu.add_command(label="–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑ –≤–∏–º–æ–≤–∏", command=self.generate_pronunciation_for_all)

        ai_menu.add_separator()
        ai_menu.add_command(label="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è AI...", command=self.configure_ai)
        ai_menu.add_command(label="–°—Ç–∞—Ç—É—Å AI", command=self.show_ai_status)

        # –ú–µ–Ω—é –í—ñ–¥–µ–æ
        video_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–í—ñ–¥–µ–æ", menu=video_menu)
        video_menu.add_command(label="–í–∏—Ç—è–≥—Ç–∏ –∫–∞–¥—Ä–∏", command=self.extract_frames_for_current)
        video_menu.add_command(label="–ê–Ω–∞–ª—ñ–∑ –∫–∞–¥—Ä—ñ–≤", command=self.analyze_frames_for_current)
        video_menu.add_separator()
        video_menu.add_command(label="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ...", command=self.configure_video_processing)

        # –ú–µ–Ω—é –î–æ–ø–æ–º–æ–≥–∞
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–î–æ–ø–æ–º–æ–≥–∞", menu=help_menu)
        help_menu.add_command(label="–ö–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", command=self.show_user_guide)
        help_menu.add_command(label="–ì–∞—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à—ñ", command=self.show_shortcuts)
        help_menu.add_separator()
        help_menu.add_command(label="–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É", command=self.about_dialog)


    def create_top_panel(self):
        """–°—Ç–≤–æ—Ä—é—î –≤–µ—Ä—Ö–Ω—é –ø–∞–Ω–µ–ª—å –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏"""
        top_frame = ttk.Frame(self.root)
        top_frame.pack(fill=tk.X, padx=10, pady=5)

        # –õ–µ–π–±–ª —Ç–∞ –∫–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –≤–∏–±–æ—Ä—É –≤—ñ–¥–µ–æ
        video_frame = ttk.Frame(top_frame)
        video_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)

        ttk.Label(video_frame, text="üìπ –í—ñ–¥–µ–æ:", font=("Arial", 12)).pack(side=tk.LEFT, padx=(0, 10))

        self.video_var = tk.StringVar()
        self.video_combo = ttk.Combobox(
            video_frame,
            textvariable=self.video_var,
            state="readonly",
            width=50,
            font=("Arial", 11)
        )
        self.video_combo.pack(side=tk.LEFT, padx=(0, 10))
        self.video_combo.bind('<<ComboboxSelected>>', self.on_video_selected)

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è
        grouping_frame = ttk.LabelFrame(top_frame, text="–ì—Ä—É–ø—É–≤–∞–Ω–Ω—è")
        grouping_frame.pack(side=tk.LEFT, padx=(10, 0))

        ttk.Label(grouping_frame, text="–¢–∏—à–∞ (—Å–µ–∫):").pack(side=tk.LEFT, padx=5)

        self.silence_var = tk.DoubleVar(value=self.silence_threshold)
        silence_spin = ttk.Spinbox(
            grouping_frame,
            from_=1.0, to=15.0, increment=0.5,
            textvariable=self.silence_var,
            width=8,
            command=self.on_silence_threshold_changed
        )
        silence_spin.pack(side=tk.LEFT, padx=5)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        buttons_frame = ttk.Frame(top_frame)
        buttons_frame.pack(side=tk.RIGHT)

        ttk.Button(buttons_frame, text="üîÑ –û–Ω–æ–≤–∏—Ç–∏",
                   command=self.refresh_videos, width=10).pack(side=tk.LEFT, padx=2)

        ttk.Button(buttons_frame, text="‚öôÔ∏è –û–±—Ä–æ–±–∏—Ç–∏",
                   command=self.process_current_video, width=10).pack(side=tk.LEFT, padx=2)

        ttk.Button(buttons_frame, text="üß† AI –¥–ª—è –≤—Å—ñ—Ö",
                   command=self.generate_ai_for_current_video, width=12).pack(side=tk.LEFT, padx=2)

        ttk.Button(buttons_frame, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                   command=self.show_video_statistics, width=12).pack(side=tk.LEFT, padx=2)

        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        self.cancel_button = ttk.Button(buttons_frame, text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
                                        command=self.cancel_widget_creation, state=tk.DISABLED)
        self.cancel_button.pack(side=tk.LEFT, padx=2)

        # –°—Ç–∞—Ç—É—Å AI
        ai_status_frame = ttk.Frame(top_frame)
        ai_status_frame.pack(side=tk.RIGHT, padx=(10, 0))

        self.ai_status_label = ttk.Label(ai_status_frame, text="", font=("Arial", 9))
        self.ai_status_label.pack()

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å AI
        self.update_ai_status()


    def create_main_area(self):
        """–°—Ç–≤–æ—Ä—é—î –≥–æ–ª–æ–≤–Ω—É —Ä–æ–±–æ—á—É –æ–±–ª–∞—Å—Ç—å"""
        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.root)
        main_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # Paned Window –¥–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –ª—ñ–≤—É —Ç–∞ –ø—Ä–∞–≤—É —á–∞—Å—Ç–∏–Ω–∏
        self.paned_window = ttk.PanedWindow(main_container, orient=tk.HORIZONTAL)
        self.paned_window.pack(fill=tk.BOTH, expand=True)

        # –õ—ñ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - –≥—Ä—É–ø–∏ (75%)
        self.create_groups_panel()

        # –ü—Ä–∞–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - –Ω–æ—Ç–∞—Ç–∫–∏ (25%)
        self.create_notes_panel()

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó
        self.root.after(100, lambda: self.paned_window.sashpos(0, 1200))


    def create_groups_panel(self):
        """–°—Ç–≤–æ—Ä—é—î –ø–∞–Ω–µ–ª—å –∑ –≥—Ä—É–ø–∞–º–∏"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≥—Ä—É–ø
        groups_frame = ttk.Frame(self.paned_window)
        self.paned_window.add(groups_frame, weight=7)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
        header_frame = ttk.Frame(groups_frame)
        header_frame.pack(fill=tk.X, pady=(0, 5))

        self.groups_title = ttk.Label(
            header_frame,
            text="üì¶ –ì—Ä—É–ø–∏ (–æ–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–µ–æ)",
            font=("Arial", 14, "bold")
        )
        self.groups_title.pack(side=tk.LEFT)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø
        self.groups_stats = ttk.Label(
            header_frame,
            text="",
            font=("Arial", 10)
        )
        self.groups_stats.pack(side=tk.RIGHT)

        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –ø–∞–Ω–µ–ª—å
        info_frame = ttk.Frame(groups_frame)
        info_frame.pack(fill=tk.X, pady=(0, 5))

        self.grouping_info = ttk.Label(
            info_frame,
            text="üí° –ì—Ä—É–ø–∏ —Å—Ç–≤–æ—Ä—é—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–∞—É–∑ –º—ñ–∂ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏",
            font=("Arial", 9),
            foreground="gray"
        )
        self.grouping_info.pack(side=tk.LEFT)

        # –§—ñ–ª—å—Ç—Ä–∏ —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        filters_frame = ttk.Frame(groups_frame)
        filters_frame.pack(fill=tk.X, pady=(0, 5))

        ttk.Label(filters_frame, text="–§—ñ–ª—å—Ç—Ä:").pack(side=tk.LEFT, padx=(0, 5))

        self.filter_var = tk.StringVar()
        filter_combo = ttk.Combobox(
            filters_frame,
            textvariable=self.filter_var,
            values=["–í—Å—ñ –≥—Ä—É–ø–∏", "–õ–µ–≥–∫—ñ", "–°–µ—Ä–µ–¥–Ω—ñ", "–°–∫–ª–∞–¥–Ω—ñ", "–ó –∫–∞–¥—Ä–∞–º–∏", "–ë–µ–∑ –∫–∞–¥—Ä—ñ–≤"],
            state="readonly",
            width=15
        )
        filter_combo.pack(side=tk.LEFT, padx=(0, 10))
        filter_combo.bind('<<ComboboxSelected>>', self.apply_groups_filter)

        ttk.Label(filters_frame, text="–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:").pack(side=tk.LEFT, padx=(10, 5))

        self.sort_var = tk.StringVar()
        sort_combo = ttk.Combobox(
            filters_frame,
            textvariable=self.sort_var,
            values=["–ó–∞ —á–∞—Å–æ–º", "–ó–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—é", "–ó–∞ –¥–æ–≤–∂–∏–Ω–æ—é", "–ó–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Å–ª—ñ–≤"],
            state="readonly",
            width=15
        )
        sort_combo.pack(side=tk.LEFT)
        sort_combo.bind('<<ComboboxSelected>>', self.apply_groups_sorting)

        # Canvas –∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é –¥–ª—è –≥—Ä—É–ø
        self.create_groups_scroll_area(groups_frame)


    def create_groups_scroll_area(self, parent):
        """–°—Ç–≤–æ—Ä—é—î –æ–±–ª–∞—Å—Ç—å –∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é –¥–ª—è –≥—Ä—É–ø"""
        # Canvas —Ç–∞ Scrollbar
        self.groups_canvas = tk.Canvas(parent, bg="white", highlightthickness=0)
        groups_scrollbar = ttk.Scrollbar(parent, orient="vertical",
                                         command=self.groups_canvas.yview)

        self.groups_scrollable_frame = ttk.Frame(self.groups_canvas)

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.groups_scrollable_frame.bind(
            "<Configure>",
            lambda e: self.groups_canvas.configure(
                scrollregion=self.groups_canvas.bbox("all")
            )
        )

        self.groups_canvas.create_window(
            (0, 0),
            window=self.groups_scrollable_frame,
            anchor="nw"
        )
        self.groups_canvas.configure(yscrollcommand=groups_scrollbar.set)

        # –ü—Ä–∏–≤'—è–∑–∫–∞ –∫–æ–ª–µ—Å–∞ –º–∏—à—ñ
        self.groups_canvas.bind_all("<MouseWheel>", self._on_groups_mousewheel)

        # –ü–∞–∫—É–≤–∞–Ω–Ω—è
        self.groups_canvas.pack(side="left", fill="both", expand=True)
        groups_scrollbar.pack(side="right", fill="y")


    def _on_groups_mousewheel(self, event):
        """–û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –º–∏—à–∫–æ—é –¥–ª—è –≥—Ä—É–ø"""
        self.groups_canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")


    def create_notes_panel(self):
        """–°—Ç–≤–æ—Ä—é—î –ø–∞–Ω–µ–ª—å –Ω–æ—Ç–∞—Ç–æ–∫"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–æ—Ç–∞—Ç–æ–∫
        notes_frame = ttk.Frame(self.paned_window)
        self.paned_window.add(notes_frame, weight=3)

        # –°—Ç–≤–æ—Ä—é—î–º–æ NotesPanel
        self.notes_panel = NotesPanel(
            parent_frame=notes_frame,
            data_manager=self.data_manager,
            on_note_changed=self.on_note_changed
        )

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        self.notes_panel.main_window = self


    def display_groups(self, groups: List[Dict], filename: str):
        """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≥—Ä—É–ø–∏ –∑–∞–º—ñ—Å—Ç—å –æ–∫—Ä–µ–º–∏—Ö —Ä–µ—á–µ–Ω—å"""
        try:
            self.logger.info(f"=== –ü–û–ß–ê–¢–û–ö –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –ì–†–£–ü ===")
            self.logger.info(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä—É–ø –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {len(groups)}")

            # –°–∫–∞—Å–æ–≤—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —è–∫—â–æ –≤–æ–Ω–æ —Ç—Ä–∏–≤–∞—î
            if self.is_creating_widgets:
                self.cancel_widget_creation()
                self.root.after(100, lambda: self.display_groups(groups, filename))
                return

            # –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –≥—Ä—É–ø–∏
            self.clear_groups()

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ
            self.current_video = filename
            self.current_groups = groups

            # –û–±—á–∏—Å–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø
            group_stats = self.calculate_groups_statistics(groups)

            # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title_text = f"üì¶ {filename}"
            if group_stats['total_duration_short'] != '0—Å':
                title_text += f" ‚Ä¢ {group_stats['total_duration_short']}"

            self.groups_title.config(text=title_text)

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_parts = [
                f"{group_stats['groups_count']} –≥—Ä—É–ø",
                f"‚è±Ô∏è {group_stats['total_duration']}",
                f"üìä —Å–µ—Ä–µ–¥–Ω—è: {group_stats['avg_group_duration']}",
                f"üìù {group_stats['total_words']} —Å–ª—ñ–≤"
            ]

            if group_stats['frames_count'] > 0:
                stats_parts.append(f"üñºÔ∏è {group_stats['frames_count']} –∫–∞–¥—Ä—ñ–≤")

            stats_text = " ‚Ä¢ ".join(stats_parts)
            self.groups_stats.config(text=stats_text)

            # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è
            threshold_text = f"üí° –ì—Ä—É–ø–∏ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø–∞—É–∑–∞–º–∏ ‚â•{self.silence_threshold}—Å"
            if group_stats['avg_pause_duration'] > 0:
                avg_pause = format_duration(group_stats['avg_pause_duration'], short=True)
                threshold_text += f" (—Å–µ—Ä–µ–¥–Ω—è –ø–∞—É–∑–∞: {avg_pause})"

            self.grouping_info.config(text=threshold_text)

            self.logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø: {stats_text}")

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ –≥—Ä—É–ø
            self.create_group_widgets_in_batches(groups, filename)

        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—Ä—É–ø: {error_msg}")
            import traceback
            self.logger.error(f"–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:\n{traceback.format_exc()}")
            self.status_var.set(f"–ü–æ–º–∏–ª–∫–∞: {error_msg}")


    def calculate_groups_statistics(self, groups: List[Dict]) -> Dict:
        """–û–±—á–∏—Å–ª—é—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø"""
        if not groups:
            return {
                'groups_count': 0,
                'total_duration': '0 —Å–µ–∫',
                'total_duration_short': '0—Å',
                'avg_group_duration': '0—Å',
                'total_words': 0,
                'frames_count': 0,
                'avg_pause_duration': 0.0
            }

        total_duration = sum(g.get('group_duration', 0) for g in groups)
        total_words = sum(g.get('word_count', 0) for g in groups)
        total_frames = sum(len(g.get('frames', [])) for g in groups)

        avg_duration = total_duration / len(groups)

        # –û–±—á–∏—Å–ª—é—î–º–æ —Å–µ—Ä–µ–¥–Ω—é –ø–∞—É–∑—É –º—ñ–∂ –≥—Ä—É–ø–∞–º–∏
        pauses = []
        for i in range(1, len(groups)):
            prev_end = groups[i - 1].get('group_end_time', 0)
            curr_start = groups[i].get('group_start_time', 0)
            if curr_start > prev_end:
                pauses.append(curr_start - prev_end)

        avg_pause = sum(pauses) / len(pauses) if pauses else 0.0

        return {
            'groups_count': len(groups),
            'total_duration': format_duration(total_duration),
            'total_duration_short': format_duration(total_duration, short=True),
            'avg_group_duration': format_duration(avg_duration, short=True),
            'total_words': total_words,
            'frames_count': total_frames,
            'avg_pause_duration': avg_pause
        }


    def create_group_widgets_in_batches(self, groups: List[Dict], filename: str, batch_size: int = 3):
        """–°—Ç–≤–æ—Ä—é—î –≤—ñ–¥–∂–µ—Ç–∏ –≥—Ä—É–ø –ø–æ—Ä—Ü—ñ—è–º–∏"""
        if self.is_creating_widgets:
            self.logger.warning("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ –≤–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ")
            return

        self.is_creating_widgets = True
        self.widgets_creation_cancelled = False
        self.cancel_button.config(state=tk.NORMAL)

        total = len(groups)
        current_index = 0

        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
        self.show_progress_message(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä—É–ø: 0/{total}")

        def create_next_batch():
            nonlocal current_index

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
            if self.widgets_creation_cancelled:
                self.logger.info("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ –≥—Ä—É–ø —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
                self.finish_widget_creation(cancelled=True)
                return

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            if current_index >= total:
                self.logger.info(f"=== –°–¢–í–û–†–ï–ù–û {len(self.group_widgets)} –í–Ü–î–ñ–ï–¢–Ü–í –ì–†–£–ü ===")
                self.finish_widget_creation()
                return

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–µ–∂—ñ –±–∞—Ç—á—É
            batch_end = min(current_index + batch_size, total)

            # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–∂–µ—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –±–∞—Ç—á—ñ
            for i in range(current_index, batch_end):
                if self.widgets_creation_cancelled:
                    return

                try:
                    group = groups[i]
                    self.logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä—É–ø–∏ {i + 1}/{total}: {group.get('combined_text', '')[:50]}...")

                    # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–∂–µ—Ç –≥—Ä—É–ø–∏
                    group_widget = EnhancedGroupWidget(
                        parent_frame=self.groups_scrollable_frame,
                        group_data=group,
                        video_filename=filename,
                        group_index=i,
                        ai_manager=self.ai_manager,
                        data_manager=self.data_manager,
                        on_group_click=self.on_group_clicked
                    )

                    self.group_widgets.append(group_widget)
                    self.logger.info(f"‚úÖ GroupWidget {i} —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ")

                except Exception as widget_error:
                    self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è GroupWidget {i}: {widget_error}")
                    import traceback
                    self.logger.error(f"–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:\n{traceback.format_exc()}")
                    continue

            # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
            current_index = batch_end
            progress_text = f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä—É–ø: {current_index}/{total} ({current_index / total * 100:.1f}%)"
            self.update_progress_message(progress_text)

            # –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.groups_canvas.update_idletasks()

            # –ü–ª–∞–Ω—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –±–∞—Ç—á –∑ –ø–∞—É–∑–æ—é
            self.root.after(200, create_next_batch)  # –ë—ñ–ª—å—à–∞ –ø–∞—É–∑–∞ –¥–ª—è –≥—Ä—É–ø

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à–∏–π –±–∞—Ç—á
        self.root.after(10, create_next_batch)


    def finish_widget_creation(self, cancelled: bool = False):
        """–ó–∞–≤–µ—Ä—à—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ –≥—Ä—É–ø"""
        try:
            self.is_creating_widgets = False
            self.cancel_button.config(state=tk.DISABLED)

            if cancelled:
                self.status_var.set("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä—É–ø —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
                self.hide_progress_message()
                return

            # –•–æ–≤–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
            self.hide_progress_message()

            # –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.groups_canvas.update_idletasks()

            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –ø–æ—á–∞—Ç–∫—É
            self.groups_canvas.yview_moveto(0)

            # –§—ñ–Ω–∞–ª—å–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            self.root.update_idletasks()

            total_widgets = len(self.group_widgets)
            self.status_var.set(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {total_widgets} –≥—Ä—É–ø")
            self.logger.info(f"=== –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –ì–†–£–ü –ó–ê–í–ï–†–®–ï–ù–û: {total_widgets} –≤—ñ–¥–∂–µ—Ç—ñ–≤ ===")

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ –≥—Ä—É–ø: {e}")


    def cancel_widget_creation(self):
        """–°–∫–∞—Å–æ–≤—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤"""
        if self.is_creating_widgets:
            self.widgets_creation_cancelled = True
            self.logger.info("–ó–∞–ø–∏—Ç –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ –≥—Ä—É–ø")


    def show_progress_message(self, message: str):
        """–ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É"""
        if hasattr(self, 'progress_label'):
            self.progress_label.destroy()

        self.progress_label = ttk.Label(
            self.groups_scrollable_frame,
            text=f"üîÑ {message}",
            font=("Arial", 12, "bold"),
            background="#fff3cd"
        )
        self.progress_label.pack(pady=20)
        self.root.update_idletasks()


    def update_progress_message(self, message: str):
        """–û–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É"""
        if hasattr(self, 'progress_label') and self.progress_label.winfo_exists():
            self.progress_label.config(text=f"üîÑ {message}")
            self.root.update_idletasks()


    def hide_progress_message(self):
        """–•–æ–≤–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É"""
        if hasattr(self, 'progress_label'):
            try:
                self.progress_label.destroy()
                delattr(self, 'progress_label')
            except:
                pass


    def clear_groups(self):
        """–û—á–∏—â–∞—î –≤—Å—ñ –≥—Ä—É–ø–∏ –±–µ–∑–ø–µ—á–Ω–æ"""
        try:
            # –°–∫–∞—Å–æ–≤—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ —è–∫—â–æ –≤–æ–Ω–æ —Ç—Ä–∏–≤–∞—î
            if self.is_creating_widgets:
                self.cancel_widget_creation()
                self.root.after(50)

            self.logger.info(f"–û—á–∏—â–µ–Ω–Ω—è {len(self.group_widgets)} –≤—ñ–¥–∂–µ—Ç—ñ–≤ –≥—Ä—É–ø...")

            # –í–∏–¥–∞–ª—è—î–º–æ –≤—ñ–¥–∂–µ—Ç–∏
            for i, widget in enumerate(self.group_widgets):
                try:
                    if hasattr(widget, 'main_frame') and widget.main_frame.winfo_exists():
                        widget.main_frame.destroy()
                        self.logger.debug(f"–í—ñ–¥–∂–µ—Ç –≥—Ä—É–ø–∏ {i} –≤–∏–¥–∞–ª–µ–Ω–∏–π")
                except Exception as e:
                    self.logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç–∞ –≥—Ä—É–ø–∏ {i}: {e}")

            self.group_widgets.clear()

            # –û—á–∏—â–∞—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π —Ñ—Ä–µ–π–º
            for child in self.groups_scrollable_frame.winfo_children():
                try:
                    child.destroy()
                except:
                    pass

            # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
            self.current_groups.clear()
            self.selected_group = None

            # –°–∫–∏–¥–∞—î–º–æ –ø—Ä–æ–∫—Ä—É—Ç–∫—É
            self.groups_canvas.yview_moveto(0)

            self.logger.info("–û—á–∏—â–µ–Ω–Ω—è –≥—Ä—É–ø –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –≥—Ä—É–ø: {e}")


    def refresh_videos(self):
        """–û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–µ–æ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –≥—Ä—É–ø–∏"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –≤—ñ–¥–µ–æ
            video_states = self.data_manager.get_all_video_states()
            processed_videos = [v for v in video_states if v['processing_completed']]

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ–º–±–æ–±–æ–∫—Å–∞ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –≥—Ä—É–ø–∏
            video_options = []
            for video in processed_videos:
                filename = video['video_filename']

                try:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –≥—Ä—É–ø–∏ –¥–ª—è –≤—ñ–¥–µ–æ
                    groups = self.video_processor.get_video_groups(filename)

                    if groups:
                        total_duration = sum(g.get('group_duration', 0) for g in groups)
                        duration_text = format_duration(total_duration, short=True)
                        frames_count = sum(len(g.get('frames', [])) for g in groups)

                        info_parts = [f"{len(groups)} –≥—Ä—É–ø", duration_text]
                        if frames_count > 0:
                            info_parts.append(f"{frames_count} –∫–∞–¥—Ä—ñ–≤")

                        video_options.append(f"{filename} ({' ‚Ä¢ '.join(info_parts)})")
                    else:
                        video_options.append(f"{filename} (–Ω–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ)")

                except Exception as e:
                    self.logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä—É–ø–∏ –¥–ª—è {filename}: {e}")
                    video_options.append(f"{filename} (–ø–æ–º–∏–ª–∫–∞)")

            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–º–±–æ–±–æ–∫—Å
            self.video_combo['values'] = video_options

            if video_options and not self.current_video:
                self.video_combo.current(0)
                self.on_video_selected()

            self.logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(video_options)} –≤—ñ–¥–µ–æ")

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—ñ–¥–µ–æ: {e}")


    def on_video_selected(self, event=None):
        """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –≤—ñ–¥–µ–æ"""
        selected = self.video_var.get()
        if not selected:
            return

        try:
            # –í–∏—Ç—è–≥—É—î–º–æ –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É –∑ —Ä—è–¥–∫–∞
            filename = selected.split(' (')[0]

            self.status_var.set(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—Ä—É–ø –¥–ª—è {filename}...")

            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≥—Ä—É–ø–∏ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            threading.Thread(target=self.load_groups_for_video,
                             args=(filename,), daemon=True).start()

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –≤—ñ–¥–µ–æ: {e}")
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ: {e}")


    def load_groups_for_video(self, filename: str):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≥—Ä—É–ø–∏ –¥–ª—è –≤—ñ–¥–µ–æ"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≥—Ä—É–ø–∏ –∑ enhanced video processor
            groups = self.video_processor.get_video_groups(filename)

            if not groups:
                # –Ø–∫—â–æ –Ω–µ–º–∞—î –≥—Ä—É–ø, —Å–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ó—Ö
                self.logger.info(f"–ù–µ–º–∞—î –≥—Ä—É–ø –¥–ª—è {filename}, —Å—Ç–≤–æ—Ä—é—î–º–æ...")
                self.root.after(0, lambda: self.status_var.set(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä—É–ø –¥–ª—è {filename}..."))

                # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –≤—ñ–¥–µ–æ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä—É–ø
                video_info = {
                    "filename": filename,
                    "filepath": f"videos/{filename}"  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                }

                result = self.video_processor.process_single_video_enhanced(video_info)

                if result['success']:
                    groups = self.video_processor.get_video_groups(filename)
                else:
                    raise Exception(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä—É–ø: {result.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")

            # –û–Ω–æ–≤–ª—é—î–º–æ UI –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            self.root.after(0, lambda: self.display_groups(groups, filename))

        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—Ä—É–ø: {error_msg}")
            self.root.after(0, lambda msg=error_msg: messagebox.showerror("–ü–æ–º–∏–ª–∫–∞",
                                                                          f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≥—Ä—É–ø–∏: {msg}"))


    def on_group_clicked(self, group_data: Dict, video_filename: str):
        """–û–±—Ä–æ–±–ª—è—î –∫–ª—ñ–∫ –ø–æ –≥—Ä—É–ø—ñ"""
        self.selected_group = group_data

        # –ü–µ—Ä–µ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≥—Ä—É–ø–∏ –≤ –ø–∞–Ω–µ–ª—å –Ω–æ—Ç–∞—Ç–æ–∫
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à–µ —Ä–µ—á–µ–Ω–Ω—è –≥—Ä—É–ø–∏ —è–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        segments = group_data.get('segments', [])
        if segments:
            first_segment = segments[0]
            sentence_data = {
                'text': first_segment.get('text', ''),
                'start_time': first_segment.get('start_time', 0),
                'end_time': first_segment.get('end_time', 0)
            }
            self.notes_panel.set_sentence_context(sentence_data, video_filename)

        self.logger.debug(f"–í–∏–±—Ä–∞–Ω–æ –≥—Ä—É–ø—É: {group_data.get('combined_text', '')[:50]}...")


    def on_note_changed(self):
        """–û–±—Ä–æ–±–ª—è—î –∑–º—ñ–Ω—É –Ω–æ—Ç–∞—Ç–∫–∏"""
        pass


    def on_silence_threshold_changed(self):
        """–û–±—Ä–æ–±–ª—è—î –∑–º—ñ–Ω—É –ø–æ—Ä–æ–≥—É —Ç–∏—à—ñ"""
        new_threshold = self.silence_var.get()
        if new_threshold != self.silence_threshold:
            self.silence_threshold = new_threshold
            self.video_processor.segment_grouper.silence_threshold = new_threshold



